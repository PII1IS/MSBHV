
STM32TrustOptigaMv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b70  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008cf8  08008cf8  00009cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d38  08008d38  0000a4b4  2**0
                  CONTENTS
  4 .ARM          00000008  08008d38  08008d38  00009d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d40  08008d40  0000a4b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d40  08008d40  00009d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d44  08008d44  00009d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004b4  20000000  08008d48  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a4b4  2**0
                  CONTENTS
 10 .bss          00001e54  200004b4  200004b4  0000a4b4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002308  20002308  0000a4b4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a4b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000170e2  00000000  00000000  0000a4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b82  00000000  00000000  000215c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001460  00000000  00000000  00025148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f76  00000000  00000000  000265a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000255df  00000000  00000000  0002751e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001df7d  00000000  00000000  0004cafd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2912  00000000  00000000  0006aa7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013d38c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055dc  00000000  00000000  0013d3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  001429ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200004b4 	.word	0x200004b4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ce0 	.word	0x08008ce0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200004b8 	.word	0x200004b8
 80001c4:	08008ce0 	.word	0x08008ce0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <optiga_util_callback>:
	uint8_t	RSA_enc[2048];
	uint8_t	RSA_dec[2048];
} L6_data;

static void optiga_util_callback(void * context, optiga_lib_status_t return_status)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	807b      	strh	r3, [r7, #2]
    optiga_lib_status = return_status;
 80004c4:	4a04      	ldr	r2, [pc, #16]	@ (80004d8 <optiga_util_callback+0x20>)
 80004c6:	887b      	ldrh	r3, [r7, #2]
 80004c8:	8013      	strh	r3, [r2, #0]
}
 80004ca:	bf00      	nop
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	20000578 	.word	0x20000578

080004dc <optiga_crypt_callback>:

static void optiga_crypt_callback(void * context, optiga_lib_status_t return_status)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	807b      	strh	r3, [r7, #2]
    optiga_lib_status = return_status;
 80004e8:	4a04      	ldr	r2, [pc, #16]	@ (80004fc <optiga_crypt_callback+0x20>)
 80004ea:	887b      	ldrh	r3, [r7, #2]
 80004ec:	8013      	strh	r3, [r2, #0]
    if (NULL != context)
    {
        // callback to upper layer here
    }
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000578 	.word	0x20000578

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b0b4      	sub	sp, #208	@ 0xd0
 8000504:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f005 fea9 	bl	800625c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f9fd 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 fadf 	bl	8000ad0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000512:	f000 fa63 	bl	80009dc <MX_I2C1_Init>
  MX_TIM2_Init();
 8000516:	f000 fa8f 	bl	8000a38 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  me_util = optiga_util_create(0, optiga_util_callback, NULL);
 800051a:	2200      	movs	r2, #0
 800051c:	49a3      	ldr	r1, [pc, #652]	@ (80007ac <main+0x2ac>)
 800051e:	2000      	movs	r0, #0
 8000520:	f005 fdd0 	bl	80060c4 <optiga_util_create>
 8000524:	4603      	mov	r3, r0
 8000526:	4aa2      	ldr	r2, [pc, #648]	@ (80007b0 <main+0x2b0>)
 8000528:	6013      	str	r3, [r2, #0]

  optiga_lib_status = OPTIGA_LIB_BUSY;
 800052a:	4ba2      	ldr	r3, [pc, #648]	@ (80007b4 <main+0x2b4>)
 800052c:	2201      	movs	r2, #1
 800052e:	801a      	strh	r2, [r3, #0]

  return_status = optiga_util_open_application(me_util, 0);
 8000530:	4b9f      	ldr	r3, [pc, #636]	@ (80007b0 <main+0x2b0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f005 fdfe 	bl	8006138 <optiga_util_open_application>
 800053c:	4603      	mov	r3, r0
 800053e:	461a      	mov	r2, r3
 8000540:	4b9d      	ldr	r3, [pc, #628]	@ (80007b8 <main+0x2b8>)
 8000542:	801a      	strh	r2, [r3, #0]

  while (optiga_lib_status == OPTIGA_LIB_BUSY)
 8000544:	bf00      	nop
 8000546:	4b9b      	ldr	r3, [pc, #620]	@ (80007b4 <main+0x2b4>)
 8000548:	881b      	ldrh	r3, [r3, #0]
 800054a:	b29b      	uxth	r3, r3
 800054c:	2b01      	cmp	r3, #1
 800054e:	d0fa      	beq.n	8000546 <main+0x46>
  {
      //Wait until the optiga_util_open_application is completed
  }

  me_crypt = optiga_crypt_create(0, optiga_crypt_callback, NULL);
 8000550:	2200      	movs	r2, #0
 8000552:	499a      	ldr	r1, [pc, #616]	@ (80007bc <main+0x2bc>)
 8000554:	2000      	movs	r0, #0
 8000556:	f005 f8e1 	bl	800571c <optiga_crypt_create>
 800055a:	4603      	mov	r3, r0
 800055c:	4a98      	ldr	r2, [pc, #608]	@ (80007c0 <main+0x2c0>)
 800055e:	6013      	str	r3, [r2, #0]
      // break;
  }

  hash_data_from_host_t to_hash;

  to_hash.buffer = (uint8_t*)&L6_data.msg0;
 8000560:	4b98      	ldr	r3, [pc, #608]	@ (80007c4 <main+0x2c4>)
 8000562:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  to_hash.length = 256;
 8000566:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800056a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  uint8_t (*hash_out)[32] = &L6_data.msg0_sig;
 800056e:	4b96      	ldr	r3, [pc, #600]	@ (80007c8 <main+0x2c8>)
 8000570:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

  uint8_t (*rnd_buff)[256] = &L6_data.msg0;
 8000574:	4b93      	ldr	r3, [pc, #588]	@ (80007c4 <main+0x2c4>)
 8000576:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  uint8_t rep = 4;
 800057a:	2304      	movs	r3, #4
 800057c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

  while(rep--) {
 8000580:	e03f      	b.n	8000602 <main+0x102>

	  optiga_lib_status = OPTIGA_LIB_BUSY;
 8000582:	4b8c      	ldr	r3, [pc, #560]	@ (80007b4 <main+0x2b4>)
 8000584:	2201      	movs	r2, #1
 8000586:	801a      	strh	r2, [r3, #0]

	  return_status = optiga_crypt_random(me_crypt,
 8000588:	4b8d      	ldr	r3, [pc, #564]	@ (80007c0 <main+0x2c0>)
 800058a:	6818      	ldr	r0, [r3, #0]
 800058c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000590:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8000594:	2100      	movs	r1, #0
 8000596:	f005 f8fb 	bl	8005790 <optiga_crypt_random>
 800059a:	4603      	mov	r3, r0
 800059c:	461a      	mov	r2, r3
 800059e:	4b86      	ldr	r3, [pc, #536]	@ (80007b8 <main+0x2b8>)
 80005a0:	801a      	strh	r2, [r3, #0]
	  if (OPTIGA_LIB_SUCCESS != return_status)
	  {
	      // break;
	  }

	  while (OPTIGA_LIB_BUSY == optiga_lib_status)
 80005a2:	bf00      	nop
 80005a4:	4b83      	ldr	r3, [pc, #524]	@ (80007b4 <main+0x2b4>)
 80005a6:	881b      	ldrh	r3, [r3, #0]
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d0fa      	beq.n	80005a4 <main+0xa4>
	  {
	      //Wait until the optiga_crypt_random operation is completed
	  }

	  optiga_lib_status = OPTIGA_LIB_BUSY;
 80005ae:	4b81      	ldr	r3, [pc, #516]	@ (80007b4 <main+0x2b4>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	801a      	strh	r2, [r3, #0]

	  return_status = optiga_crypt_hash  ( me_crypt,
 80005b4:	4b82      	ldr	r3, [pc, #520]	@ (80007c0 <main+0x2c0>)
 80005b6:	6818      	ldr	r0, [r3, #0]
 80005b8:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 80005bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	4613      	mov	r3, r2
 80005c4:	2201      	movs	r2, #1
 80005c6:	21e2      	movs	r1, #226	@ 0xe2
 80005c8:	f005 f910 	bl	80057ec <optiga_crypt_hash>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b79      	ldr	r3, [pc, #484]	@ (80007b8 <main+0x2b8>)
 80005d2:	801a      	strh	r2, [r3, #0]
	  if (OPTIGA_LIB_SUCCESS != return_status)
	  {
		  // break;
	  }

	  while (OPTIGA_LIB_BUSY == optiga_lib_status)
 80005d4:	bf00      	nop
 80005d6:	4b77      	ldr	r3, [pc, #476]	@ (80007b4 <main+0x2b4>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d0fa      	beq.n	80005d6 <main+0xd6>
	  {
		  //Wait until the optiga_crypt_random operation is completed
	  }

	  rnd_buff++;
 80005e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80005e4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80005e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	  to_hash.buffer += 256;
 80005ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80005f0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80005f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	  hash_out++;
 80005f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80005fc:	3320      	adds	r3, #32
 80005fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  while(rep--) {
 8000602:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8000606:	1e5a      	subs	r2, r3, #1
 8000608:	f887 20af 	strb.w	r2, [r7, #175]	@ 0xaf
 800060c:	2b00      	cmp	r3, #0
 800060e:	d1b8      	bne.n	8000582 <main+0x82>
  }

  to_hash.buffer = (uint8_t*)&L6_data;
 8000610:	4b6c      	ldr	r3, [pc, #432]	@ (80007c4 <main+0x2c4>)
 8000612:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  to_hash.length = 256 * 4 + 32;
 8000616:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 800061a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  hash_out = &L6_data.sig_sig;
 800061e:	4b6b      	ldr	r3, [pc, #428]	@ (80007cc <main+0x2cc>)
 8000620:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

  optiga_lib_status = OPTIGA_LIB_BUSY;
 8000624:	4b63      	ldr	r3, [pc, #396]	@ (80007b4 <main+0x2b4>)
 8000626:	2201      	movs	r2, #1
 8000628:	801a      	strh	r2, [r3, #0]

  return_status = optiga_crypt_hash  ( me_crypt,
 800062a:	4b65      	ldr	r3, [pc, #404]	@ (80007c0 <main+0x2c0>)
 800062c:	6818      	ldr	r0, [r3, #0]
 800062e:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8000632:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	4613      	mov	r3, r2
 800063a:	2201      	movs	r2, #1
 800063c:	21e2      	movs	r1, #226	@ 0xe2
 800063e:	f005 f8d5 	bl	80057ec <optiga_crypt_hash>
 8000642:	4603      	mov	r3, r0
 8000644:	461a      	mov	r2, r3
 8000646:	4b5c      	ldr	r3, [pc, #368]	@ (80007b8 <main+0x2b8>)
 8000648:	801a      	strh	r2, [r3, #0]
  if (OPTIGA_LIB_SUCCESS != return_status)
  {
	  // break;
  }

  while (OPTIGA_LIB_BUSY == optiga_lib_status)
 800064a:	bf00      	nop
 800064c:	4b59      	ldr	r3, [pc, #356]	@ (80007b4 <main+0x2b4>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	b29b      	uxth	r3, r3
 8000652:	2b01      	cmp	r3, #1
 8000654:	d0fa      	beq.n	800064c <main+0x14c>
  {
	  //Wait until the optiga_crypt_random operation is completed
  }

  optiga_lib_status = OPTIGA_LIB_BUSY;
 8000656:	4b57      	ldr	r3, [pc, #348]	@ (80007b4 <main+0x2b4>)
 8000658:	2201      	movs	r2, #1
 800065a:	801a      	strh	r2, [r3, #0]
  optiga_oid = 0xE0FC;
 800065c:	4b5c      	ldr	r3, [pc, #368]	@ (80007d0 <main+0x2d0>)
 800065e:	f24e 02fc 	movw	r2, #57596	@ 0xe0fc
 8000662:	801a      	strh	r2, [r3, #0]
  return_status = optiga_util_write_metadata(me_util,
 8000664:	4b52      	ldr	r3, [pc, #328]	@ (80007b0 <main+0x2b0>)
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	4b59      	ldr	r3, [pc, #356]	@ (80007d0 <main+0x2d0>)
 800066a:	8819      	ldrh	r1, [r3, #0]
 800066c:	2308      	movs	r3, #8
 800066e:	4a59      	ldr	r2, [pc, #356]	@ (80007d4 <main+0x2d4>)
 8000670:	f005 fd98 	bl	80061a4 <optiga_util_write_metadata>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b4f      	ldr	r3, [pc, #316]	@ (80007b8 <main+0x2b8>)
 800067a:	801a      	strh	r2, [r3, #0]
  if (OPTIGA_LIB_SUCCESS != return_status)
  {
      // break;
  }

  while (OPTIGA_LIB_BUSY == optiga_lib_status)
 800067c:	bf00      	nop
 800067e:	4b4d      	ldr	r3, [pc, #308]	@ (80007b4 <main+0x2b4>)
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	b29b      	uxth	r3, r3
 8000684:	2b01      	cmp	r3, #1
 8000686:	d0fa      	beq.n	800067e <main+0x17e>
  {
      //Wait until the optiga_crypt_random operation is completed
  }


  optiga_lib_status = OPTIGA_LIB_BUSY;
 8000688:	4b4a      	ldr	r3, [pc, #296]	@ (80007b4 <main+0x2b4>)
 800068a:	2201      	movs	r2, #1
 800068c:	801a      	strh	r2, [r3, #0]
  optiga_key_id = OPTIGA_KEY_ID_E0FC;
 800068e:	4b52      	ldr	r3, [pc, #328]	@ (80007d8 <main+0x2d8>)
 8000690:	f24e 02fc 	movw	r2, #57596	@ 0xe0fc
 8000694:	801a      	strh	r2, [r3, #0]

  return_status = optiga_crypt_rsa_generate_keypair(me_crypt,
 8000696:	4b4a      	ldr	r3, [pc, #296]	@ (80007c0 <main+0x2c0>)
 8000698:	6818      	ldr	r0, [r3, #0]
 800069a:	4b50      	ldr	r3, [pc, #320]	@ (80007dc <main+0x2dc>)
 800069c:	9302      	str	r3, [sp, #8]
 800069e:	4b50      	ldr	r3, [pc, #320]	@ (80007e0 <main+0x2e0>)
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	4b4d      	ldr	r3, [pc, #308]	@ (80007d8 <main+0x2d8>)
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2300      	movs	r3, #0
 80006a8:	2212      	movs	r2, #18
 80006aa:	2141      	movs	r1, #65	@ 0x41
 80006ac:	f005 f8d3 	bl	8005856 <optiga_crypt_rsa_generate_keypair>
 80006b0:	4603      	mov	r3, r0
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b40      	ldr	r3, [pc, #256]	@ (80007b8 <main+0x2b8>)
 80006b6:	801a      	strh	r2, [r3, #0]
  if (OPTIGA_LIB_SUCCESS != return_status)
  {
      // break;
  }

  while (OPTIGA_LIB_BUSY == optiga_lib_status)
 80006b8:	bf00      	nop
 80006ba:	4b3e      	ldr	r3, [pc, #248]	@ (80007b4 <main+0x2b4>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d0fa      	beq.n	80006ba <main+0x1ba>
  {
      //Wait until the optiga_crypt_random operation is completed
  }

  encryption_scheme = OPTIGA_RSAES_PKCS1_V15;
 80006c4:	4b47      	ldr	r3, [pc, #284]	@ (80007e4 <main+0x2e4>)
 80006c6:	2211      	movs	r2, #17
 80006c8:	701a      	strb	r2, [r3, #0]
  public_key_from_host.public_key = public_key;
 80006ca:	4b47      	ldr	r3, [pc, #284]	@ (80007e8 <main+0x2e8>)
 80006cc:	4a44      	ldr	r2, [pc, #272]	@ (80007e0 <main+0x2e0>)
 80006ce:	601a      	str	r2, [r3, #0]
  public_key_from_host.length = public_key_length;
 80006d0:	4b42      	ldr	r3, [pc, #264]	@ (80007dc <main+0x2dc>)
 80006d2:	881a      	ldrh	r2, [r3, #0]
 80006d4:	4b44      	ldr	r3, [pc, #272]	@ (80007e8 <main+0x2e8>)
 80006d6:	809a      	strh	r2, [r3, #4]
  public_key_from_host.key_type = (uint8_t)OPTIGA_RSA_KEY_1024_BIT_EXPONENTIAL;
 80006d8:	4b43      	ldr	r3, [pc, #268]	@ (80007e8 <main+0x2e8>)
 80006da:	2241      	movs	r2, #65	@ 0x41
 80006dc:	719a      	strb	r2, [r3, #6]

  uint8_t * data_to_enc = &L6_data;
 80006de:	4b39      	ldr	r3, [pc, #228]	@ (80007c4 <main+0x2c4>)
 80006e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t enc_len = 1056;
 80006e4:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 80006e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  const uint32_t enc_qnt = 100;
 80006ec:	2364      	movs	r3, #100	@ 0x64
 80006ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  uint8_t * enc_data = &L6_data.RSA_enc;
 80006f2:	4b3e      	ldr	r3, [pc, #248]	@ (80007ec <main+0x2ec>)
 80006f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  rep = 11;
 80006f8:	230b      	movs	r3, #11
 80006fa:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

  while (rep--) {
 80006fe:	e03d      	b.n	800077c <main+0x27c>
	  optiga_lib_status = OPTIGA_LIB_BUSY;
 8000700:	4b2c      	ldr	r3, [pc, #176]	@ (80007b4 <main+0x2b4>)
 8000702:	2201      	movs	r2, #1
 8000704:	801a      	strh	r2, [r3, #0]

	  return_status = optiga_crypt_rsa_encrypt_message(me_crypt,
 8000706:	4b2e      	ldr	r3, [pc, #184]	@ (80007c0 <main+0x2c0>)
 8000708:	6818      	ldr	r0, [r3, #0]
 800070a:	4b36      	ldr	r3, [pc, #216]	@ (80007e4 <main+0x2e4>)
 800070c:	7819      	ldrb	r1, [r3, #0]
														  encryption_scheme,
														  data_to_enc,
														  (enc_len>enc_qnt)?enc_qnt:enc_len,
 800070e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8000712:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8000716:	4293      	cmp	r3, r2
 8000718:	bf28      	it	cs
 800071a:	4613      	movcs	r3, r2
	  return_status = optiga_crypt_rsa_encrypt_message(me_crypt,
 800071c:	b29a      	uxth	r2, r3
 800071e:	4b34      	ldr	r3, [pc, #208]	@ (80007f0 <main+0x2f0>)
 8000720:	9305      	str	r3, [sp, #20]
 8000722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000726:	9304      	str	r3, [sp, #16]
 8000728:	4b2f      	ldr	r3, [pc, #188]	@ (80007e8 <main+0x2e8>)
 800072a:	9303      	str	r3, [sp, #12]
 800072c:	2301      	movs	r3, #1
 800072e:	9302      	str	r3, [sp, #8]
 8000730:	2300      	movs	r3, #0
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	2300      	movs	r3, #0
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4613      	mov	r3, r2
 800073a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800073e:	f005 f8e8 	bl	8005912 <optiga_crypt_rsa_encrypt_message>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	4b1c      	ldr	r3, [pc, #112]	@ (80007b8 <main+0x2b8>)
 8000748:	801a      	strh	r2, [r3, #0]
	  if (OPTIGA_LIB_SUCCESS != return_status)
	  {
		  // break;
	  }

	  while (OPTIGA_LIB_BUSY == optiga_lib_status)
 800074a:	bf00      	nop
 800074c:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <main+0x2b4>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	b29b      	uxth	r3, r3
 8000752:	2b01      	cmp	r3, #1
 8000754:	d0fa      	beq.n	800074c <main+0x24c>
	  {
		  //Wait until the optiga_crypt_random operation is completed
	  }
	  enc_len -= enc_qnt;
 8000756:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800075a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800075e:	1ad3      	subs	r3, r2, r3
 8000760:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	  data_to_enc += enc_qnt;
 8000764:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8000768:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800076c:	4413      	add	r3, r2
 800076e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
	  enc_data += 128;
 8000772:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000776:	3380      	adds	r3, #128	@ 0x80
 8000778:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  while (rep--) {
 800077c:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	f887 20af 	strb.w	r2, [r7, #175]	@ 0xaf
 8000786:	2b00      	cmp	r3, #0
 8000788:	d1ba      	bne.n	8000700 <main+0x200>
  }

  uint8_t * dec_data = &L6_data.RSA_dec;
 800078a:	4b1a      	ldr	r3, [pc, #104]	@ (80007f4 <main+0x2f4>)
 800078c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t dec_qnt = 100;
 8000790:	2364      	movs	r3, #100	@ 0x64
 8000792:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

  uint32_t dec_len = 100;
 8000796:	2364      	movs	r3, #100	@ 0x64
 8000798:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  enc_data = &L6_data.RSA_enc;
 800079c:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <main+0x2ec>)
 800079e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  rep = 11;
 80007a2:	230b      	movs	r3, #11
 80007a4:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

  while (rep--) {
 80007a8:	e055      	b.n	8000856 <main+0x356>
 80007aa:	bf00      	nop
 80007ac:	080004b9 	.word	0x080004b9
 80007b0:	20000574 	.word	0x20000574
 80007b4:	20000578 	.word	0x20000578
 80007b8:	20000570 	.word	0x20000570
 80007bc:	080004dd 	.word	0x080004dd
 80007c0:	2000056c 	.word	0x2000056c
 80007c4:	20000620 	.word	0x20000620
 80007c8:	20000a40 	.word	0x20000a40
 80007cc:	20000a20 	.word	0x20000a20
 80007d0:	2000057c 	.word	0x2000057c
 80007d4:	08008cf8 	.word	0x08008cf8
 80007d8:	2000057a 	.word	0x2000057a
 80007dc:	20000002 	.word	0x20000002
 80007e0:	20000588 	.word	0x20000588
 80007e4:	2000057e 	.word	0x2000057e
 80007e8:	20000580 	.word	0x20000580
 80007ec:	20000ac0 	.word	0x20000ac0
 80007f0:	20000000 	.word	0x20000000
 80007f4:	200012c0 	.word	0x200012c0
	  optiga_lib_status = OPTIGA_LIB_BUSY;
 80007f8:	4b3c      	ldr	r3, [pc, #240]	@ (80008ec <main+0x3ec>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	801a      	strh	r2, [r3, #0]

	  return_status = optiga_crypt_rsa_decrypt_and_export(me_crypt,
 80007fe:	4b3c      	ldr	r3, [pc, #240]	@ (80008f0 <main+0x3f0>)
 8000800:	6818      	ldr	r0, [r3, #0]
 8000802:	4b3c      	ldr	r3, [pc, #240]	@ (80008f4 <main+0x3f4>)
 8000804:	7819      	ldrb	r1, [r3, #0]
 8000806:	4b3c      	ldr	r3, [pc, #240]	@ (80008f8 <main+0x3f8>)
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 800080e:	9204      	str	r2, [sp, #16]
 8000810:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8000814:	9203      	str	r2, [sp, #12]
 8000816:	9302      	str	r3, [sp, #8]
 8000818:	2300      	movs	r3, #0
 800081a:	9301      	str	r3, [sp, #4]
 800081c:	2300      	movs	r3, #0
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2380      	movs	r3, #128	@ 0x80
 8000822:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8000826:	f005 f8b1 	bl	800598c <optiga_crypt_rsa_decrypt_and_export>
 800082a:	4603      	mov	r3, r0
 800082c:	461a      	mov	r2, r3
 800082e:	4b33      	ldr	r3, [pc, #204]	@ (80008fc <main+0x3fc>)
 8000830:	801a      	strh	r2, [r3, #0]
	  if (OPTIGA_LIB_SUCCESS != return_status)
	  {
		  // break;
	  }

	  while (OPTIGA_LIB_BUSY == optiga_lib_status)
 8000832:	bf00      	nop
 8000834:	4b2d      	ldr	r3, [pc, #180]	@ (80008ec <main+0x3ec>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	b29b      	uxth	r3, r3
 800083a:	2b01      	cmp	r3, #1
 800083c:	d0fa      	beq.n	8000834 <main+0x334>
	  {
		  //Wait until the optiga_crypt_random operation is completed
	  }

	  dec_data += dec_qnt;
 800083e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8000842:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000846:	4413      	add	r3, r2
 8000848:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	  enc_data += 128;
 800084c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000850:	3380      	adds	r3, #128	@ 0x80
 8000852:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  while (rep--) {
 8000856:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 800085a:	1e5a      	subs	r2, r3, #1
 800085c:	f887 20af 	strb.w	r2, [r7, #175]	@ 0xaf
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1c9      	bne.n	80007f8 <main+0x2f8>
  }

  optiga_lib_status = OPTIGA_LIB_BUSY;
 8000864:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <main+0x3ec>)
 8000866:	2201      	movs	r2, #1
 8000868:	801a      	strh	r2, [r3, #0]
  uint8_t * digest = &L6_data.sig_sig;
 800086a:	4b25      	ldr	r3, [pc, #148]	@ (8000900 <main+0x400>)
 800086c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  uint8_t signature[128];
  uint16_t signature_length = sizeof(signature);
 8000870:	2380      	movs	r3, #128	@ 0x80
 8000872:	807b      	strh	r3, [r7, #2]

  return_status = optiga_crypt_rsa_sign	(	me_crypt,
 8000874:	4b1e      	ldr	r3, [pc, #120]	@ (80008f0 <main+0x3f0>)
 8000876:	6818      	ldr	r0, [r3, #0]
 8000878:	2300      	movs	r3, #0
 800087a:	9303      	str	r3, [sp, #12]
 800087c:	1cbb      	adds	r3, r7, #2
 800087e:	9302      	str	r3, [sp, #8]
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	f24e 03fc 	movw	r3, #57596	@ 0xe0fc
 8000888:	9300      	str	r3, [sp, #0]
 800088a:	2320      	movs	r3, #32
 800088c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000890:	2101      	movs	r1, #1
 8000892:	f004 ffff 	bl	8005894 <optiga_crypt_rsa_sign>
 8000896:	4603      	mov	r3, r0
 8000898:	461a      	mov	r2, r3
 800089a:	4b18      	ldr	r3, [pc, #96]	@ (80008fc <main+0x3fc>)
 800089c:	801a      	strh	r2, [r3, #0]
  if (OPTIGA_LIB_SUCCESS != return_status)
  {
	  // break;
  }

  while (OPTIGA_LIB_BUSY == optiga_lib_status)
 800089e:	bf00      	nop
 80008a0:	4b12      	ldr	r3, [pc, #72]	@ (80008ec <main+0x3ec>)
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d0fa      	beq.n	80008a0 <main+0x3a0>
  {
	  //Wait until the optiga_crypt_random operation is completed
  }

  optiga_lib_status = OPTIGA_LIB_BUSY;
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <main+0x3ec>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	801a      	strh	r2, [r3, #0]

  // digest[0] = 123; // Try this to trigger Signature verification failure

  return_status = optiga_crypt_rsa_verify (me_crypt,
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <main+0x3f0>)
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	2300      	movs	r3, #0
 80008b6:	9304      	str	r3, [sp, #16]
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <main+0x404>)
 80008ba:	9303      	str	r3, [sp, #12]
 80008bc:	2301      	movs	r3, #1
 80008be:	9302      	str	r3, [sp, #8]
 80008c0:	2380      	movs	r3, #128	@ 0x80
 80008c2:	9301      	str	r3, [sp, #4]
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	2320      	movs	r3, #32
 80008ca:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80008ce:	2101      	movs	r1, #1
 80008d0:	f004 fffe 	bl	80058d0 <optiga_crypt_rsa_verify>
 80008d4:	4603      	mov	r3, r0
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <main+0x3fc>)
 80008da:	801a      	strh	r2, [r3, #0]
  if (OPTIGA_LIB_SUCCESS != return_status)
  {
	  // break;
  }

  while (OPTIGA_LIB_BUSY == optiga_lib_status)
 80008dc:	bf00      	nop
 80008de:	4b03      	ldr	r3, [pc, #12]	@ (80008ec <main+0x3ec>)
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d0fa      	beq.n	80008de <main+0x3de>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <main+0x3e8>
 80008ec:	20000578 	.word	0x20000578
 80008f0:	2000056c 	.word	0x2000056c
 80008f4:	2000057e 	.word	0x2000057e
 80008f8:	2000057a 	.word	0x2000057a
 80008fc:	20000570 	.word	0x20000570
 8000900:	20000a20 	.word	0x20000a20
 8000904:	20000580 	.word	0x20000580

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b094      	sub	sp, #80	@ 0x50
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 0320 	add.w	r3, r7, #32
 8000912:	2230      	movs	r2, #48	@ 0x30
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f008 f946 	bl	8008ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	4b28      	ldr	r3, [pc, #160]	@ (80009d4 <SystemClock_Config+0xcc>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000934:	4a27      	ldr	r2, [pc, #156]	@ (80009d4 <SystemClock_Config+0xcc>)
 8000936:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800093a:	6413      	str	r3, [r2, #64]	@ 0x40
 800093c:	4b25      	ldr	r3, [pc, #148]	@ (80009d4 <SystemClock_Config+0xcc>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000948:	2300      	movs	r3, #0
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <SystemClock_Config+0xd0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a21      	ldr	r2, [pc, #132]	@ (80009d8 <SystemClock_Config+0xd0>)
 8000952:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <SystemClock_Config+0xd0>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000964:	2302      	movs	r3, #2
 8000966:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000968:	2301      	movs	r3, #1
 800096a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096c:	2310      	movs	r3, #16
 800096e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000970:	2302      	movs	r3, #2
 8000972:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000974:	2300      	movs	r3, #0
 8000976:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000978:	2310      	movs	r3, #16
 800097a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 800097c:	23c8      	movs	r3, #200	@ 0xc8
 800097e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000980:	2302      	movs	r3, #2
 8000982:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000984:	2304      	movs	r3, #4
 8000986:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000988:	f107 0320 	add.w	r3, r7, #32
 800098c:	4618      	mov	r0, r3
 800098e:	f006 ff4f 	bl	8007830 <HAL_RCC_OscConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000998:	f000 f926 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099c:	230f      	movs	r3, #15
 800099e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a0:	2302      	movs	r3, #2
 80009a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80009ae:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	2103      	movs	r1, #3
 80009ba:	4618      	mov	r0, r3
 80009bc:	f007 f9b0 	bl	8007d20 <HAL_RCC_ClockConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009c6:	f000 f90f 	bl	8000be8 <Error_Handler>
  }
}
 80009ca:	bf00      	nop
 80009cc:	3750      	adds	r7, #80	@ 0x50
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40007000 	.word	0x40007000

080009dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e0:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <MX_I2C1_Init+0x50>)
 80009e2:	4a13      	ldr	r2, [pc, #76]	@ (8000a30 <MX_I2C1_Init+0x54>)
 80009e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <MX_I2C1_Init+0x50>)
 80009e8:	4a12      	ldr	r2, [pc, #72]	@ (8000a34 <MX_I2C1_Init+0x58>)
 80009ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <MX_I2C1_Init+0x50>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <MX_I2C1_Init+0x50>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <MX_I2C1_Init+0x50>)
 80009fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	@ (8000a2c <MX_I2C1_Init+0x50>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <MX_I2C1_Init+0x50>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0c:	4b07      	ldr	r3, [pc, #28]	@ (8000a2c <MX_I2C1_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a12:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <MX_I2C1_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a18:	4804      	ldr	r0, [pc, #16]	@ (8000a2c <MX_I2C1_Init+0x50>)
 8000a1a:	f005 ff73 	bl	8006904 <HAL_I2C_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a24:	f000 f8e0 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200004d0 	.word	0x200004d0
 8000a30:	40005400 	.word	0x40005400
 8000a34:	00061a80 	.word	0x00061a80

08000a38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3e:	f107 0308 	add.w	r3, r7, #8
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a54:	4b1d      	ldr	r3, [pc, #116]	@ (8000acc <MX_TIM2_Init+0x94>)
 8000a56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000acc <MX_TIM2_Init+0x94>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a62:	4b1a      	ldr	r3, [pc, #104]	@ (8000acc <MX_TIM2_Init+0x94>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a68:	4b18      	ldr	r3, [pc, #96]	@ (8000acc <MX_TIM2_Init+0x94>)
 8000a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a70:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <MX_TIM2_Init+0x94>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <MX_TIM2_Init+0x94>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a7c:	4813      	ldr	r0, [pc, #76]	@ (8000acc <MX_TIM2_Init+0x94>)
 8000a7e:	f007 fb1b 	bl	80080b8 <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a88:	f000 f8ae 	bl	8000be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	4619      	mov	r1, r3
 8000a98:	480c      	ldr	r0, [pc, #48]	@ (8000acc <MX_TIM2_Init+0x94>)
 8000a9a:	f007 fd04 	bl	80084a6 <HAL_TIM_ConfigClockSource>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000aa4:	f000 f8a0 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	@ (8000acc <MX_TIM2_Init+0x94>)
 8000ab6:	f007 ff29 	bl	800890c <HAL_TIMEx_MasterConfigSynchronization>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ac0:	f000 f892 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000524 	.word	0x20000524

08000ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	@ 0x28
 8000ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b3b      	ldr	r3, [pc, #236]	@ (8000bd8 <MX_GPIO_Init+0x108>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a3a      	ldr	r2, [pc, #232]	@ (8000bd8 <MX_GPIO_Init+0x108>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b38      	ldr	r3, [pc, #224]	@ (8000bd8 <MX_GPIO_Init+0x108>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b34      	ldr	r3, [pc, #208]	@ (8000bd8 <MX_GPIO_Init+0x108>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a33      	ldr	r2, [pc, #204]	@ (8000bd8 <MX_GPIO_Init+0x108>)
 8000b0c:	f043 0310 	orr.w	r3, r3, #16
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b31      	ldr	r3, [pc, #196]	@ (8000bd8 <MX_GPIO_Init+0x108>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0310 	and.w	r3, r3, #16
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd8 <MX_GPIO_Init+0x108>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b26:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd8 <MX_GPIO_Init+0x108>)
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd8 <MX_GPIO_Init+0x108>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b26      	ldr	r3, [pc, #152]	@ (8000bd8 <MX_GPIO_Init+0x108>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	4a25      	ldr	r2, [pc, #148]	@ (8000bd8 <MX_GPIO_Init+0x108>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4a:	4b23      	ldr	r3, [pc, #140]	@ (8000bd8 <MX_GPIO_Init+0x108>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DBG_GPIO_Port, DBG_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2101      	movs	r1, #1
 8000b5a:	4820      	ldr	r0, [pc, #128]	@ (8000bdc <MX_GPIO_Init+0x10c>)
 8000b5c:	f005 fe9e 	bl	800689c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b66:	481e      	ldr	r0, [pc, #120]	@ (8000be0 <MX_GPIO_Init+0x110>)
 8000b68:	f005 fe98 	bl	800689c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b72:	481c      	ldr	r0, [pc, #112]	@ (8000be4 <MX_GPIO_Init+0x114>)
 8000b74:	f005 fe92 	bl	800689c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DBG_Pin */
  GPIO_InitStruct.Pin = DBG_Pin;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DBG_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4813      	ldr	r0, [pc, #76]	@ (8000bdc <MX_GPIO_Init+0x10c>)
 8000b90:	f005 fce8 	bl	8006564 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000b94:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <MX_GPIO_Init+0x110>)
 8000bae:	f005 fcd9 	bl	8006564 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 8000bb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4806      	ldr	r0, [pc, #24]	@ (8000be4 <MX_GPIO_Init+0x114>)
 8000bcc:	f005 fcca 	bl	8006564 <HAL_GPIO_Init>

}
 8000bd0:	bf00      	nop
 8000bd2:	3728      	adds	r7, #40	@ 0x28
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40020c00 	.word	0x40020c00

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <Error_Handler+0x8>

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b10      	ldr	r3, [pc, #64]	@ (8000c40 <HAL_MspInit+0x4c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c02:	4a0f      	ldr	r2, [pc, #60]	@ (8000c40 <HAL_MspInit+0x4c>)
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c40 <HAL_MspInit+0x4c>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <HAL_MspInit+0x4c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	4a08      	ldr	r2, [pc, #32]	@ (8000c40 <HAL_MspInit+0x4c>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c26:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <HAL_MspInit+0x4c>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800

08000c44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	@ 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a19      	ldr	r2, [pc, #100]	@ (8000cc8 <HAL_I2C_MspInit+0x84>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d12c      	bne.n	8000cc0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <HAL_I2C_MspInit+0x88>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a17      	ldr	r2, [pc, #92]	@ (8000ccc <HAL_I2C_MspInit+0x88>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <HAL_I2C_MspInit+0x88>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c88:	2312      	movs	r3, #18
 8000c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c94:	2304      	movs	r3, #4
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480c      	ldr	r0, [pc, #48]	@ (8000cd0 <HAL_I2C_MspInit+0x8c>)
 8000ca0:	f005 fc60 	bl	8006564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <HAL_I2C_MspInit+0x88>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cac:	4a07      	ldr	r2, [pc, #28]	@ (8000ccc <HAL_I2C_MspInit+0x88>)
 8000cae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ccc <HAL_I2C_MspInit+0x88>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	3728      	adds	r7, #40	@ 0x28
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40005400 	.word	0x40005400
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020400 	.word	0x40020400

08000cd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ce4:	d115      	bne.n	8000d12 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <HAL_TIM_Base_MspInit+0x48>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	4a0b      	ldr	r2, [pc, #44]	@ (8000d1c <HAL_TIM_Base_MspInit+0x48>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <HAL_TIM_Base_MspInit+0x48>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	201c      	movs	r0, #28
 8000d08:	f005 fbf5 	bl	80064f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d0c:	201c      	movs	r0, #28
 8000d0e:	f005 fc0e 	bl	800652e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <NMI_Handler+0x4>

08000d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <MemManage_Handler+0x4>

08000d38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	extern volatile uint32_t g_tick_count;
	g_tick_count++;
 8000d78:	4b04      	ldr	r3, [pc, #16]	@ (8000d8c <SysTick_Handler+0x18>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	4a03      	ldr	r2, [pc, #12]	@ (8000d8c <SysTick_Handler+0x18>)
 8000d80:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d82:	f005 fabd 	bl	8006300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200021b4 	.word	0x200021b4

08000d90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	static volatile uint32_t tim2_flag;
	tim2_flag++;
 8000d94:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc4 <TIM2_IRQHandler+0x34>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc4 <TIM2_IRQHandler+0x34>)
 8000d9c:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d9e:	480a      	ldr	r0, [pc, #40]	@ (8000dc8 <TIM2_IRQHandler+0x38>)
 8000da0:	f007 fa79 	bl	8008296 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if (tim2_flag == 2) {
 8000da4:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <TIM2_IRQHandler+0x34>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d108      	bne.n	8000dbe <TIM2_IRQHandler+0x2e>
	  tim2_flag = 0;
 8000dac:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <TIM2_IRQHandler+0x34>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(DBG_GPIO_Port, DBG_Pin);
 8000db2:	2101      	movs	r1, #1
 8000db4:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <TIM2_IRQHandler+0x3c>)
 8000db6:	f005 fd8a 	bl	80068ce <HAL_GPIO_TogglePin>
	  pal_os_event_trigger_registered_callback();
 8000dba:	f005 f8bf 	bl	8005f3c <pal_os_event_trigger_registered_callback>
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20001ac0 	.word	0x20001ac0
 8000dc8:	20000524 	.word	0x20000524
 8000dcc:	40020000 	.word	0x40020000

08000dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd8:	4a14      	ldr	r2, [pc, #80]	@ (8000e2c <_sbrk+0x5c>)
 8000dda:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <_sbrk+0x60>)
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de4:	4b13      	ldr	r3, [pc, #76]	@ (8000e34 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dec:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <_sbrk+0x64>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	@ (8000e38 <_sbrk+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df2:	4b10      	ldr	r3, [pc, #64]	@ (8000e34 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d207      	bcs.n	8000e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e00:	f007 feea 	bl	8008bd8 <__errno>
 8000e04:	4603      	mov	r3, r0
 8000e06:	220c      	movs	r2, #12
 8000e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	e009      	b.n	8000e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e10:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e16:	4b07      	ldr	r3, [pc, #28]	@ (8000e34 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a05      	ldr	r2, [pc, #20]	@ (8000e34 <_sbrk+0x64>)
 8000e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20020000 	.word	0x20020000
 8000e30:	00000400 	.word	0x00000400
 8000e34:	20001ac4 	.word	0x20001ac4
 8000e38:	20002308 	.word	0x20002308

08000e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <SystemInit+0x20>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e46:	4a05      	ldr	r2, [pc, #20]	@ (8000e5c <SystemInit+0x20>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e64:	480d      	ldr	r0, [pc, #52]	@ (8000e9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e66:	490e      	ldr	r1, [pc, #56]	@ (8000ea0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e68:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e7c:	4c0b      	ldr	r4, [pc, #44]	@ (8000eac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e8a:	f7ff ffd7 	bl	8000e3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f007 fea9 	bl	8008be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e92:	f7ff fb35 	bl	8000500 <main>
  bx  lr    
 8000e96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	200004b4 	.word	0x200004b4
  ldr r2, =_sidata
 8000ea4:	08008d48 	.word	0x08008d48
  ldr r2, =_sbss
 8000ea8:	200004b4 	.word	0x200004b4
  ldr r4, =_ebss
 8000eac:	20002308 	.word	0x20002308

08000eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC_IRQHandler>

08000eb2 <optiga_cmd_prepare_apdu_header>:

//
_STATIC_H void optiga_cmd_prepare_apdu_header(uint8_t cmd, uint8_t param,
                                              uint16_t in_data_length,
                                              uint8_t * p_apdu_buffer)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	71bb      	strb	r3, [r7, #6]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	80bb      	strh	r3, [r7, #4]
    p_apdu_buffer [0] = cmd;
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	79fa      	ldrb	r2, [r7, #7]
 8000eca:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [1] = param;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	79ba      	ldrb	r2, [r7, #6]
 8000ed2:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [2] = (uint8_t)((in_data_length & 0xFF00) >> 8);
 8000ed4:	88bb      	ldrh	r3, [r7, #4]
 8000ed6:	0a1b      	lsrs	r3, r3, #8
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	3302      	adds	r3, #2
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	701a      	strb	r2, [r3, #0]
    p_apdu_buffer [3] = (uint8_t)(in_data_length & 0x00FF);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	3303      	adds	r3, #3
 8000ee6:	88ba      	ldrh	r2, [r7, #4]
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	701a      	strb	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <optiga_cmd_prepare_tag_header>:

_STATIC_H void optiga_cmd_prepare_tag_header(uint8_t tag,
                                             uint16_t tag_length,
                                             uint8_t * buffer,
                                             uint16_t * position)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60ba      	str	r2, [r7, #8]
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	4603      	mov	r3, r0
 8000f04:	73fb      	strb	r3, [r7, #15]
 8000f06:	460b      	mov	r3, r1
 8000f08:	81bb      	strh	r3, [r7, #12]
    uint16_t start_position = *position;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	82fb      	strh	r3, [r7, #22]

    buffer[start_position++] = tag;
 8000f10:	8afb      	ldrh	r3, [r7, #22]
 8000f12:	1c5a      	adds	r2, r3, #1
 8000f14:	82fa      	strh	r2, [r7, #22]
 8000f16:	461a      	mov	r2, r3
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	7bfa      	ldrb	r2, [r7, #15]
 8000f1e:	701a      	strb	r2, [r3, #0]
    buffer[start_position++] = (uint8_t )(tag_length >> 8);
 8000f20:	89bb      	ldrh	r3, [r7, #12]
 8000f22:	0a1b      	lsrs	r3, r3, #8
 8000f24:	b29a      	uxth	r2, r3
 8000f26:	8afb      	ldrh	r3, [r7, #22]
 8000f28:	1c59      	adds	r1, r3, #1
 8000f2a:	82f9      	strh	r1, [r7, #22]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	440b      	add	r3, r1
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	701a      	strb	r2, [r3, #0]
    buffer[start_position++] = (uint8_t )(tag_length);
 8000f36:	8afb      	ldrh	r3, [r7, #22]
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	82fa      	strh	r2, [r7, #22]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	4413      	add	r3, r2
 8000f42:	89ba      	ldrh	r2, [r7, #12]
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	701a      	strb	r2, [r3, #0]

    *position = start_position;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	8afa      	ldrh	r2, [r7, #22]
 8000f4c:	801a      	strh	r2, [r3, #0]
}
 8000f4e:	bf00      	nop
 8000f50:	371c      	adds	r7, #28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <optiga_cmd_event_trigger_execute>:


_STATIC_H void optiga_cmd_event_trigger_execute(void * p_ctx)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
    optiga_cmd_execute_handler(p_ctx, OPTIGA_LIB_SUCCESS);
 8000f62:	2100      	movs	r1, #0
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 fe95 	bl	8001c94 <optiga_cmd_execute_handler>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <optiga_cmd_execute>:
                                  optiga_cmd_handler_t cmd_hdlrs,
                                  optiga_cmd_state_t start_state,
                                  optiga_cmd_sub_state_t sub_state,
                                  void * input,
                                  uint16_t apdu_data)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b084      	sub	sp, #16
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	460b      	mov	r3, r1
 8000f80:	72fb      	strb	r3, [r7, #11]
 8000f82:	4613      	mov	r3, r2
 8000f84:	72bb      	strb	r3, [r7, #10]
    me->p_input = input;
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	69fa      	ldr	r2, [r7, #28]
 8000f8a:	609a      	str	r2, [r3, #8]
    me->cmd_next_execution_state = start_state;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	7aba      	ldrb	r2, [r7, #10]
 8000f90:	759a      	strb	r2, [r3, #22]
    me->cmd_sub_execution_state = sub_state;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	7e3a      	ldrb	r2, [r7, #24]
 8000f96:	75da      	strb	r2, [r3, #23]
    me->cmd_hdlrs = cmd_hdlrs;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	605a      	str	r2, [r3, #4]
    me->chaining_ongoing = FALSE;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	761a      	strb	r2, [r3, #24]
    me->cmd_param = cmd_param;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	7afa      	ldrb	r2, [r7, #11]
 8000fa8:	765a      	strb	r2, [r3, #25]
    me->apdu_data = apdu_data;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	8c3a      	ldrh	r2, [r7, #32]
 8000fae:	841a      	strh	r2, [r3, #32]
    optiga_cmd_execute_handler(me, OPTIGA_LIB_SUCCESS);
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f000 fe6e 	bl	8001c94 <optiga_cmd_execute_handler>
}
 8000fb8:	bf00      	nop
 8000fba:	3710      	adds	r7, #16
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <optiga_cmd_session_available>:
* Checks if optiga session is available or not
* Returns TRUE, if slot is available
* Returns FALSE, if slot is not available
*/
_STATIC_H bool_t optiga_cmd_session_available(const optiga_context_t * p_optiga)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
    uint32_t status_check;
    // Consider the array as uin32_t value and check against 0x10101010
    // where 0x10 is value of OPTIGA_CMD_SESSION_ASSIGNED
    status_check = optiga_common_get_uint32(p_optiga->sessions);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3308      	adds	r3, #8
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f002 fa52 	bl	8003476 <optiga_common_get_uint32>
 8000fd2:	60f8      	str	r0, [r7, #12]
    return ((status_check < OPTIGA_CMD_ALL_SESSION_ASSIGNED)? (TRUE):(FALSE));
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f1b3 3f10 	cmp.w	r3, #269488144	@ 0x10101010
 8000fda:	d201      	bcs.n	8000fe0 <optiga_cmd_session_available+0x20>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <optiga_cmd_session_available+0x22>
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <optiga_cmd_session_assign>:

/*
* 1. If a optiga cmd instance does not have session, assigns an available session
*/
_STATIC_H void optiga_cmd_session_assign(optiga_cmd_t * me)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	3308      	adds	r3, #8
 8000ffa:	60bb      	str	r3, [r7, #8]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID == me->session_oid)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	8a9b      	ldrh	r3, [r3, #20]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d11d      	bne.n	8001040 <optiga_cmd_session_assign+0x54>
    {
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	e017      	b.n	800103a <optiga_cmd_session_assign+0x4e>
        {
            if (OPTIGA_CMD_SESSION_ASSIGNED != p_optiga_sessions[count])
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	4413      	add	r3, r2
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b10      	cmp	r3, #16
 8001014:	d00e      	beq.n	8001034 <optiga_cmd_session_assign+0x48>
            {
                me->session_oid = (OPTIGA_CMD_START_SESSION_OID | count);
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	b21a      	sxth	r2, r3
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <optiga_cmd_session_assign+0x60>)
 800101c:	4313      	orrs	r3, r2
 800101e:	b21b      	sxth	r3, r3
 8001020:	b29a      	uxth	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	829a      	strh	r2, [r3, #20]
                p_optiga_sessions[count] = OPTIGA_CMD_SESSION_ASSIGNED;
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	4413      	add	r3, r2
 800102c:	2210      	movs	r2, #16
 800102e:	701a      	strb	r2, [r3, #0]
                break;
 8001030:	bf00      	nop
            }
        }
    }
}
 8001032:	e005      	b.n	8001040 <optiga_cmd_session_assign+0x54>
        for (count = 0; count < OPTIGA_CMD_MAX_NUMBER_OF_SESSIONS; count++)
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	3301      	adds	r3, #1
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	2b03      	cmp	r3, #3
 800103e:	d9e4      	bls.n	800100a <optiga_cmd_session_assign+0x1e>
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	ffffe100 	.word	0xffffe100

08001050 <optiga_cmd_session_free>:

/*
* Frees a session
*/
_STATIC_H void optiga_cmd_session_free(optiga_cmd_t * me)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    uint8_t * p_optiga_sessions = me->p_optiga->sessions;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	3308      	adds	r3, #8
 800105e:	60fb      	str	r3, [r7, #12]
    uint8_t count;
    if (OPTIGA_CMD_NO_SESSION_OID != me->session_oid)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	8a9b      	ldrh	r3, [r3, #20]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00d      	beq.n	8001084 <optiga_cmd_session_free+0x34>
    {
        count = me->session_oid & 0x0F;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	8a9b      	ldrh	r3, [r3, #20]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	72fb      	strb	r3, [r7, #11]
        me->session_oid = OPTIGA_CMD_NO_SESSION_OID;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	829a      	strh	r2, [r3, #20]
        p_optiga_sessions[count] = OPTIGA_CMD_SESSION_NOT_ASSIGNED;
 800107a:	7afb      	ldrb	r3, [r7, #11]
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	4413      	add	r3, r2
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
    }
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <optiga_cmd_queue_get_count_of>:
* Returns the count of number of slots with requested state
*/
_STATIC_H  uint8_t optiga_cmd_queue_get_count_of(const optiga_context_t * p_optiga,
                                                 uint8_t slot_member,
                                                 uint8_t state_to_check)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
 800109c:	4613      	mov	r3, r2
 800109e:	70bb      	strb	r3, [r7, #2]
    uint8_t index;
    uint8_t count = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	73bb      	strb	r3, [r7, #14]
    uint8_t slot_value = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	737b      	strb	r3, [r7, #13]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e027      	b.n	80010fe <optiga_cmd_queue_get_count_of+0x6e>
    {
        switch (slot_member)
 80010ae:	78fb      	ldrb	r3, [r7, #3]
 80010b0:	2b08      	cmp	r3, #8
 80010b2:	d002      	beq.n	80010ba <optiga_cmd_queue_get_count_of+0x2a>
 80010b4:	2b09      	cmp	r3, #9
 80010b6:	d00c      	beq.n	80010d2 <optiga_cmd_queue_get_count_of+0x42>
            {
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
            }
            break;
            default:
                break;
 80010b8:	e017      	b.n	80010ea <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].request_type;
 80010ba:	7bfa      	ldrb	r2, [r7, #15]
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	f203 632c 	addw	r3, r3, #1580	@ 0x62c
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	737b      	strb	r3, [r7, #13]
            break;
 80010d0:	e00b      	b.n	80010ea <optiga_cmd_queue_get_count_of+0x5a>
                slot_value = p_optiga->optiga_cmd_execution_queue[index].state_of_entry;
 80010d2:	7bfa      	ldrb	r2, [r7, #15]
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	440b      	add	r3, r1
 80010e0:	f203 632d 	addw	r3, r3, #1581	@ 0x62d
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	737b      	strb	r3, [r7, #13]
            break;
 80010e8:	bf00      	nop
        }
        if (state_to_check == slot_value)
 80010ea:	78ba      	ldrb	r2, [r7, #2]
 80010ec:	7b7b      	ldrb	r3, [r7, #13]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d102      	bne.n	80010f8 <optiga_cmd_queue_get_count_of+0x68>
        {
            count++;
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	3301      	adds	r3, #1
 80010f6:	73bb      	strb	r3, [r7, #14]
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	3301      	adds	r3, #1
 80010fc:	73fb      	strb	r3, [r7, #15]
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	2b05      	cmp	r3, #5
 8001102:	d9d4      	bls.n	80010ae <optiga_cmd_queue_get_count_of+0x1e>
        }
    }
    return (count);
 8001104:	7bbb      	ldrb	r3, [r7, #14]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <optiga_cmd_queue_assign_slot>:

/*
* Assigns an available slot to a optiga cmd instance and marks the slot as not available for another optiga cmd instance
*/
_STATIC_H void optiga_cmd_queue_assign_slot(const optiga_cmd_t * me, uint8_t * queue_index_store)
{
 8001112:	b480      	push	{r7}
 8001114:	b085      	sub	sp, #20
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	6039      	str	r1, [r7, #0]
    uint8_t index;
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e01f      	b.n	8001162 <optiga_cmd_queue_assign_slot+0x50>
    {
        if (OPTIGA_CMD_QUEUE_NOT_ASSIGNED == me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6819      	ldr	r1, [r3, #0]
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	440b      	add	r3, r1
 8001132:	f203 632d 	addw	r3, r3, #1581	@ 0x62d
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10f      	bne.n	800115c <optiga_cmd_queue_assign_slot+0x4a>
        {
            * queue_index_store =  index;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	701a      	strb	r2, [r3, #0]
            me->p_optiga->optiga_cmd_execution_queue[index].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6819      	ldr	r1, [r3, #0]
 8001146:	7bfa      	ldrb	r2, [r7, #15]
 8001148:	4613      	mov	r3, r2
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4413      	add	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	f203 632d 	addw	r3, r3, #1581	@ 0x62d
 8001156:	2201      	movs	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
           break;
 800115a:	e006      	b.n	800116a <optiga_cmd_queue_assign_slot+0x58>
    for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS ; index++)
 800115c:	7bfb      	ldrb	r3, [r7, #15]
 800115e:	3301      	adds	r3, #1
 8001160:	73fb      	strb	r3, [r7, #15]
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	2b05      	cmp	r3, #5
 8001166:	d9dc      	bls.n	8001122 <optiga_cmd_queue_assign_slot+0x10>
        }
    }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <optiga_cmd_queue_scheduler>:
* 4. The arrival time must be the earliest provided
*     a. The request type is lock
*     b. If request type is session, either session is already assigned or atleast session is available for assignment
*/
_STATIC_H void optiga_cmd_queue_scheduler(void * p_optiga)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
    uint32_t reference_time_stamp = 0xFFFFFFFF;
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
 8001184:	61fb      	str	r3, [r7, #28]
    optiga_cmd_queue_slot_t * p_queue_entry;
    uint8_t index;
    uint8_t prefered_index = 0xFF;
 8001186:	23ff      	movs	r3, #255	@ 0xff
 8001188:	76bb      	strb	r3, [r7, #26]
    uint8_t overflow_detected = FALSE;
 800118a:	2300      	movs	r3, #0
 800118c:	767b      	strb	r3, [r7, #25]

    optiga_context_t * p_optiga_ctx = (optiga_context_t * )p_optiga;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	617b      	str	r3, [r7, #20]

    pal_os_event_t * my_os_event = p_optiga_ctx->p_pal_os_event_ctx;
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f8d3 366c 	ldr.w	r3, [r3, #1644]	@ 0x66c
 8001198:	613b      	str	r3, [r7, #16]


    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 800119a:	2202      	movs	r2, #2
 800119c:	2109      	movs	r1, #9
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff76 	bl	8001090 <optiga_cmd_queue_get_count_of>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d107      	bne.n	80011ba <optiga_cmd_queue_scheduler+0x42>
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 80011aa:	2208      	movs	r2, #8
 80011ac:	2109      	movs	r1, #9
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ff6e 	bl	8001090 <optiga_cmd_queue_get_count_of>
 80011b4:	4603      	mov	r3, r0
    if (((0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_REQUEST)) &&
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00f      	beq.n	80011da <optiga_cmd_queue_scheduler+0x62>
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 80011ba:	2204      	movs	r2, #4
 80011bc:	2109      	movs	r1, #9
 80011be:	6978      	ldr	r0, [r7, #20]
 80011c0:	f7ff ff66 	bl	8001090 <optiga_cmd_queue_get_count_of>
 80011c4:	4603      	mov	r3, r0
         (0 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE, OPTIGA_CMD_QUEUE_RESUME))) ||
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d10f      	bne.n	80011ea <optiga_cmd_queue_scheduler+0x72>
         (0 < optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_LOCK_TYPE, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK))))
 80011ca:	2223      	movs	r2, #35	@ 0x23
 80011cc:	2108      	movs	r1, #8
 80011ce:	6978      	ldr	r0, [r7, #20]
 80011d0:	f7ff ff5e 	bl	8001090 <optiga_cmd_queue_get_count_of>
 80011d4:	4603      	mov	r3, r0
         ((1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_PROCESSING)) &&
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d007      	beq.n	80011ea <optiga_cmd_queue_scheduler+0x72>
    {
        // call self
        pal_os_event_register_callback_oneshot(my_os_event, optiga_cmd_queue_scheduler,
 80011da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011de:	697a      	ldr	r2, [r7, #20]
 80011e0:	496e      	ldr	r1, [pc, #440]	@ (800139c <optiga_cmd_queue_scheduler+0x224>)
 80011e2:	6938      	ldr	r0, [r7, #16]
 80011e4:	f004 fec4 	bl	8005f70 <pal_os_event_register_callback_oneshot>
        {
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
                                                    p_optiga_ctx,OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
    }
}
 80011e8:	e0d4      	b.n	8001394 <optiga_cmd_queue_scheduler+0x21c>
        pal_os_event_stop(my_os_event);
 80011ea:	6938      	ldr	r0, [r7, #16]
 80011ec:	f004 fe80 	bl	8005ef0 <pal_os_event_stop>
            if(overflow_detected == TRUE)
 80011f0:	7e7b      	ldrb	r3, [r7, #25]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d105      	bne.n	8001202 <optiga_cmd_queue_scheduler+0x8a>
                p_optiga_ctx->last_time_stamp = 0;
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f8c3 2670 	str.w	r2, [r3, #1648]	@ 0x670
                overflow_detected = FALSE;
 80011fe:	2300      	movs	r3, #0
 8001200:	767b      	strb	r3, [r7, #25]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 8001202:	2300      	movs	r3, #0
 8001204:	76fb      	strb	r3, [r7, #27]
 8001206:	e05c      	b.n	80012c2 <optiga_cmd_queue_scheduler+0x14a>
                p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[index]);
 8001208:	7efa      	ldrb	r2, [r7, #27]
 800120a:	4613      	mov	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4413      	add	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	4413      	add	r3, r2
 800121a:	3304      	adds	r3, #4
 800121c:	60fb      	str	r3, [r7, #12]
                if (1 == optiga_cmd_queue_get_count_of(p_optiga_ctx, OPTIGA_CMD_QUEUE_SLOT_STATE , OPTIGA_CMD_QUEUE_RESUME))
 800121e:	2208      	movs	r2, #8
 8001220:	2109      	movs	r1, #9
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff ff34 	bl	8001090 <optiga_cmd_queue_get_count_of>
 8001228:	4603      	mov	r3, r0
 800122a:	2b01      	cmp	r3, #1
 800122c:	d10d      	bne.n	800124a <optiga_cmd_queue_scheduler+0xd2>
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	7a5b      	ldrb	r3, [r3, #9]
 8001232:	2b08      	cmp	r3, #8
 8001234:	d142      	bne.n	80012bc <optiga_cmd_queue_scheduler+0x144>
                        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type))
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	7a1b      	ldrb	r3, [r3, #8]
                    if ((OPTIGA_CMD_QUEUE_RESUME == p_queue_entry->state_of_entry) &&
 800123a:	2b23      	cmp	r3, #35	@ 0x23
 800123c:	d13e      	bne.n	80012bc <optiga_cmd_queue_scheduler+0x144>
                        reference_time_stamp = p_queue_entry->arrival_time;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	61fb      	str	r3, [r7, #28]
                        prefered_index = index;
 8001244:	7efb      	ldrb	r3, [r7, #27]
 8001246:	76bb      	strb	r3, [r7, #26]
 8001248:	e038      	b.n	80012bc <optiga_cmd_queue_scheduler+0x144>
                    if (p_queue_entry->state_of_entry == OPTIGA_CMD_QUEUE_REQUEST)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	7a5b      	ldrb	r3, [r3, #9]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d134      	bne.n	80012bc <optiga_cmd_queue_scheduler+0x144>
                        if (p_queue_entry->arrival_time < p_optiga_ctx->last_time_stamp)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	f8d3 3670 	ldr.w	r3, [r3, #1648]	@ 0x670
 800125c:	429a      	cmp	r2, r3
 800125e:	d201      	bcs.n	8001264 <optiga_cmd_queue_scheduler+0xec>
                            overflow_detected = TRUE;
 8001260:	2301      	movs	r3, #1
 8001262:	767b      	strb	r3, [r7, #25]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	69fa      	ldr	r2, [r7, #28]
 800126a:	429a      	cmp	r2, r3
 800126c:	d326      	bcc.n	80012bc <optiga_cmd_queue_scheduler+0x144>
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f8d3 3670 	ldr.w	r3, [r3, #1648]	@ 0x670
 8001278:	429a      	cmp	r2, r3
 800127a:	d31f      	bcc.n	80012bc <optiga_cmd_queue_scheduler+0x144>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	7a1b      	ldrb	r3, [r3, #8]
                        if (((p_queue_entry->arrival_time <= reference_time_stamp) && (p_queue_entry->arrival_time >= p_optiga_ctx->last_time_stamp)) &&
 8001280:	2b22      	cmp	r3, #34	@ 0x22
 8001282:	d105      	bne.n	8001290 <optiga_cmd_queue_scheduler+0x118>
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8001284:	6978      	ldr	r0, [r7, #20]
 8001286:	f7ff fe9b 	bl	8000fc0 <optiga_cmd_session_available>
 800128a:	4603      	mov	r3, r0
 800128c:	2b01      	cmp	r3, #1
 800128e:	d010      	beq.n	80012b2 <optiga_cmd_queue_scheduler+0x13a>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	7a1b      	ldrb	r3, [r3, #8]
                            (((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (TRUE == optiga_cmd_session_available(p_optiga_ctx))) ||
 8001294:	2b22      	cmp	r3, #34	@ 0x22
 8001296:	d104      	bne.n	80012a2 <optiga_cmd_queue_scheduler+0x12a>
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	8a9b      	ldrh	r3, [r3, #20]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d107      	bne.n	80012b2 <optiga_cmd_queue_scheduler+0x13a>
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	7a1b      	ldrb	r3, [r3, #8]
                            ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_queue_entry->request_type) && (OPTIGA_CMD_NO_SESSION_OID != ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid)) ||
 80012a6:	2b21      	cmp	r3, #33	@ 0x21
 80012a8:	d003      	beq.n	80012b2 <optiga_cmd_queue_scheduler+0x13a>
                            (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == p_queue_entry->request_type)))
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	7a1b      	ldrb	r3, [r3, #8]
                            (OPTIGA_CMD_QUEUE_REQUEST_LOCK == p_queue_entry->request_type) ||
 80012ae:	2b23      	cmp	r3, #35	@ 0x23
 80012b0:	d104      	bne.n	80012bc <optiga_cmd_queue_scheduler+0x144>
                            reference_time_stamp = p_queue_entry->arrival_time;
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	61fb      	str	r3, [r7, #28]
                            prefered_index = index;
 80012b8:	7efb      	ldrb	r3, [r7, #27]
 80012ba:	76bb      	strb	r3, [r7, #26]
            for (index = 0; index < OPTIGA_CMD_MAX_REGISTRATIONS; index++)
 80012bc:	7efb      	ldrb	r3, [r7, #27]
 80012be:	3301      	adds	r3, #1
 80012c0:	76fb      	strb	r3, [r7, #27]
 80012c2:	7efb      	ldrb	r3, [r7, #27]
 80012c4:	2b05      	cmp	r3, #5
 80012c6:	d99f      	bls.n	8001208 <optiga_cmd_queue_scheduler+0x90>
        } while((0xFF == prefered_index) && (TRUE == overflow_detected));
 80012c8:	7ebb      	ldrb	r3, [r7, #26]
 80012ca:	2bff      	cmp	r3, #255	@ 0xff
 80012cc:	d102      	bne.n	80012d4 <optiga_cmd_queue_scheduler+0x15c>
 80012ce:	7e7b      	ldrb	r3, [r7, #25]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d08d      	beq.n	80011f0 <optiga_cmd_queue_scheduler+0x78>
        if (0xFF != prefered_index)
 80012d4:	7ebb      	ldrb	r3, [r7, #26]
 80012d6:	2bff      	cmp	r3, #255	@ 0xff
 80012d8:	d055      	beq.n	8001386 <optiga_cmd_queue_scheduler+0x20e>
            p_queue_entry = &(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index]);
 80012da:	7eba      	ldrb	r2, [r7, #26]
 80012dc:	4613      	mov	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	4413      	add	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	f503 63c4 	add.w	r3, r3, #1568	@ 0x620
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	4413      	add	r3, r2
 80012ec:	3304      	adds	r3, #4
 80012ee:	60fb      	str	r3, [r7, #12]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 80012f0:	7eba      	ldrb	r2, [r7, #26]
 80012f2:	6979      	ldr	r1, [r7, #20]
 80012f4:	4613      	mov	r3, r2
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	4413      	add	r3, r2
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	440b      	add	r3, r1
 80012fe:	f203 632c 	addw	r3, r3, #1580	@ 0x62c
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b22      	cmp	r3, #34	@ 0x22
 8001306:	d111      	bne.n	800132c <optiga_cmd_queue_scheduler+0x1b4>
                (OPTIGA_CMD_NO_SESSION_OID == ((optiga_cmd_t *)p_queue_entry->registered_ctx)->session_oid))
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	8a9b      	ldrh	r3, [r3, #20]
            if ((OPTIGA_CMD_QUEUE_REQUEST_SESSION == p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].request_type) &&
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10c      	bne.n	800132c <optiga_cmd_queue_scheduler+0x1b4>
                optiga_cmd_session_assign((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx));
 8001312:	7eba      	ldrb	r2, [r7, #26]
 8001314:	6979      	ldr	r1, [r7, #20]
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	440b      	add	r3, r1
 8001320:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fe60 	bl	8000fec <optiga_cmd_session_assign>
            my_os_event = ((optiga_cmd_t *)(p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].registered_ctx))->p_optiga->p_pal_os_event_ctx;
 800132c:	7eba      	ldrb	r2, [r7, #26]
 800132e:	6979      	ldr	r1, [r7, #20]
 8001330:	4613      	mov	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4413      	add	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f8d3 366c 	ldr.w	r3, [r3, #1644]	@ 0x66c
 8001346:	613b      	str	r3, [r7, #16]
            pal_os_event_register_callback_oneshot(my_os_event,
 8001348:	7eba      	ldrb	r2, [r7, #26]
 800134a:	6979      	ldr	r1, [r7, #20]
 800134c:	4613      	mov	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4413      	add	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	440b      	add	r3, r1
 8001356:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	2332      	movs	r3, #50	@ 0x32
 800135e:	4910      	ldr	r1, [pc, #64]	@ (80013a0 <optiga_cmd_queue_scheduler+0x228>)
 8001360:	6938      	ldr	r0, [r7, #16]
 8001362:	f004 fe05 	bl	8005f70 <pal_os_event_register_callback_oneshot>
            p_optiga_ctx->optiga_cmd_execution_queue[prefered_index].state_of_entry = OPTIGA_CMD_QUEUE_PROCESSING;
 8001366:	7eba      	ldrb	r2, [r7, #26]
 8001368:	6979      	ldr	r1, [r7, #20]
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	440b      	add	r3, r1
 8001374:	f203 632d 	addw	r3, r3, #1581	@ 0x62d
 8001378:	2204      	movs	r2, #4
 800137a:	701a      	strb	r2, [r3, #0]
            p_optiga_ctx->last_time_stamp = reference_time_stamp;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	f8c3 2670 	str.w	r2, [r3, #1648]	@ 0x670
}
 8001384:	e006      	b.n	8001394 <optiga_cmd_queue_scheduler+0x21c>
            pal_os_event_register_callback_oneshot( my_os_event, optiga_cmd_queue_scheduler,
 8001386:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	4903      	ldr	r1, [pc, #12]	@ (800139c <optiga_cmd_queue_scheduler+0x224>)
 800138e:	6938      	ldr	r0, [r7, #16]
 8001390:	f004 fdee 	bl	8005f70 <pal_os_event_register_callback_oneshot>
}
 8001394:	bf00      	nop
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	08001179 	.word	0x08001179
 80013a0:	08000f5b 	.word	0x08000f5b

080013a4 <optiga_cmd_queue_update_slot>:

/*
* Updates a execution queue slot
*/
_STATIC_H void optiga_cmd_queue_update_slot(optiga_cmd_t * me, uint8_t request_type)
{
 80013a4:	b5b0      	push	{r4, r5, r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	70fb      	strb	r3, [r7, #3]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7edb      	ldrb	r3, [r3, #27]
 80013b8:	4619      	mov	r1, r3
 80013ba:	460b      	mov	r3, r1
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	440b      	add	r3, r1
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	f203 632c 	addw	r3, r3, #1580	@ 0x62c
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b23      	cmp	r3, #35	@ 0x23
 80013cc:	d111      	bne.n	80013f2 <optiga_cmd_queue_update_slot+0x4e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7edb      	ldrb	r3, [r3, #27]
 80013d6:	4619      	mov	r1, r3
 80013d8:	460b      	mov	r3, r1
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	440b      	add	r3, r1
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	f203 632c 	addw	r3, r3, #1580	@ 0x62c
 80013e6:	781b      	ldrb	r3, [r3, #0]
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) ||
 80013e8:	2b23      	cmp	r3, #35	@ 0x23
 80013ea:	d112      	bne.n	8001412 <optiga_cmd_queue_update_slot+0x6e>
       ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	2b23      	cmp	r3, #35	@ 0x23
 80013f0:	d00f      	beq.n	8001412 <optiga_cmd_queue_update_slot+0x6e>
       (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK != request_type)))
    {
        //add time stamp
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = pal_os_timer_get_time_in_microseconds();
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681c      	ldr	r4, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	7edb      	ldrb	r3, [r3, #27]
 80013fa:	461d      	mov	r5, r3
 80013fc:	f004 fe28 	bl	8006050 <pal_os_timer_get_time_in_microseconds>
 8001400:	4602      	mov	r2, r0
 8001402:	462b      	mov	r3, r5
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	442b      	add	r3, r5
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4423      	add	r3, r4
 800140c:	f503 63c5 	add.w	r3, r3, #1576	@ 0x628
 8001410:	601a      	str	r2, [r3, #0]
    }

    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = (void * )me;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7edb      	ldrb	r3, [r3, #27]
 800141a:	4619      	mov	r1, r3
 800141c:	460b      	mov	r3, r1
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	440b      	add	r3, r1
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	601a      	str	r2, [r3, #0]
    // set the state of slot to Requested state
    if ((OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type) &&
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7edb      	ldrb	r3, [r3, #27]
 8001436:	4619      	mov	r1, r3
 8001438:	460b      	mov	r3, r1
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	440b      	add	r3, r1
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	f203 632c 	addw	r3, r3, #1580	@ 0x62c
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b23      	cmp	r3, #35	@ 0x23
 800144a:	d111      	bne.n	8001470 <optiga_cmd_queue_update_slot+0xcc>
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	2b23      	cmp	r3, #35	@ 0x23
 8001450:	d10e      	bne.n	8001470 <optiga_cmd_queue_update_slot+0xcc>
        (OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK == request_type))
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_RESUME;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7edb      	ldrb	r3, [r3, #27]
 800145a:	4619      	mov	r1, r3
 800145c:	460b      	mov	r3, r1
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	440b      	add	r3, r1
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	f203 632d 	addw	r3, r3, #1581	@ 0x62d
 800146a:	2208      	movs	r2, #8
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	e00d      	b.n	800148c <optiga_cmd_queue_update_slot+0xe8>
    }
    else
    {
        me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_REQUEST;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	7edb      	ldrb	r3, [r3, #27]
 8001478:	4619      	mov	r1, r3
 800147a:	460b      	mov	r3, r1
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	440b      	add	r3, r1
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	f203 632d 	addw	r3, r3, #1581	@ 0x62d
 8001488:	2202      	movs	r2, #2
 800148a:	701a      	strb	r2, [r3, #0]
    }
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = request_type;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7edb      	ldrb	r3, [r3, #27]
 8001494:	4619      	mov	r1, r3
 8001496:	460b      	mov	r3, r1
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	440b      	add	r3, r1
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	f203 632c 	addw	r3, r3, #1580	@ 0x62c
 80014a4:	78fa      	ldrb	r2, [r7, #3]
 80014a6:	701a      	strb	r2, [r3, #0]
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bdb0      	pop	{r4, r5, r7, pc}

080014b0 <optiga_cmd_queue_reset_slot>:

/*
* Resets a execution slot
*/
_STATIC_H void optiga_cmd_queue_reset_slot(const optiga_cmd_t * me)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
    // Reset the arrival time
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].arrival_time = 0xFFFFFFFF;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7edb      	ldrb	r3, [r3, #27]
 80014c0:	4619      	mov	r1, r3
 80014c2:	460b      	mov	r3, r1
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	440b      	add	r3, r1
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	f503 63c5 	add.w	r3, r3, #1576	@ 0x628
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295
 80014d4:	601a      	str	r2, [r3, #0]
    //add optiga_cmd ctx
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].registered_ctx = NULL;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	7edb      	ldrb	r3, [r3, #27]
 80014de:	4619      	mov	r1, r3
 80014e0:	460b      	mov	r3, r1
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	440b      	add	r3, r1
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
    //add request type
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = 0;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	7edb      	ldrb	r3, [r3, #27]
 80014fa:	4619      	mov	r1, r3
 80014fc:	460b      	mov	r3, r1
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	440b      	add	r3, r1
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4413      	add	r3, r2
 8001506:	f203 632c 	addw	r3, r3, #1580	@ 0x62c
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
    // set the slot state to assigned
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7edb      	ldrb	r3, [r3, #27]
 8001516:	4619      	mov	r1, r3
 8001518:	460b      	mov	r3, r1
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	440b      	add	r3, r1
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	f203 632d 	addw	r3, r3, #1581	@ 0x62d
 8001526:	2201      	movs	r2, #1
 8001528:	701a      	strb	r2, [r3, #0]
    // start the event scheduler
    pal_os_event_start(me->p_optiga->p_pal_os_event_ctx, optiga_cmd_queue_scheduler, me->p_optiga);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f8d3 066c 	ldr.w	r0, [r3, #1644]	@ 0x66c
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	4903      	ldr	r1, [pc, #12]	@ (8001548 <optiga_cmd_queue_reset_slot+0x98>)
 800153a:	f004 fcc1 	bl	8005ec0 <pal_os_event_start>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	08001179 	.word	0x08001179

0800154c <optiga_cmd_release_strict_lock>:

/*
* Release the strict lock associated with instance
*/
_STATIC_H void optiga_cmd_release_strict_lock(const optiga_cmd_t * me)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].state_of_entry = OPTIGA_CMD_QUEUE_ASSIGNED;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7edb      	ldrb	r3, [r3, #27]
 800155c:	4619      	mov	r1, r3
 800155e:	460b      	mov	r3, r1
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	440b      	add	r3, r1
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	4413      	add	r3, r2
 8001568:	f203 632d 	addw	r3, r3, #1581	@ 0x62d
 800156c:	2201      	movs	r2, #1
 800156e:	701a      	strb	r2, [r3, #0]
    me->p_optiga->optiga_cmd_execution_queue[me->queue_id].request_type = OPTIGA_CMD_QUEUE_NO_REQUEST;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	7edb      	ldrb	r3, [r3, #27]
 8001578:	4619      	mov	r1, r3
 800157a:	460b      	mov	r3, r1
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	440b      	add	r3, r1
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	f203 632c 	addw	r3, r3, #1580	@ 0x62c
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <optiga_cmd_request_session>:

optiga_lib_status_t optiga_cmd_request_session(optiga_cmd_t * me)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_update_slot(me , OPTIGA_CMD_QUEUE_REQUEST_SESSION);
 80015a0:	2122      	movs	r1, #34	@ 0x22
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff fefe 	bl	80013a4 <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <optiga_cmd_release_session>:

optiga_lib_status_t optiga_cmd_release_session(optiga_cmd_t * me)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
    optiga_cmd_session_free(me);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fd48 	bl	8001050 <optiga_cmd_session_free>
    return (OPTIGA_CMD_SUCCESS);
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <optiga_cmd_request_lock>:

optiga_lib_status_t optiga_cmd_request_lock(optiga_cmd_t * me, uint8_t lock_type)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	460b      	mov	r3, r1
 80015d4:	70fb      	strb	r3, [r7, #3]
    optiga_cmd_queue_update_slot(me , lock_type);
 80015d6:	78fb      	ldrb	r3, [r7, #3]
 80015d8:	4619      	mov	r1, r3
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fee2 	bl	80013a4 <optiga_cmd_queue_update_slot>
    return (OPTIGA_CMD_SUCCESS);
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <optiga_cmd_release_lock>:

optiga_lib_status_t optiga_cmd_release_lock(const optiga_cmd_t * me)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
    optiga_cmd_queue_reset_slot(me);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ff5c 	bl	80014b0 <optiga_cmd_queue_reset_slot>
    return (OPTIGA_CMD_SUCCESS);
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <optiga_cmd_restore_context>:

_STATIC_H optiga_lib_status_t optiga_cmd_restore_context(const optiga_cmd_t * me)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b084      	sub	sp, #16
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
#define OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE         (0x04)
    uint16_t context_handle_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800160a:	f240 2302 	movw	r3, #514	@ 0x202
 800160e:	81fb      	strh	r3, [r7, #14]
    do
    {
        if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	8bdb      	ldrh	r3, [r3, #30]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d011      	beq.n	800163c <optiga_cmd_restore_context+0x3a>
        {
            context_handle_length = sizeof(me->p_optiga->optiga_context_handle_buffer);
 8001618:	2308      	movs	r3, #8
 800161a:	81bb      	strh	r3, [r7, #12]
            //Reading context handle secret from datastore
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	8bd8      	ldrh	r0, [r3, #30]
                                                  me->p_optiga->optiga_context_handle_buffer,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f203 6374 	addw	r3, r3, #1652	@ 0x674
            return_status = pal_os_datastore_read(me->optiga_context_datastore_id,
 8001628:	f107 020c 	add.w	r2, r7, #12
 800162c:	4619      	mov	r1, r3
 800162e:	f004 fbbf 	bl	8005db0 <pal_os_datastore_read>
 8001632:	4603      	mov	r3, r0
 8001634:	81fb      	strh	r3, [r7, #14]
                                                  &context_handle_length);
            if (PAL_STATUS_SUCCESS != return_status)
 8001636:	89fb      	ldrh	r3, [r7, #14]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d11a      	bne.n	8001672 <optiga_cmd_restore_context+0x70>
            {
                break;
            }
        }
        // Check for valid context value
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f203 6374 	addw	r3, r3, #1652	@ 0x674
 8001644:	4618      	mov	r0, r3
 8001646:	f001 ff16 	bl	8003476 <optiga_common_get_uint32>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10d      	bne.n	800166c <optiga_cmd_restore_context+0x6a>
            0 == optiga_common_get_uint32(&me->p_optiga->optiga_context_handle_buffer[OPTIGA_CMD_OF_CONTEXT_HANDLE_4TH_BYTE]))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f503 63cf 	add.w	r3, r3, #1656	@ 0x678
 8001658:	4618      	mov	r0, r3
 800165a:	f001 ff0c 	bl	8003476 <optiga_common_get_uint32>
 800165e:	4603      	mov	r3, r0
        if (0 == optiga_common_get_uint32(me->p_optiga->optiga_context_handle_buffer) &&
 8001660:	2b00      	cmp	r3, #0
 8001662:	d103      	bne.n	800166c <optiga_cmd_restore_context+0x6a>
        {
            return_status = OPTIGA_CMD_ERROR;
 8001664:	f240 2302 	movw	r3, #514	@ 0x202
 8001668:	81fb      	strh	r3, [r7, #14]
            break;
 800166a:	e003      	b.n	8001674 <optiga_cmd_restore_context+0x72>
        }

        return_status = OPTIGA_LIB_SUCCESS;
 800166c:	2300      	movs	r3, #0
 800166e:	81fb      	strh	r3, [r7, #14]
 8001670:	e000      	b.n	8001674 <optiga_cmd_restore_context+0x72>
                break;
 8001672:	bf00      	nop
    } while (FALSE);
#undef OPTIGA_CMD_OFFSET_OF_NEXT_BYTE
    return (return_status);
 8001674:	89fb      	ldrh	r3, [r7, #14]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <optiga_cmd_execute_comms_open>:
    }
}
#endif

_STATIC_H void optiga_cmd_execute_comms_open(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2201      	movs	r2, #1
 800168e:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	7ddb      	ldrb	r3, [r3, #23]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d045      	beq.n	8001724 <optiga_cmd_execute_comms_open+0xa4>
 8001698:	2b02      	cmp	r3, #2
 800169a:	dc53      	bgt.n	8001744 <optiga_cmd_execute_comms_open+0xc4>
 800169c:	2b00      	cmp	r3, #0
 800169e:	d002      	beq.n	80016a6 <optiga_cmd_execute_comms_open+0x26>
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d01b      	beq.n	80016dc <optiga_cmd_execute_comms_open+0x5c>
 80016a4:	e04e      	b.n	8001744 <optiga_cmd_execute_comms_open+0xc4>
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK:
            {

                // add to queue and exit
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 80016a6:	2121      	movs	r1, #33	@ 0x21
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff8e 	bl	80015ca <optiga_cmd_request_lock>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	839a      	strh	r2, [r3, #28]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	8b9b      	ldrh	r3, [r3, #28]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00a      	beq.n	80016d4 <optiga_cmd_execute_comms_open+0x54>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2204      	movs	r2, #4
 80016c2:	759a      	strb	r2, [r3, #22]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f240 2202 	movw	r2, #514	@ 0x202
 80016ca:	839a      	strh	r2, [r3, #28]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
                    break;
 80016d2:	e042      	b.n	800175a <optiga_cmd_execute_comms_open+0xda>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_START;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	75da      	strb	r2, [r3, #23]
                break;
 80016da:	e03e      	b.n	800175a <optiga_cmd_execute_comms_open+0xda>
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
                me->p_optiga->p_optiga_comms->manage_context_operation = me->manage_context_operation;
                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 fcf1 	bl	80050cc <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_open(me->p_optiga->p_optiga_comms);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f003 fcfb 	bl	80050ec <optiga_comms_open>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461a      	mov	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	839a      	strh	r2, [r3, #28]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	8b9b      	ldrh	r3, [r3, #28]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00a      	beq.n	800171c <optiga_cmd_execute_comms_open+0x9c>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2204      	movs	r2, #4
 800170a:	759a      	strb	r2, [r3, #22]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f240 2202 	movw	r2, #514	@ 0x202
 8001712:	839a      	strh	r2, [r3, #28]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
                    break;
 800171a:	e01e      	b.n	800175a <optiga_cmd_execute_comms_open+0xda>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_OPEN_DONE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2202      	movs	r2, #2
 8001720:	75da      	strb	r2, [r3, #23]
                break;
 8001722:	e01a      	b.n	800175a <optiga_cmd_execute_comms_open+0xda>
            }
            case OPTIGA_CMD_EXEC_COMMS_OPEN_DONE:
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f8d3 066c 	ldr.w	r0, [r3, #1644]	@ 0x66c
 800172c:	2332      	movs	r3, #50	@ 0x32
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	4910      	ldr	r1, [pc, #64]	@ (8001774 <optiga_cmd_execute_comms_open+0xf4>)
 8001732:	f004 fc1d 	bl	8005f70 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me, OPTIGA_CMD_SCHEDULER_RUNNING_TIME_MS);
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2202      	movs	r2, #2
 800173a:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2209      	movs	r2, #9
 8001740:	75da      	strb	r2, [r3, #23]
                break;
 8001742:	e00a      	b.n	800175a <optiga_cmd_execute_comms_open+0xda>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2204      	movs	r2, #4
 8001748:	759a      	strb	r2, [r3, #22]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f240 2202 	movw	r2, #514	@ 0x202
 8001750:	839a      	strh	r2, [r3, #28]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
            break;
 8001758:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }

    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_OPEN == me->cmd_next_execution_state));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d103      	bne.n	800176a <optiga_cmd_execute_comms_open+0xea>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7d9b      	ldrb	r3, [r3, #22]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d08f      	beq.n	800168a <optiga_cmd_execute_comms_open+0xa>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	08000f5b 	.word	0x08000f5b

08001778 <optiga_cmd_execute_comms_close>:

_STATIC_H void optiga_cmd_execute_comms_close(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	2201      	movs	r2, #1
 8001786:	701a      	strb	r2, [r3, #0]
        switch (me->cmd_sub_execution_state)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	7ddb      	ldrb	r3, [r3, #23]
 800178c:	2b03      	cmp	r3, #3
 800178e:	d002      	beq.n	8001796 <optiga_cmd_execute_comms_close+0x1e>
 8001790:	2b04      	cmp	r3, #4
 8001792:	d033      	beq.n	80017fc <optiga_cmd_execute_comms_close+0x84>
 8001794:	e03a      	b.n	800180c <optiga_cmd_execute_comms_close+0x94>
                {
                    me->p_optiga->p_optiga_comms->manage_context_operation = OPTIGA_COMMS_SESSION_CONTEXT_NONE;
                }
                me->p_optiga->protection_level_state = 0;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2204      	movs	r2, #4
 800179a:	75da      	strb	r2, [r3, #23]

                me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f8d2 266c 	ldr.w	r2, [r2, #1644]	@ 0x66c
 80017aa:	601a      	str	r2, [r3, #0]

                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f003 fc89 	bl	80050cc <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_close(me->p_optiga->p_optiga_comms);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f003 fcf9 	bl	80051b8 <optiga_comms_close>
 80017c6:	4603      	mov	r3, r0
 80017c8:	461a      	mov	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	839a      	strh	r2, [r3, #28]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	8b9b      	ldrh	r3, [r3, #28]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00a      	beq.n	80017ec <optiga_cmd_execute_comms_close+0x74>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2204      	movs	r2, #4
 80017da:	759a      	strb	r2, [r3, #22]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f240 2202 	movw	r2, #514	@ 0x202
 80017e2:	839a      	strh	r2, [r3, #28]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
                    break;
 80017ea:	e01a      	b.n	8001822 <optiga_cmd_execute_comms_close+0xaa>
                else
                {
                    me->exit_status = optiga_cmd_release_lock(me);
                }
#else
                me->exit_status = optiga_cmd_release_lock(me);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff fefc 	bl	80015ea <optiga_cmd_release_lock>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	839a      	strh	r2, [r3, #28]
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 80017fa:	e012      	b.n	8001822 <optiga_cmd_execute_comms_close+0xaa>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE_DONE:
            {
                me->handler(me->caller_context, OPTIGA_LIB_SUCCESS);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	68d2      	ldr	r2, [r2, #12]
 8001804:	2100      	movs	r1, #0
 8001806:	4610      	mov	r0, r2
 8001808:	4798      	blx	r3
                if (OPTIGA_COMMS_SESSION_CONTEXT_SAVE == me->manage_context_operation)
                {
                    me->exit_status = optiga_cmd_release_lock(me);
                }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                break;
 800180a:	e00a      	b.n	8001822 <optiga_cmd_execute_comms_close+0xaa>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2204      	movs	r2, #4
 8001810:	759a      	strb	r2, [r3, #22]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f240 2202 	movw	r2, #514	@ 0x202
 8001818:	839a      	strh	r2, [r3, #28]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
            break;
 8001820:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_COMMS_CLOSE == me->cmd_next_execution_state));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d103      	bne.n	8001832 <optiga_cmd_execute_comms_close+0xba>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	7d9b      	ldrb	r3, [r3, #22]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d0a7      	beq.n	8001782 <optiga_cmd_execute_comms_close+0xa>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <optiga_cmd_execute_prepare_command>:

_STATIC_H void optiga_cmd_execute_prepare_command(optiga_cmd_t * me, uint8_t * exit_loop)
{
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b087      	sub	sp, #28
 8001840:	af02      	add	r7, sp, #8
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	60fb      	str	r3, [r7, #12]
    do
    {
        switch (me->cmd_sub_execution_state)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7ddb      	ldrb	r3, [r3, #23]
 8001850:	3b05      	subs	r3, #5
 8001852:	2b04      	cmp	r3, #4
 8001854:	f200 80be 	bhi.w	80019d4 <optiga_cmd_execute_prepare_command+0x198>
 8001858:	a201      	add	r2, pc, #4	@ (adr r2, 8001860 <optiga_cmd_execute_prepare_command+0x24>)
 800185a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185e:	bf00      	nop
 8001860:	08001875 	.word	0x08001875
 8001864:	08001875 	.word	0x08001875
 8001868:	080018c9 	.word	0x080018c9
 800186c:	080018dd 	.word	0x080018dd
 8001870:	08001919 	.word	0x08001919
        {
            case OPTIGA_CMD_EXEC_REQUEST_LOCK:
            case OPTIGA_CMD_EXEC_REQUEST_SESSION:
            {
                *exit_loop = TRUE;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	2201      	movs	r2, #1
 8001878:	701a      	strb	r2, [r3, #0]
                if (me->cmd_sub_execution_state == OPTIGA_CMD_EXEC_REQUEST_SESSION)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7ddb      	ldrb	r3, [r3, #23]
 800187e:	2b05      	cmp	r3, #5
 8001880:	d107      	bne.n	8001892 <optiga_cmd_execute_prepare_command+0x56>
                {
                    me->exit_status = optiga_cmd_request_session(me);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fe88 	bl	8001598 <optiga_cmd_request_session>
 8001888:	4603      	mov	r3, r0
 800188a:	461a      	mov	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	839a      	strh	r2, [r3, #28]
 8001890:	e007      	b.n	80018a2 <optiga_cmd_execute_prepare_command+0x66>
                }
                else
                {
                    me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_LOCK);
 8001892:	2121      	movs	r1, #33	@ 0x21
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff fe98 	bl	80015ca <optiga_cmd_request_lock>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	839a      	strh	r2, [r3, #28]
                }
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	8b9b      	ldrh	r3, [r3, #28]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00a      	beq.n	80018c0 <optiga_cmd_execute_prepare_command+0x84>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2204      	movs	r2, #4
 80018ae:	759a      	strb	r2, [r3, #22]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f240 2202 	movw	r2, #514	@ 0x202
 80018b6:	839a      	strh	r2, [r3, #28]
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
                    break;
 80018be:	e094      	b.n	80019ea <optiga_cmd_execute_prepare_command+0x1ae>
                }

                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2209      	movs	r2, #9
 80018c4:	75da      	strb	r2, [r3, #23]
                break;
 80018c6:	e090      	b.n	80019ea <optiga_cmd_execute_prepare_command+0x1ae>
            }
            case OPTIGA_CMD_EXEC_RESET_STRICT_LOCK:
            {
                optiga_cmd_release_strict_lock(me);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff fe3f 	bl	800154c <optiga_cmd_release_strict_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2208      	movs	r2, #8
 80018d2:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
                break;
 80018da:	e086      	b.n	80019ea <optiga_cmd_execute_prepare_command+0x1ae>
            }
            case OPTIGA_CMD_EXEC_REQUEST_STRICT_LOCK:
            {
                me->exit_status = optiga_cmd_request_lock(me, OPTIGA_CMD_QUEUE_REQUEST_STRICT_LOCK);
 80018dc:	2123      	movs	r1, #35	@ 0x23
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff fe73 	bl	80015ca <optiga_cmd_request_lock>
 80018e4:	4603      	mov	r3, r0
 80018e6:	461a      	mov	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	839a      	strh	r2, [r3, #28]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	8b9b      	ldrh	r3, [r3, #28]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00a      	beq.n	800190a <optiga_cmd_execute_prepare_command+0xce>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2204      	movs	r2, #4
 80018f8:	759a      	strb	r2, [r3, #22]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f240 2202 	movw	r2, #514	@ 0x202
 8001900:	839a      	strh	r2, [r3, #28]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
                    break;
 8001908:	e06f      	b.n	80019ea <optiga_cmd_execute_prepare_command+0x1ae>
                }
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2209      	movs	r2, #9
 800190e:	75da      	strb	r2, [r3, #23]
                *exit_loop = TRUE;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	2201      	movs	r2, #1
 8001914:	701a      	strb	r2, [r3, #0]
                break;
 8001916:	e068      	b.n	80019ea <optiga_cmd_execute_prepare_command+0x1ae>
            }
            case OPTIGA_CMD_EXEC_PREPARE_APDU:
            {
                *exit_loop = TRUE;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
                me->exit_status = optiga_cmd_handler(me);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	4798      	blx	r3
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	839a      	strh	r2, [r3, #28]
                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	8b9b      	ldrh	r3, [r3, #28]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <optiga_cmd_execute_prepare_command+0x106>
                {
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2204      	movs	r2, #4
 8001938:	759a      	strb	r2, [r3, #22]
                    *exit_loop = FALSE;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
                    break;
 8001940:	e053      	b.n	80019ea <optiga_cmd_execute_prepare_command+0x1ae>
                }
                me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f240 6215 	movw	r2, #1557	@ 0x615
 800194a:	80da      	strh	r2, [r3, #6]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
                me->p_optiga->p_optiga_comms->protection_level = me->protection_level;
                me->p_optiga->p_optiga_comms->protocol_version = me->protocol_version;
                me->p_optiga->protection_level_state |= me->protection_level;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
                (void)optiga_comms_set_callback_context(me->p_optiga->p_optiga_comms, me);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	4618      	mov	r0, r3
 8001956:	f003 fbb9 	bl	80050cc <optiga_comms_set_callback_context>
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6818      	ldr	r0, [r3, #0]
                                                          me->p_optiga->optiga_comms_buffer,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f103 010d 	add.w	r1, r3, #13
                                                          me->p_optiga->comms_tx_size,
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 800196c:	889a      	ldrh	r2, [r3, #4]
                                                          me->p_optiga->optiga_comms_buffer,
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f103 040d 	add.w	r4, r3, #13
                                                          &(me->p_optiga->comms_rx_size));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
                me->exit_status = optiga_comms_transceive(me->p_optiga->p_optiga_comms,
 800197a:	3306      	adds	r3, #6
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	4623      	mov	r3, r4
 8001980:	f003 fbe6 	bl	8005150 <optiga_comms_transceive>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	839a      	strh	r2, [r3, #28]

                if (OPTIGA_LIB_SUCCESS != me->exit_status)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	8b9b      	ldrh	r3, [r3, #28]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00a      	beq.n	80019aa <optiga_cmd_execute_prepare_command+0x16e>
                {
                    EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2204      	movs	r2, #4
 8001998:	759a      	strb	r2, [r3, #22]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f240 2202 	movw	r2, #514	@ 0x202
 80019a0:	839a      	strh	r2, [r3, #28]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
                    break;
 80019a8:	e01f      	b.n	80019ea <optiga_cmd_execute_prepare_command+0x1ae>
                }

                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2203      	movs	r2, #3
 80019ae:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	220a      	movs	r2, #10
 80019b4:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_ENTER_HANDLER_CALL);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	7e9b      	ldrb	r3, [r3, #26]
 80019ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	769a      	strb	r2, [r3, #26]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	7e9b      	ldrb	r3, [r3, #26]
 80019c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	769a      	strb	r2, [r3, #26]
                break;
 80019d2:	e00a      	b.n	80019ea <optiga_cmd_execute_prepare_command+0x1ae>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2204      	movs	r2, #4
 80019d8:	759a      	strb	r2, [r3, #22]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f240 2202 	movw	r2, #514	@ 0x202
 80019e0:	839a      	strh	r2, [r3, #28]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
            break;
 80019e8:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PREPARE_COMMAND == me->cmd_next_execution_state));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d104      	bne.n	80019fc <optiga_cmd_execute_prepare_command+0x1c0>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	7d9b      	ldrb	r3, [r3, #22]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	f43f af28 	beq.w	800184c <optiga_cmd_execute_prepare_command+0x10>
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd90      	pop	{r4, r7, pc}

08001a04 <optiga_cmd_execute_get_device_error>:

_STATIC_H void optiga_cmd_execute_get_device_error(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
    do
    {
        *exit_loop = TRUE;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
        me->exit_status = optiga_cmd_get_error_code_handler(me);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fa0b 	bl	8001e30 <optiga_cmd_get_error_code_handler>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	839a      	strh	r2, [r3, #28]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	8b9b      	ldrh	r3, [r3, #28]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d004      	beq.n	8001a34 <optiga_cmd_execute_get_device_error+0x30>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	8b9b      	ldrh	r3, [r3, #28]
 8001a2e:	b21b      	sxth	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	da0a      	bge.n	8001a4a <optiga_cmd_execute_get_device_error+0x46>
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	8b9b      	ldrh	r3, [r3, #28]
        if (((OPTIGA_LIB_SUCCESS != me->exit_status) && !(OPTIGA_DEVICE_ERROR & me->exit_status)) ||
 8001a38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a3c:	d10c      	bne.n	8001a58 <optiga_cmd_execute_get_device_error+0x54>
            ((me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK) == OPTIGA_CMD_ERROR_CODE_RX)))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	7e9b      	ldrb	r3, [r3, #26]
 8001a42:	f003 0303 	and.w	r3, r3, #3
            ((OPTIGA_DEVICE_ERROR == me->exit_status) &&
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d106      	bne.n	8001a58 <optiga_cmd_execute_get_device_error+0x54>
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
            break;
 8001a56:	bf00      	nop
        }
    } while (FALSE);
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <optiga_cmd_execute_process_optiga_response>:

_STATIC_H void optiga_cmd_execute_process_optiga_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
    optiga_cmd_handler_t optiga_cmd_handler = me->cmd_hdlrs;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	60fb      	str	r3, [r7, #12]
    do
    {
        *exit_loop = TRUE;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2201      	movs	r2, #1
 8001a74:	701a      	strb	r2, [r3, #0]
        if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE != (me->device_error_status & OPTIGA_CMD_ENTER_HANDLER_CALL_MASK))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7e9b      	ldrb	r3, [r3, #26]
 8001a7a:	b25b      	sxtb	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	da0b      	bge.n	8001a98 <optiga_cmd_execute_process_optiga_response+0x38>
        {
            me->exit_status = optiga_cmd_handler(me);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	4798      	blx	r3
 8001a86:	4603      	mov	r3, r0
 8001a88:	461a      	mov	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	839a      	strh	r2, [r3, #28]
        {
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
            *exit_loop = FALSE;
            break;
        }
        if (OPTIGA_LIB_SUCCESS == me->exit_status)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	8b9b      	ldrh	r3, [r3, #28]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d147      	bne.n	8001b26 <optiga_cmd_execute_process_optiga_response+0xc6>
 8001a96:	e006      	b.n	8001aa6 <optiga_cmd_execute_process_optiga_response+0x46>
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	759a      	strb	r2, [r3, #22]
            *exit_loop = FALSE;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
            break;
 8001aa4:	e068      	b.n	8001b78 <optiga_cmd_execute_process_optiga_response+0x118>
        {
            // After successful Close Application, change state to invoke optiga_comms_close
            if (OPTIGA_CMD_CLOSE_APPLICATION == OPTIGA_CMD_GET_APDU_CMD(me->apdu_data))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	8c1b      	ldrh	r3, [r3, #32]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2bf1      	cmp	r3, #241	@ 0xf1
 8001aae:	d113      	bne.n	8001ad8 <optiga_cmd_execute_process_optiga_response+0x78>
            {
                pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f8d3 066c 	ldr.w	r0, [r3, #1644]	@ 0x66c
 8001ab8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	4930      	ldr	r1, [pc, #192]	@ (8001b80 <optiga_cmd_execute_process_optiga_response+0x120>)
 8001ac0:	f004 fa56 	bl	8005f70 <pal_os_event_register_callback_oneshot>
                                                       (register_callback)optiga_cmd_event_trigger_execute,
                                                       me,
                                                       OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
                *exit_loop = TRUE;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]
                me->cmd_next_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	759a      	strb	r2, [r3, #22]
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_COMMS_CLOSE_START;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
                *exit_loop = FALSE;
            }
        }
    } while (FALSE);
}
 8001ad6:	e04f      	b.n	8001b78 <optiga_cmd_execute_process_optiga_response+0x118>
                if (FALSE == me->chaining_ongoing)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7e1b      	ldrb	r3, [r3, #24]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10e      	bne.n	8001afe <optiga_cmd_execute_process_optiga_response+0x9e>
                    if ((OPTIGA_CMD_STATE_EXIT != me->cmd_sub_execution_state) && (OPTIGA_CMD_EXEC_RELEASE_SESSION != me->cmd_sub_execution_state))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7ddb      	ldrb	r3, [r3, #23]
 8001ae4:	2b0e      	cmp	r3, #14
 8001ae6:	d006      	beq.n	8001af6 <optiga_cmd_execute_process_optiga_response+0x96>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	7ddb      	ldrb	r3, [r3, #23]
 8001aec:	2b0d      	cmp	r3, #13
 8001aee:	d002      	beq.n	8001af6 <optiga_cmd_execute_process_optiga_response+0x96>
                        me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	220c      	movs	r2, #12
 8001af4:	75da      	strb	r2, [r3, #23]
                    *exit_loop = FALSE;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
                    break;
 8001afc:	e03c      	b.n	8001b78 <optiga_cmd_execute_process_optiga_response+0x118>
                    pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f8d3 066c 	ldr.w	r0, [r3, #1644]	@ 0x66c
 8001b06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	491c      	ldr	r1, [pc, #112]	@ (8001b80 <optiga_cmd_execute_process_optiga_response+0x120>)
 8001b0e:	f004 fa2f 	bl	8005f70 <pal_os_event_register_callback_oneshot>
                    *exit_loop = TRUE;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	2201      	movs	r2, #1
 8001b16:	701a      	strb	r2, [r3, #0]
                    me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PREPARE_COMMAND;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	759a      	strb	r2, [r3, #22]
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PREPARE_APDU;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2209      	movs	r2, #9
 8001b22:	75da      	strb	r2, [r3, #23]
}
 8001b24:	e028      	b.n	8001b78 <optiga_cmd_execute_process_optiga_response+0x118>
            if (OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT == me->exit_status)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	8b9b      	ldrh	r3, [r3, #28]
 8001b2a:	f5b3 7f01 	cmp.w	r3, #516	@ 0x204
 8001b2e:	d106      	bne.n	8001b3e <optiga_cmd_execute_process_optiga_response+0xde>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	220c      	movs	r2, #12
 8001b34:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
                break;
 8001b3c:	e01c      	b.n	8001b78 <optiga_cmd_execute_process_optiga_response+0x118>
            else if (OPTIGA_CMD_EXEC_RELEASE_SESSION == me->cmd_sub_execution_state)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7ddb      	ldrb	r3, [r3, #23]
 8001b42:	2b0d      	cmp	r3, #13
 8001b44:	d103      	bne.n	8001b4e <optiga_cmd_execute_process_optiga_response+0xee>
                *exit_loop = FALSE;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
}
 8001b4c:	e014      	b.n	8001b78 <optiga_cmd_execute_process_optiga_response+0x118>
                me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	220b      	movs	r2, #11
 8001b52:	75da      	strb	r2, [r3, #23]
                SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7e9b      	ldrb	r3, [r3, #26]
 8001b58:	f023 0303 	bic.w	r3, r3, #3
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	769a      	strb	r2, [r3, #26]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7e9b      	ldrb	r3, [r3, #26]
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	769a      	strb	r2, [r3, #26]
                *exit_loop = FALSE;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
}
 8001b76:	e7ff      	b.n	8001b78 <optiga_cmd_execute_process_optiga_response+0x118>
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	08000f5b 	.word	0x08000f5b

08001b84 <optiga_cmd_execute_process_response>:

_STATIC_H void optiga_cmd_execute_process_response(optiga_cmd_t * me, uint8_t * exit_loop)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
    do
    {
        switch (me->cmd_sub_execution_state)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	7ddb      	ldrb	r3, [r3, #23]
 8001b92:	3b0a      	subs	r3, #10
 8001b94:	2b04      	cmp	r3, #4
 8001b96:	d84d      	bhi.n	8001c34 <optiga_cmd_execute_process_response+0xb0>
 8001b98:	a201      	add	r2, pc, #4	@ (adr r2, 8001ba0 <optiga_cmd_execute_process_response+0x1c>)
 8001b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9e:	bf00      	nop
 8001ba0:	08001bb5 	.word	0x08001bb5
 8001ba4:	08001bbf 	.word	0x08001bbf
 8001ba8:	08001c09 	.word	0x08001c09
 8001bac:	08001bc9 	.word	0x08001bc9
 8001bb0:	08001c1d 	.word	0x08001c1d
        {
            case OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE:
            {
                optiga_cmd_execute_process_optiga_response(me, exit_loop);
 8001bb4:	6839      	ldr	r1, [r7, #0]
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ff52 	bl	8001a60 <optiga_cmd_execute_process_optiga_response>
                break;
 8001bbc:	e045      	b.n	8001c4a <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_GET_DEVICE_ERROR:
            {
                optiga_cmd_execute_get_device_error(me, exit_loop);
 8001bbe:	6839      	ldr	r1, [r7, #0]
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ff1f 	bl	8001a04 <optiga_cmd_execute_get_device_error>
                break;
 8001bc6:	e040      	b.n	8001c4a <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_SESSION:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_session(me);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff fcf2 	bl	80015b2 <optiga_cmd_release_session>
                if (OPTIGA_LIB_SUCCESS == me->exit_status)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	8b9b      	ldrh	r3, [r3, #28]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d103      	bne.n	8001bde <optiga_cmd_execute_process_response+0x5a>
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_RELEASE_LOCK;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	220c      	movs	r2, #12
 8001bda:	75da      	strb	r2, [r3, #23]
 8001bdc:	e010      	b.n	8001c00 <optiga_cmd_execute_process_response+0x7c>
                }
                else
                {
                    me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_GET_DEVICE_ERROR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	220b      	movs	r2, #11
 8001be2:	75da      	strb	r2, [r3, #23]
                    SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_PREPARE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	7e9b      	ldrb	r3, [r3, #26]
 8001be8:	f023 0303 	bic.w	r3, r3, #3
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	769a      	strb	r2, [r3, #26]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	7e9b      	ldrb	r3, [r3, #26]
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	769a      	strb	r2, [r3, #26]
                }
                *exit_loop = FALSE;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
                break;
 8001c06:	e020      	b.n	8001c4a <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_EXEC_RELEASE_LOCK:
            {
                //lint --e{534} suppress "The return code is not checked because this is exit state."
                optiga_cmd_release_lock(me);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff fcee 	bl	80015ea <optiga_cmd_release_lock>
                me->cmd_sub_execution_state = OPTIGA_CMD_STATE_EXIT;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	220e      	movs	r2, #14
 8001c12:	75da      	strb	r2, [r3, #23]
                *exit_loop = FALSE;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
                break;
 8001c1a:	e016      	b.n	8001c4a <optiga_cmd_execute_process_response+0xc6>
            }
            case OPTIGA_CMD_STATE_EXIT:
            {
                me->handler(me->caller_context, me->exit_status);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	68d0      	ldr	r0, [r2, #12]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	8b92      	ldrh	r2, [r2, #28]
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4798      	blx	r3
                *exit_loop = TRUE;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
                break;
 8001c32:	e00a      	b.n	8001c4a <optiga_cmd_execute_process_response+0xc6>
            }
            default:
                EXIT_STATE_WITH_ERROR(me,*exit_loop);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2204      	movs	r2, #4
 8001c38:	759a      	strb	r2, [r3, #22]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f240 2202 	movw	r2, #514	@ 0x202
 8001c40:	839a      	strh	r2, [r3, #28]
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
            break;
 8001c48:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while ((FALSE == *exit_loop) && (OPTIGA_CMD_EXEC_PROCESS_RESPONSE == me->cmd_next_execution_state));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d103      	bne.n	8001c5a <optiga_cmd_execute_process_response+0xd6>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	7d9b      	ldrb	r3, [r3, #22]
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d099      	beq.n	8001b8e <optiga_cmd_execute_process_response+0xa>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop

08001c64 <optiga_cmd_execute_error_handler>:

_STATIC_H void optiga_cmd_execute_error_handler(const optiga_cmd_t * me, uint8_t * exit_loop)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
    do
    {
        //lint --e{534} suppress "The return code is not checked because this is exit state."
        optiga_cmd_release_lock(me);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fcbb 	bl	80015ea <optiga_cmd_release_lock>
        me->handler(me->caller_context, me->exit_status);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	68d0      	ldr	r0, [r2, #12]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	8b92      	ldrh	r2, [r2, #28]
 8001c80:	4611      	mov	r1, r2
 8001c82:	4798      	blx	r3
        *exit_loop = TRUE;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	2201      	movs	r2, #1
 8001c88:	701a      	strb	r2, [r3, #0]
    } while (FALSE);
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <optiga_cmd_execute_handler>:

_STATIC_H void optiga_cmd_execute_handler(void * p_ctx, optiga_lib_status_t event)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	807b      	strh	r3, [r7, #2]
    uint8_t exit_loop = TRUE;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	72fb      	strb	r3, [r7, #11]
    optiga_cmd_t * me = (optiga_cmd_t *)p_ctx;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	60fb      	str	r3, [r7, #12]

    // in event of no success, release lock and exit
    if (OPTIGA_LIB_SUCCESS != event)
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d005      	beq.n	8001cba <optiga_cmd_execute_handler+0x26>
    {
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        optiga_cmd_clear_app_ctx(p_ctx);
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        me->cmd_next_execution_state = OPTIGA_CMD_EXEC_ERROR_HANDLER;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	759a      	strb	r2, [r3, #22]
        me->exit_status = event;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	887a      	ldrh	r2, [r7, #2]
 8001cb8:	839a      	strh	r2, [r3, #28]
    }

    do
    {
        switch (me->cmd_next_execution_state)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	7d9b      	ldrb	r3, [r3, #22]
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d82f      	bhi.n	8001d22 <optiga_cmd_execute_handler+0x8e>
 8001cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8001cc8 <optiga_cmd_execute_handler+0x34>)
 8001cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc8:	08001cdd 	.word	0x08001cdd
 8001ccc:	08001ceb 	.word	0x08001ceb
 8001cd0:	08001cf9 	.word	0x08001cf9
 8001cd4:	08001d07 	.word	0x08001d07
 8001cd8:	08001d15 	.word	0x08001d15
        {
            case OPTIGA_CMD_EXEC_COMMS_OPEN:
            {
                optiga_cmd_execute_comms_open(me, &exit_loop);
 8001cdc:	f107 030b 	add.w	r3, r7, #11
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f7ff fccc 	bl	8001680 <optiga_cmd_execute_comms_open>
                break;
 8001ce8:	e01c      	b.n	8001d24 <optiga_cmd_execute_handler+0x90>
            }
            case OPTIGA_CMD_EXEC_COMMS_CLOSE:
            {
                optiga_cmd_execute_comms_close(me, &exit_loop);
 8001cea:	f107 030b 	add.w	r3, r7, #11
 8001cee:	4619      	mov	r1, r3
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f7ff fd41 	bl	8001778 <optiga_cmd_execute_comms_close>
                break;
 8001cf6:	e015      	b.n	8001d24 <optiga_cmd_execute_handler+0x90>
            }
            case OPTIGA_CMD_EXEC_PREPARE_COMMAND:
            {
                optiga_cmd_execute_prepare_command(me, &exit_loop);
 8001cf8:	f107 030b 	add.w	r3, r7, #11
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f7ff fd9c 	bl	800183c <optiga_cmd_execute_prepare_command>
                break;
 8001d04:	e00e      	b.n	8001d24 <optiga_cmd_execute_handler+0x90>
            }
            case OPTIGA_CMD_EXEC_PROCESS_RESPONSE:
            {
                optiga_cmd_execute_process_response(me, &exit_loop);
 8001d06:	f107 030b 	add.w	r3, r7, #11
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f7ff ff39 	bl	8001b84 <optiga_cmd_execute_process_response>
                break;
 8001d12:	e007      	b.n	8001d24 <optiga_cmd_execute_handler+0x90>
            }
            case OPTIGA_CMD_EXEC_ERROR_HANDLER:
            {
                optiga_cmd_execute_error_handler(me, &exit_loop);
 8001d14:	f107 030b 	add.w	r3, r7, #11
 8001d18:	4619      	mov	r1, r3
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f7ff ffa2 	bl	8001c64 <optiga_cmd_execute_error_handler>
                break;
 8001d20:	e000      	b.n	8001d24 <optiga_cmd_execute_handler+0x90>
            }
            default :
                break;
 8001d22:	bf00      	nop
            //lint --e{788} suppress "Not all states are used as same enum is used for both main and sub state machine."
        }
    } while (FALSE == exit_loop);
 8001d24:	7afb      	ldrb	r3, [r7, #11]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0c7      	beq.n	8001cba <optiga_cmd_execute_handler+0x26>
}
 8001d2a:	bf00      	nop
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <optiga_cmd_create>:

optiga_cmd_t * optiga_cmd_create(uint8_t optiga_instance_id, callback_handler_t handler, void * caller_context)
{
 8001d34:	b590      	push	{r4, r7, lr}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	73fb      	strb	r3, [r7, #15]
    optiga_cmd_t * me = NULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]

    pal_os_lock_enter_critical_section();
 8001d46:	f004 f939 	bl	8005fbc <pal_os_lock_enter_critical_section>
    do
    {
        //lint --e{778} suppress "There is no chance of g_optiga_list become 0."
        if ( optiga_instance_id > (uint8_t)((sizeof(g_optiga_list)/sizeof(optiga_context_t *)) - 1 ) )
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d15b      	bne.n	8001e08 <optiga_cmd_create+0xd4>
        {
            break;
        }
        // Get number of free slots
        if (0 == optiga_cmd_queue_get_count_of(g_optiga_list[optiga_instance_id],
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	4a33      	ldr	r2, [pc, #204]	@ (8001e20 <optiga_cmd_create+0xec>)
 8001d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2109      	movs	r1, #9
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff f997 	bl	8001090 <optiga_cmd_queue_get_count_of>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d051      	beq.n	8001e0c <optiga_cmd_create+0xd8>
                                               OPTIGA_CMD_QUEUE_NOT_ASSIGNED))
        {
            break;
        }

        me = (optiga_cmd_t *)pal_os_calloc(1, sizeof(optiga_cmd_t));
 8001d68:	2124      	movs	r1, #36	@ 0x24
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	f004 f934 	bl	8005fd8 <pal_os_calloc>
 8001d70:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d04b      	beq.n	8001e10 <optiga_cmd_create+0xdc>
        {
            break;
        }

        me->handler = handler;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	611a      	str	r2, [r3, #16]
        me->caller_context = caller_context;
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	60da      	str	r2, [r3, #12]

        me->p_optiga = g_optiga_list[optiga_instance_id];
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	4a26      	ldr	r2, [pc, #152]	@ (8001e20 <optiga_cmd_create+0xec>)
 8001d88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	601a      	str	r2, [r3, #0]
        me->optiga_context_datastore_id = g_hibernate_datastore_id_list[optiga_instance_id];
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	4a24      	ldr	r2, [pc, #144]	@ (8001e24 <optiga_cmd_create+0xf0>)
 8001d94:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	83da      	strh	r2, [r3, #30]

        if (FALSE == me->p_optiga->instance_init_state)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	7b1b      	ldrb	r3, [r3, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d129      	bne.n	8001dfa <optiga_cmd_create+0xc6>
        {
            //create pal os event
            me->p_optiga->p_pal_os_event_ctx = pal_os_event_create(optiga_cmd_queue_scheduler, me->p_optiga);
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	681c      	ldr	r4, [r3, #0]
 8001dae:	4611      	mov	r1, r2
 8001db0:	481d      	ldr	r0, [pc, #116]	@ (8001e28 <optiga_cmd_create+0xf4>)
 8001db2:	f004 f8ab 	bl	8005f0c <pal_os_event_create>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f8c4 366c 	str.w	r3, [r4, #1644]	@ 0x66c
            me->p_optiga->p_optiga_comms = optiga_comms_create(optiga_cmd_execute_handler, me);
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	681c      	ldr	r4, [r3, #0]
 8001dc0:	6979      	ldr	r1, [r7, #20]
 8001dc2:	481a      	ldr	r0, [pc, #104]	@ (8001e2c <optiga_cmd_create+0xf8>)
 8001dc4:	f003 f95c 	bl	8005080 <optiga_comms_create>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	6023      	str	r3, [r4, #0]
            if (NULL == me->p_optiga->p_optiga_comms)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d105      	bne.n	8001de2 <optiga_cmd_create+0xae>
            {
                pal_os_free(me);
 8001dd6:	6978      	ldr	r0, [r7, #20]
 8001dd8:	f004 f90f 	bl	8005ffa <pal_os_free>
                me = NULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
                break;
 8001de0:	e017      	b.n	8001e12 <optiga_cmd_create+0xde>
            }
            me->p_optiga->instance_init_state = TRUE;
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2201      	movs	r2, #1
 8001de8:	731a      	strb	r2, [r3, #12]
            me->p_optiga->p_optiga_comms->p_pal_os_event_ctx = me->p_optiga->p_pal_os_event_ctx;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8d2 266c 	ldr.w	r2, [r2, #1644]	@ 0x66c
 8001df8:	601a      	str	r2, [r3, #0]
        }
        // attach optiga cmd queue entry
        optiga_cmd_queue_assign_slot(me, &(me->queue_id));
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	331b      	adds	r3, #27
 8001dfe:	4619      	mov	r1, r3
 8001e00:	6978      	ldr	r0, [r7, #20]
 8001e02:	f7ff f986 	bl	8001112 <optiga_cmd_queue_assign_slot>
 8001e06:	e004      	b.n	8001e12 <optiga_cmd_create+0xde>
            break;
 8001e08:	bf00      	nop
 8001e0a:	e002      	b.n	8001e12 <optiga_cmd_create+0xde>
            break;
 8001e0c:	bf00      	nop
 8001e0e:	e000      	b.n	8001e12 <optiga_cmd_create+0xde>
            break;
 8001e10:	bf00      	nop
    } while (FALSE);

    pal_os_lock_exit_critical_section();
 8001e12:	f004 f8da 	bl	8005fca <pal_os_lock_exit_critical_section>
    return (me);
 8001e16:	697b      	ldr	r3, [r7, #20]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd90      	pop	{r4, r7, pc}
 8001e20:	20000008 	.word	0x20000008
 8001e24:	2000000c 	.word	0x2000000c
 8001e28:	08001179 	.word	0x08001179
 8001e2c:	08001c95 	.word	0x08001c95

08001e30 <optiga_cmd_get_error_code_handler>:

/*
* Last error code handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_error_code_handler(optiga_cmd_t * me)
{
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	6078      	str	r0, [r7, #4]
    optiga_context_t * p_optiga;
    optiga_lib_status_t return_status = OPTIGA_DEVICE_ERROR;
 8001e38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e3c:	81fb      	strh	r3, [r7, #14]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8001e3e:	2304      	movs	r3, #4
 8001e40:	81bb      	strh	r3, [r7, #12]
#define OPTIGA_CMD_OFFSET                     (0x0000)
#define OPTIGA_CMD_BYTES_TO_READ              (0x0001)
#define OPTIGA_CMD_GET_DATA_OBJECT_CMD        (0x01)
#define OPTIGA_CMD_PARAM                      (0x00)

    p_optiga = me->p_optiga;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	60bb      	str	r3, [r7, #8]

    switch (me->device_error_status & OPTIGA_CMD_ERROR_CODE_STATE_MASK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	7e9b      	ldrb	r3, [r3, #26]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	f000 808a 	beq.w	8001f6a <optiga_cmd_get_error_code_handler+0x13a>
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	f300 80a7 	bgt.w	8001faa <optiga_cmd_get_error_code_handler+0x17a>
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d002      	beq.n	8001e66 <optiga_cmd_get_error_code_handler+0x36>
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d04f      	beq.n	8001f04 <optiga_cmd_get_error_code_handler+0xd4>
                                                   (register_callback)optiga_cmd_event_trigger_execute,
                                                   me, OPTIGA_CMD_SCHEDULER_IDLING_TIME_MS);
        }
        break;
        default:
            break;
 8001e64:	e0a1      	b.n	8001faa <optiga_cmd_get_error_code_handler+0x17a>
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_LAST_ERROR_CODE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f103 020d 	add.w	r2, r3, #13
 8001e6e:	89bb      	ldrh	r3, [r7, #12]
 8001e70:	4413      	add	r3, r2
 8001e72:	f24f 11c2 	movw	r1, #61890	@ 0xf1c2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f001 fae6 	bl	8003448 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8001e7c:	89bb      	ldrh	r3, [r7, #12]
 8001e7e:	3302      	adds	r3, #2
 8001e80:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_OFFSET);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f103 020d 	add.w	r2, r3, #13
 8001e8a:	89bb      	ldrh	r3, [r7, #12]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f001 fad9 	bl	8003448 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8001e96:	89bb      	ldrh	r3, [r7, #12]
 8001e98:	3302      	adds	r3, #2
 8001e9a:	81bb      	strh	r3, [r7, #12]
            optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), OPTIGA_CMD_BYTES_TO_READ);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f103 020d 	add.w	r2, r3, #13
 8001ea4:	89bb      	ldrh	r3, [r7, #12]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f001 facc 	bl	8003448 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8001eb0:	89bb      	ldrh	r3, [r7, #12]
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 8001eb6:	89bb      	ldrh	r3, [r7, #12]
 8001eb8:	3b04      	subs	r3, #4
 8001eba:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_DATA_OBJECT_CMD,
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f7fe fff4 	bl	8000eb2 <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	89ba      	ldrh	r2, [r7, #12]
 8001ed0:	809a      	strh	r2, [r3, #4]
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_TX);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	7e9b      	ldrb	r3, [r3, #26]
 8001ed6:	f023 0303 	bic.w	r3, r3, #3
 8001eda:	b2da      	uxtb	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	769a      	strb	r2, [r3, #26]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	7e9b      	ldrb	r3, [r3, #26]
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	769a      	strb	r2, [r3, #26]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f8d3 066c 	ldr.w	r0, [r3, #1644]	@ 0x66c
 8001ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	492f      	ldr	r1, [pc, #188]	@ (8001fbc <optiga_cmd_get_error_code_handler+0x18c>)
 8001efe:	f004 f837 	bl	8005f70 <pal_os_event_register_callback_oneshot>
        break;
 8001f02:	e055      	b.n	8001fb0 <optiga_cmd_get_error_code_handler+0x180>
            me->p_optiga->comms_rx_size = OPTIGA_CMD_TOTAL_COMMS_BUFFER_SIZE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f240 6215 	movw	r2, #1557	@ 0x615
 8001f0c:	80da      	strh	r2, [r3, #6]
            (void)optiga_comms_set_callback_context(p_optiga->p_optiga_comms, (void*)me);
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f003 f8d9 	bl	80050cc <optiga_comms_set_callback_context>
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	6818      	ldr	r0, [r3, #0]
                                                    p_optiga->optiga_comms_buffer,
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	f103 010d 	add.w	r1, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	889a      	ldrh	r2, [r3, #4]
                                                    p_optiga->optiga_comms_buffer,
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f103 040d 	add.w	r4, r3, #13
            return_status = optiga_comms_transceive(p_optiga->p_optiga_comms,
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	3306      	adds	r3, #6
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	4623      	mov	r3, r4
 8001f36:	f003 f90b 	bl	8005150 <optiga_comms_transceive>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_COMMS_SUCCESS != return_status)
 8001f3e:	89fb      	ldrh	r3, [r7, #14]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <optiga_cmd_get_error_code_handler+0x11c>
                return_status = OPTIGA_CMD_ERROR;
 8001f44:	f240 2302 	movw	r3, #514	@ 0x202
 8001f48:	81fb      	strh	r3, [r7, #14]
                break;
 8001f4a:	e031      	b.n	8001fb0 <optiga_cmd_get_error_code_handler+0x180>
            SET_DEV_ERROR_HANDLER_STATE(OPTIGA_CMD_ERROR_CODE_RX);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7e9b      	ldrb	r3, [r3, #26]
 8001f50:	f023 0303 	bic.w	r3, r3, #3
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	769a      	strb	r2, [r3, #26]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	7e9b      	ldrb	r3, [r3, #26]
 8001f5e:	f043 0303 	orr.w	r3, r3, #3
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	769a      	strb	r2, [r3, #26]
        break;
 8001f68:	e022      	b.n	8001fb0 <optiga_cmd_get_error_code_handler+0x180>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	7b5b      	ldrb	r3, [r3, #13]
 8001f70:	2bff      	cmp	r3, #255	@ 0xff
 8001f72:	d01c      	beq.n	8001fae <optiga_cmd_get_error_code_handler+0x17e>
            return_status = me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET];
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	7c5b      	ldrb	r3, [r3, #17]
 8001f7a:	81fb      	strh	r3, [r7, #14]
            return_status = return_status | OPTIGA_DEVICE_ERROR;
 8001f7c:	89fb      	ldrh	r3, [r7, #14]
 8001f7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f86:	81fb      	strh	r3, [r7, #14]
            me->cmd_next_execution_state = OPTIGA_CMD_EXEC_PROCESS_RESPONSE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	759a      	strb	r2, [r3, #22]
            me->cmd_sub_execution_state = OPTIGA_CMD_EXEC_PROCESS_OPTIGA_RESPONSE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	220a      	movs	r2, #10
 8001f92:	75da      	strb	r2, [r3, #23]
            pal_os_event_register_callback_oneshot(me->p_optiga->p_pal_os_event_ctx,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f8d3 066c 	ldr.w	r0, [r3, #1644]	@ 0x66c
 8001f9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4906      	ldr	r1, [pc, #24]	@ (8001fbc <optiga_cmd_get_error_code_handler+0x18c>)
 8001fa4:	f003 ffe4 	bl	8005f70 <pal_os_event_register_callback_oneshot>
        break;
 8001fa8:	e002      	b.n	8001fb0 <optiga_cmd_get_error_code_handler+0x180>
            break;
 8001faa:	bf00      	nop
 8001fac:	e000      	b.n	8001fb0 <optiga_cmd_get_error_code_handler+0x180>
                break;
 8001fae:	bf00      	nop

#undef OPTIGA_CMD_OFFSET
#undef OPTIGA_CMD_BYTES_TO_READ
#undef OPTIGA_CMD_GET_DATA_OBJECT_CMD
#undef OPTIGA_CMD_PARAM
    return (return_status);
 8001fb0:	89fb      	ldrh	r3, [r7, #14]
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd90      	pop	{r4, r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	08000f5b 	.word	0x08000f5b

08001fc0 <optiga_cmd_open_application_handler>:

/*
* Open Application handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_open_application_handler(optiga_cmd_t * me)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8001fc8:	f240 2302 	movw	r3, #514	@ 0x202
 8001fcc:	81fb      	strh	r3, [r7, #14]

    switch ((uint8_t)me->cmd_next_execution_state)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	7d9b      	ldrb	r3, [r3, #22]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d002      	beq.n	8001fdc <optiga_cmd_open_application_handler+0x1c>
 8001fd6:	2b03      	cmp	r3, #3
 8001fd8:	d074      	beq.n	80020c4 <optiga_cmd_open_application_handler+0x104>
            return_status = OPTIGA_LIB_SUCCESS;

        }
        break;
        default:
            break;
 8001fda:	e088      	b.n	80020ee <optiga_cmd_open_application_handler+0x12e>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + sizeof(g_optiga_unique_application_identifier);
 8001fdc:	2314      	movs	r3, #20
 8001fde:	81bb      	strh	r3, [r7, #12]
            total_apdu_length += ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ? (0) :
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	7e5b      	ldrb	r3, [r3, #25]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <optiga_cmd_open_application_handler+0x2c>
 8001fe8:	2200      	movs	r2, #0
 8001fea:	e000      	b.n	8001fee <optiga_cmd_open_application_handler+0x2e>
 8001fec:	2208      	movs	r2, #8
 8001fee:	89bb      	ldrh	r3, [r7, #12]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	81bb      	strh	r3, [r7, #12]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8001ff4:	89bb      	ldrh	r3, [r7, #12]
 8001ff6:	f240 6215 	movw	r2, #1557	@ 0x615
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d903      	bls.n	8002006 <optiga_cmd_open_application_handler+0x46>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8001ffe:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002002:	81fb      	strh	r3, [r7, #14]
                break;
 8002004:	e073      	b.n	80020ee <optiga_cmd_open_application_handler+0x12e>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	7e5b      	ldrb	r3, [r3, #25]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d005      	beq.n	800201a <optiga_cmd_open_application_handler+0x5a>
                if (OPTIGA_LIB_SUCCESS != optiga_cmd_restore_context(me))
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff faf7 	bl	8001602 <optiga_cmd_restore_context>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d168      	bne.n	80020ec <optiga_cmd_open_application_handler+0x12c>
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	7e59      	ldrb	r1, [r3, #25]
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	7e5b      	ldrb	r3, [r3, #25]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <optiga_cmd_open_application_handler+0x6a>
 8002026:	2210      	movs	r2, #16
 8002028:	e000      	b.n	800202c <optiga_cmd_open_application_handler+0x6c>
 800202a:	2218      	movs	r2, #24
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_OPEN_APPLICATION,
 8002032:	20f0      	movs	r0, #240	@ 0xf0
 8002034:	f7fe ff3d 	bl	8000eb2 <optiga_cmd_prepare_apdu_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	330d      	adds	r3, #13
 800203e:	3304      	adds	r3, #4
 8002040:	2210      	movs	r2, #16
 8002042:	492d      	ldr	r1, [pc, #180]	@ (80020f8 <optiga_cmd_open_application_handler+0x138>)
 8002044:	4618      	mov	r0, r3
 8002046:	f003 ffe3 	bl	8006010 <pal_os_memcpy>
            if (OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT != me->cmd_param)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	7e5b      	ldrb	r3, [r3, #25]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00b      	beq.n	800206a <optiga_cmd_open_application_handler+0xaa>
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f103 0021 	add.w	r0, r3, #33	@ 0x21
                              me->p_optiga->optiga_context_handle_buffer,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f203 6374 	addw	r3, r3, #1652	@ 0x674
                pal_os_memcpy(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8002062:	2208      	movs	r2, #8
 8002064:	4619      	mov	r1, r3
 8002066:	f003 ffd3 	bl	8006010 <pal_os_memcpy>
                                           ((OPTIGA_CMD_PARAM_INITIALIZE_APP_CONTEXT == me->cmd_param) ?
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7e5b      	ldrb	r3, [r3, #25]
            me->p_optiga->comms_tx_size = (OPTIGA_CMD_APDU_HEADER_SIZE +
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <optiga_cmd_open_application_handler+0xb6>
 8002072:	2214      	movs	r2, #20
 8002074:	e000      	b.n	8002078 <optiga_cmd_open_application_handler+0xb8>
 8002076:	221c      	movs	r2, #28
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	809a      	strh	r2, [r3, #4]
            pal_os_memset(me->p_optiga->optiga_context_handle_buffer,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f203 6374 	addw	r3, r3, #1652	@ 0x674
 8002086:	2208      	movs	r2, #8
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f003 ffcf 	bl	800602e <pal_os_memset>
            if (OPTIGA_LIB_PAL_DATA_STORE_NOT_CONFIGURED != me->optiga_context_datastore_id)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	8bdb      	ldrh	r3, [r3, #30]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d012      	beq.n	80020be <optiga_cmd_open_application_handler+0xfe>
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	8bd8      	ldrh	r0, [r3, #30]
                                                       me->p_optiga->optiga_context_handle_buffer,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f203 6374 	addw	r3, r3, #1652	@ 0x674
                return_status = pal_os_datastore_write(me->optiga_context_datastore_id,
 80020a4:	2208      	movs	r2, #8
 80020a6:	4619      	mov	r1, r3
 80020a8:	f003 fe04 	bl	8005cb4 <pal_os_datastore_write>
 80020ac:	4603      	mov	r3, r0
 80020ae:	81fb      	strh	r3, [r7, #14]
                if (PAL_STATUS_SUCCESS != return_status)
 80020b0:	89fb      	ldrh	r3, [r7, #14]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <optiga_cmd_open_application_handler+0xfe>
                    return_status = OPTIGA_CMD_ERROR;
 80020b6:	f240 2302 	movw	r3, #514	@ 0x202
 80020ba:	81fb      	strh	r3, [r7, #14]
                    break;
 80020bc:	e017      	b.n	80020ee <optiga_cmd_open_application_handler+0x12e>
            return_status = OPTIGA_LIB_SUCCESS;
 80020be:	2300      	movs	r3, #0
 80020c0:	81fb      	strh	r3, [r7, #14]
        break;
 80020c2:	e014      	b.n	80020ee <optiga_cmd_open_application_handler+0x12e>
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	7b5b      	ldrb	r3, [r3, #13]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00b      	beq.n	80020e6 <optiga_cmd_open_application_handler+0x126>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	7e9b      	ldrb	r3, [r3, #26]
 80020d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020d6:	b2da      	uxtb	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	769a      	strb	r2, [r3, #26]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7e9a      	ldrb	r2, [r3, #26]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	769a      	strb	r2, [r3, #26]
                break;
 80020e4:	e003      	b.n	80020ee <optiga_cmd_open_application_handler+0x12e>
            return_status = OPTIGA_LIB_SUCCESS;
 80020e6:	2300      	movs	r3, #0
 80020e8:	81fb      	strh	r3, [r7, #14]
        break;
 80020ea:	e000      	b.n	80020ee <optiga_cmd_open_application_handler+0x12e>
                    break;
 80020ec:	bf00      	nop
    }

    return (return_status);
 80020ee:	89fb      	ldrh	r3, [r7, #14]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	08008d18 	.word	0x08008d18

080020fc <optiga_cmd_open_application>:


optiga_lib_status_t optiga_cmd_open_application(optiga_cmd_t * me, uint8_t cmd_param, void * params)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af04      	add	r7, sp, #16
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	460b      	mov	r3, r1
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 800210a:	7af9      	ldrb	r1, [r7, #11]
 800210c:	23f0      	movs	r3, #240	@ 0xf0
 800210e:	9302      	str	r3, [sp, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	9301      	str	r3, [sp, #4]
 8002114:	2300      	movs	r3, #0
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	2300      	movs	r3, #0
 800211a:	4a04      	ldr	r2, [pc, #16]	@ (800212c <optiga_cmd_open_application+0x30>)
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f7fe ff28 	bl	8000f72 <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_COMMS_OPEN_ACQUIRE_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_OPEN_APPLICATION, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	08001fc1 	.word	0x08001fc1

08002130 <optiga_cmd_set_data_object_handler>:

/*
* Set Data Object handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_set_data_object_handler(optiga_cmd_t * me)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_set_data_object_params_t * p_optiga_write_data = (optiga_set_data_object_params_t *)me->p_input;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	613b      	str	r3, [r7, #16]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 800213e:	f240 2302 	movw	r3, #514	@ 0x202
 8002142:	82fb      	strh	r3, [r7, #22]
    uint16_t size_to_send;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8002144:	2304      	movs	r3, #4
 8002146:	81fb      	strh	r3, [r7, #14]

    switch ((uint8_t)me->cmd_next_execution_state)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	7d9b      	ldrb	r3, [r3, #22]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d003      	beq.n	8002158 <optiga_cmd_set_data_object_handler+0x28>
 8002150:	2b03      	cmp	r3, #3
 8002152:	f000 8084 	beq.w	800225e <optiga_cmd_set_data_object_handler+0x12e>
            OPTIGA_CMD_LOG_MESSAGE("Response of set data command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        default:
            break;
 8002156:	e096      	b.n	8002286 <optiga_cmd_set_data_object_handler+0x156>
            me->chaining_ongoing = FALSE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	761a      	strb	r2, [r3, #24]
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	89fb      	ldrh	r3, [r7, #14]
 8002164:	3308      	adds	r3, #8
 8002166:	4413      	add	r3, r2
 8002168:	1d5a      	adds	r2, r3, #5
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	889b      	ldrh	r3, [r3, #4]
 800216e:	4619      	mov	r1, r3
 8002170:	4610      	mov	r0, r2
 8002172:	f001 f969 	bl	8003448 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8002176:	89fb      	ldrh	r3, [r7, #14]
 8002178:	3302      	adds	r3, #2
 800217a:	81fb      	strh	r3, [r7, #14]
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	89fb      	ldrh	r3, [r7, #14]
 8002182:	3308      	adds	r3, #8
 8002184:	4413      	add	r3, r2
 8002186:	1d58      	adds	r0, r3, #5
                                     (p_optiga_write_data->offset + p_optiga_write_data->written_size));
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	88da      	ldrh	r2, [r3, #6]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	895b      	ldrh	r3, [r3, #10]
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8002190:	4413      	add	r3, r2
 8002192:	b29b      	uxth	r3, r3
 8002194:	4619      	mov	r1, r3
 8002196:	f001 f957 	bl	8003448 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800219a:	89fb      	ldrh	r3, [r7, #14]
 800219c:	3302      	adds	r3, #2
 800219e:	81fb      	strh	r3, [r7, #14]
            size_to_send = MIN((OPTIGA_MAX_COMMS_BUFFER_SIZE + OPTIGA_COMMS_DATA_OFFSET - index_for_data),
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	891b      	ldrh	r3, [r3, #8]
 80021a4:	461a      	mov	r2, r3
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	895b      	ldrh	r3, [r3, #10]
 80021aa:	1ad2      	subs	r2, r2, r3
 80021ac:	89fb      	ldrh	r3, [r7, #14]
 80021ae:	f5c3 63c2 	rsb	r3, r3, #1552	@ 0x610
 80021b2:	3305      	adds	r3, #5
 80021b4:	4293      	cmp	r3, r2
 80021b6:	bfa8      	it	ge
 80021b8:	4613      	movge	r3, r2
 80021ba:	81bb      	strh	r3, [r7, #12]
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 80021bc:	89bb      	ldrh	r3, [r7, #12]
 80021be:	3308      	adds	r3, #8
 80021c0:	817b      	strh	r3, [r7, #10]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 80021c2:	897b      	ldrh	r3, [r7, #10]
 80021c4:	f240 6215 	movw	r2, #1557	@ 0x615
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d903      	bls.n	80021d4 <optiga_cmd_set_data_object_handler+0xa4>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 80021cc:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80021d0:	82fb      	strh	r3, [r7, #22]
                break;
 80021d2:	e058      	b.n	8002286 <optiga_cmd_set_data_object_handler+0x156>
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7e59      	ldrb	r1, [r3, #25]
 80021d8:	89bb      	ldrh	r3, [r7, #12]
 80021da:	3304      	adds	r3, #4
 80021dc:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_SET_DATA_OBJECT,
 80021e4:	2082      	movs	r0, #130	@ 0x82
 80021e6:	f7fe fe64 	bl	8000eb2 <optiga_cmd_prepare_apdu_header>
            if (OPTIGA_UTIL_COUNT_DATA_OBJECT == me->cmd_param)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	7e5b      	ldrb	r3, [r3, #25]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d109      	bne.n	8002206 <optiga_cmd_set_data_object_handler+0xd6>
                *(me->p_optiga->optiga_comms_buffer + index_for_data) = p_optiga_write_data->count;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f103 020d 	add.w	r2, r3, #13
 80021fa:	89fb      	ldrh	r3, [r7, #14]
 80021fc:	4413      	add	r3, r2
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	7b92      	ldrb	r2, [r2, #14]
 8002202:	701a      	strb	r2, [r3, #0]
 8002204:	e00e      	b.n	8002224 <optiga_cmd_set_data_object_handler+0xf4>
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f103 020d 	add.w	r2, r3, #13
 800220e:	89fb      	ldrh	r3, [r7, #14]
 8002210:	18d0      	adds	r0, r2, r3
                              p_optiga_write_data->buffer + p_optiga_write_data->written_size,
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	8952      	ldrh	r2, [r2, #10]
 800221a:	4413      	add	r3, r2
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800221c:	89ba      	ldrh	r2, [r7, #12]
 800221e:	4619      	mov	r1, r3
 8002220:	f003 fef6 	bl	8006010 <pal_os_memcpy>
            p_optiga_write_data->written_size += size_to_send;
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	895a      	ldrh	r2, [r3, #10]
 8002228:	89bb      	ldrh	r3, [r7, #12]
 800222a:	4413      	add	r3, r2
 800222c:	b29a      	uxth	r2, r3
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	815a      	strh	r2, [r3, #10]
            me->p_optiga->comms_tx_size = (index_for_data + size_to_send - OPTIGA_COMMS_DATA_OFFSET);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	89f9      	ldrh	r1, [r7, #14]
 8002238:	89ba      	ldrh	r2, [r7, #12]
 800223a:	440a      	add	r2, r1
 800223c:	b292      	uxth	r2, r2
 800223e:	809a      	strh	r2, [r3, #4]
            if (p_optiga_write_data->written_size != p_optiga_write_data->size)
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	895a      	ldrh	r2, [r3, #10]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	891b      	ldrh	r3, [r3, #8]
 8002248:	429a      	cmp	r2, r3
 800224a:	d005      	beq.n	8002258 <optiga_cmd_set_data_object_handler+0x128>
                me->chaining_ongoing = TRUE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	761a      	strb	r2, [r3, #24]
                me->cmd_param = OPTIGA_CMD_WRITE_ONLY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	765a      	strb	r2, [r3, #25]
            return_status = OPTIGA_LIB_SUCCESS;
 8002258:	2300      	movs	r3, #0
 800225a:	82fb      	strh	r3, [r7, #22]
        break;
 800225c:	e013      	b.n	8002286 <optiga_cmd_set_data_object_handler+0x156>
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	7b5b      	ldrb	r3, [r3, #13]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00b      	beq.n	8002280 <optiga_cmd_set_data_object_handler+0x150>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7e9b      	ldrb	r3, [r3, #26]
 800226c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002270:	b2da      	uxtb	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	769a      	strb	r2, [r3, #26]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	7e9a      	ldrb	r2, [r3, #26]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	769a      	strb	r2, [r3, #26]
                break;
 800227e:	e002      	b.n	8002286 <optiga_cmd_set_data_object_handler+0x156>
            return_status = OPTIGA_LIB_SUCCESS;
 8002280:	2300      	movs	r3, #0
 8002282:	82fb      	strh	r3, [r7, #22]
        break;
 8002284:	bf00      	nop
    }
    return (return_status);
 8002286:	8afb      	ldrh	r3, [r7, #22]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <optiga_cmd_set_data_object>:


optiga_lib_status_t optiga_cmd_set_data_object(optiga_cmd_t * me, uint8_t cmd_param,
                                               optiga_set_data_object_params_t * params)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af04      	add	r7, sp, #16
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	460b      	mov	r3, r1
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 800229e:	7af9      	ldrb	r1, [r7, #11]
 80022a0:	2382      	movs	r3, #130	@ 0x82
 80022a2:	9302      	str	r3, [sp, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	9301      	str	r3, [sp, #4]
 80022a8:	2306      	movs	r3, #6
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	2302      	movs	r3, #2
 80022ae:	4a04      	ldr	r2, [pc, #16]	@ (80022c0 <optiga_cmd_set_data_object+0x30>)
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f7fe fe5e 	bl	8000f72 <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_SET_DATA_OBJECT, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	08002131 	.word	0x08002131

080022c4 <optiga_cmd_get_random_handler>:
#if defined (OPTIGA_CRYPT_RANDOM_ENABLED) || defined (OPTIGA_CRYPT_RSA_PRE_MASTER_SECRET_ENABLED) || defined (OPTIGA_CRYPT_GENERATE_AUTH_CODE_ENABLED)
/*
* Get Random handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_get_random_handler(optiga_cmd_t * me)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_get_random_params_t * p_random_params = (optiga_get_random_params_t *)me->p_input;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	613b      	str	r3, [r7, #16]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80022d2:	f240 2302 	movw	r3, #514	@ 0x202
 80022d6:	82fb      	strh	r3, [r7, #22]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 80022d8:	2304      	movs	r3, #4
 80022da:	81bb      	strh	r3, [r7, #12]

    switch ((uint8_t)me->cmd_next_execution_state)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	7d9b      	ldrb	r3, [r3, #22]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d002      	beq.n	80022ea <optiga_cmd_get_random_handler+0x26>
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d074      	beq.n	80023d2 <optiga_cmd_get_random_handler+0x10e>
            OPTIGA_CMD_LOG_MESSAGE("Response of get random command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        default:
            break;
 80022e8:	e096      	b.n	8002418 <optiga_cmd_get_random_handler+0x154>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80022ea:	2306      	movs	r3, #6
 80022ec:	81fb      	strh	r3, [r7, #14]
            total_apdu_length += ((TRUE == p_random_params->store_in_session) ?
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	7b1b      	ldrb	r3, [r3, #12]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d104      	bne.n	8002300 <optiga_cmd_get_random_handler+0x3c>
                                (OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_TAG_LENGTH_SIZE + p_random_params->optional_data_length) : 0x00);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	895b      	ldrh	r3, [r3, #10]
            total_apdu_length += ((TRUE == p_random_params->store_in_session) ?
 80022fa:	3305      	adds	r3, #5
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	e000      	b.n	8002302 <optiga_cmd_get_random_handler+0x3e>
 8002300:	2300      	movs	r3, #0
 8002302:	89fa      	ldrh	r2, [r7, #14]
 8002304:	4413      	add	r3, r2
 8002306:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8002308:	89fb      	ldrh	r3, [r7, #14]
 800230a:	f240 6215 	movw	r2, #1557	@ 0x615
 800230e:	4293      	cmp	r3, r2
 8002310:	d903      	bls.n	800231a <optiga_cmd_get_random_handler+0x56>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8002312:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002316:	82fb      	strh	r3, [r7, #22]
                break;
 8002318:	e07e      	b.n	8002418 <optiga_cmd_get_random_handler+0x154>
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	89bb      	ldrh	r3, [r7, #12]
 8002320:	3308      	adds	r3, #8
 8002322:	4413      	add	r3, r2
 8002324:	1d5a      	adds	r2, r3, #5
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	891b      	ldrh	r3, [r3, #8]
 800232a:	4619      	mov	r1, r3
 800232c:	4610      	mov	r0, r2
 800232e:	f001 f88b 	bl	8003448 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8002332:	89bb      	ldrh	r3, [r7, #12]
 8002334:	3302      	adds	r3, #2
 8002336:	b29b      	uxth	r3, r3
 8002338:	81bb      	strh	r3, [r7, #12]
            if (TRUE == p_random_params->store_in_session)
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	7b1b      	ldrb	r3, [r3, #12]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d135      	bne.n	80023ae <optiga_cmd_get_random_handler+0xea>
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),(me->session_oid));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	330d      	adds	r3, #13
 8002348:	89ba      	ldrh	r2, [r7, #12]
 800234a:	441a      	add	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	8a9b      	ldrh	r3, [r3, #20]
 8002350:	4619      	mov	r1, r3
 8002352:	4610      	mov	r0, r2
 8002354:	f001 f878 	bl	8003448 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8002358:	89bb      	ldrh	r3, [r7, #12]
 800235a:	3302      	adds	r3, #2
 800235c:	b29b      	uxth	r3, r3
 800235e:	81bb      	strh	r3, [r7, #12]
                                              ((NULL != p_random_params->optional_data) ?
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	685b      	ldr	r3, [r3, #4]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_RSA_PRE_MASTER_OPTIONAL_DATA_TAG,
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <optiga_cmd_get_random_handler+0xaa>
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	8959      	ldrh	r1, [r3, #10]
 800236c:	e000      	b.n	8002370 <optiga_cmd_get_random_handler+0xac>
 800236e:	2100      	movs	r1, #0
                                              me->p_optiga->optiga_comms_buffer,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_RSA_PRE_MASTER_OPTIONAL_DATA_TAG,
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	2041      	movs	r0, #65	@ 0x41
 800237e:	f7fe fdbb 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
                if ((NULL != p_random_params->optional_data))
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d011      	beq.n	80023ae <optiga_cmd_get_random_handler+0xea>
                    pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data, p_random_params->optional_data,
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	330d      	adds	r3, #13
 8002390:	89ba      	ldrh	r2, [r7, #12]
 8002392:	1898      	adds	r0, r3, r2
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	6859      	ldr	r1, [r3, #4]
                                  p_random_params->optional_data_length);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	895b      	ldrh	r3, [r3, #10]
                    pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data, p_random_params->optional_data,
 800239c:	461a      	mov	r2, r3
 800239e:	f003 fe37 	bl	8006010 <pal_os_memcpy>
                    index_for_data += p_random_params->optional_data_length;
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	895a      	ldrh	r2, [r3, #10]
 80023a6:	89bb      	ldrh	r3, [r7, #12]
 80023a8:	4413      	add	r3, r2
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	7e59      	ldrb	r1, [r3, #25]
 80023b2:	89bb      	ldrh	r3, [r7, #12]
 80023b4:	3b04      	subs	r3, #4
 80023b6:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GET_RANDOM,
 80023be:	208c      	movs	r0, #140	@ 0x8c
 80023c0:	f7fe fd77 	bl	8000eb2 <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = index_for_data - OPTIGA_COMMS_DATA_OFFSET;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	89ba      	ldrh	r2, [r7, #12]
 80023ca:	809a      	strh	r2, [r3, #4]
            return_status = OPTIGA_LIB_SUCCESS;
 80023cc:	2300      	movs	r3, #0
 80023ce:	82fb      	strh	r3, [r7, #22]
        break;
 80023d0:	e022      	b.n	8002418 <optiga_cmd_get_random_handler+0x154>
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	7b5b      	ldrb	r3, [r3, #13]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00b      	beq.n	80023f4 <optiga_cmd_get_random_handler+0x130>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	7e9b      	ldrb	r3, [r3, #26]
 80023e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	769a      	strb	r2, [r3, #26]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	7e9a      	ldrb	r2, [r3, #26]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	769a      	strb	r2, [r3, #26]
                break;
 80023f2:	e011      	b.n	8002418 <optiga_cmd_get_random_handler+0x154>
            if (OPTIGA_CMD_RANDOM_PARAM_TYPE_PRE_MASTER_SECRET != (uint8_t)me->cmd_param)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	7e5b      	ldrb	r3, [r3, #25]
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d00a      	beq.n	8002412 <optiga_cmd_get_random_handler+0x14e>
                pal_os_memcpy(p_random_params->random_data,
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	6818      	ldr	r0, [r3, #0]
                              me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	330d      	adds	r3, #13
                pal_os_memcpy(p_random_params->random_data,
 8002406:	1d19      	adds	r1, r3, #4
                              p_random_params->random_data_length);
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	891b      	ldrh	r3, [r3, #8]
                pal_os_memcpy(p_random_params->random_data,
 800240c:	461a      	mov	r2, r3
 800240e:	f003 fdff 	bl	8006010 <pal_os_memcpy>
            return_status = OPTIGA_LIB_SUCCESS;
 8002412:	2300      	movs	r3, #0
 8002414:	82fb      	strh	r3, [r7, #22]
        break;
 8002416:	bf00      	nop
    }

    return (return_status);
 8002418:	8afb      	ldrh	r3, [r7, #22]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <optiga_cmd_get_random>:


optiga_lib_status_t optiga_cmd_get_random(optiga_cmd_t * me, uint8_t cmd_param, optiga_get_random_params_t * params)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	@ 0x28
 8002428:	af04      	add	r7, sp, #16
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	460b      	mov	r3, r1
 800242e:	607a      	str	r2, [r7, #4]
 8002430:	72fb      	strb	r3, [r7, #11]
    optiga_cmd_sub_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
 8002432:	2306      	movs	r3, #6
 8002434:	75fb      	strb	r3, [r7, #23]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    if (TRUE == params->store_in_session)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	7b1b      	ldrb	r3, [r3, #12]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <optiga_cmd_get_random+0x1e>
    {
        cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
 800243e:	2305      	movs	r3, #5
 8002440:	75fb      	strb	r3, [r7, #23]
    }

    optiga_cmd_execute(me,
 8002442:	7af9      	ldrb	r1, [r7, #11]
 8002444:	238c      	movs	r3, #140	@ 0x8c
 8002446:	9302      	str	r3, [sp, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	7dfb      	ldrb	r3, [r7, #23]
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2302      	movs	r3, #2
 8002452:	4a04      	ldr	r2, [pc, #16]	@ (8002464 <optiga_cmd_get_random+0x40>)
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f7fe fd8c 	bl	8000f72 <optiga_cmd_execute>
                       cmd_handler_state,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_GET_RANDOM, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	080022c5 	.word	0x080022c5

08002468 <optiga_cmd_calc_sign_handler>:
#if defined (OPTIGA_CRYPT_ECDSA_SIGN_ENABLED) || defined (OPTIGA_CRYPT_RSA_SIGN_ENABLED)
/*
* CalcSign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_sign_handler(optiga_cmd_t * me)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_calc_sign_params_t * p_optiga_calc_sign = (optiga_calc_sign_params_t *)me->p_input;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	613b      	str	r3, [r7, #16]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8002476:	f240 2302 	movw	r3, #514	@ 0x202
 800247a:	82fb      	strh	r3, [r7, #22]
    uint16_t private_key_oid;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 800247c:	2304      	movs	r3, #4
 800247e:	81bb      	strh	r3, [r7, #12]

    switch ((uint8_t)me->cmd_next_execution_state)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	7d9b      	ldrb	r3, [r3, #22]
 8002484:	2b02      	cmp	r3, #2
 8002486:	d002      	beq.n	800248e <optiga_cmd_calc_sign_handler+0x26>
 8002488:	2b03      	cmp	r3, #3
 800248a:	d065      	beq.n	8002558 <optiga_cmd_calc_sign_handler+0xf0>
                *(p_optiga_calc_sign->p_signature_length) = 0x00;
            }
        }
        break;
        default:
            break;
 800248c:	e0a2      	b.n	80025d4 <optiga_cmd_calc_sign_handler+0x16c>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_calc_sign->digest_length +
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	7b9b      	ldrb	r3, [r3, #14]
 8002492:	330c      	adds	r3, #12
 8002494:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8002496:	89fb      	ldrh	r3, [r7, #14]
 8002498:	f240 6215 	movw	r2, #1557	@ 0x615
 800249c:	4293      	cmp	r3, r2
 800249e:	d907      	bls.n	80024b0 <optiga_cmd_calc_sign_handler+0x48>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 80024a0:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80024a4:	82fb      	strh	r3, [r7, #22]
                *(p_optiga_calc_sign->p_signature_length) = 0x00;
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2200      	movs	r2, #0
 80024ac:	801a      	strh	r2, [r3, #0]
                break;
 80024ae:	e091      	b.n	80025d4 <optiga_cmd_calc_sign_handler+0x16c>
                                          p_optiga_calc_sign->digest_length,
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	7b9b      	ldrb	r3, [r3, #14]
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_SIGN_DIGEST_TAG,
 80024b4:	4619      	mov	r1, r3
                                          me->p_optiga->optiga_comms_buffer,
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f103 020d 	add.w	r2, r3, #13
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_SIGN_DIGEST_TAG,
 80024be:	f107 030c 	add.w	r3, r7, #12
 80024c2:	2001      	movs	r0, #1
 80024c4:	f7fe fd18 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	330d      	adds	r3, #13
 80024ce:	89ba      	ldrh	r2, [r7, #12]
 80024d0:	1898      	adds	r0, r3, r2
                          p_optiga_calc_sign->p_digest,
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	6819      	ldr	r1, [r3, #0]
                          p_optiga_calc_sign->digest_length);
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	7b9b      	ldrb	r3, [r3, #14]
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80024da:	461a      	mov	r2, r3
 80024dc:	f003 fd98 	bl	8006010 <pal_os_memcpy>
            index_for_data += p_optiga_calc_sign->digest_length;
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	7b9b      	ldrb	r3, [r3, #14]
 80024e4:	461a      	mov	r2, r3
 80024e6:	89bb      	ldrh	r3, [r7, #12]
 80024e8:	4413      	add	r3, r2
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	81bb      	strh	r3, [r7, #12]
                                          me->p_optiga->optiga_comms_buffer,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f103 020d 	add.w	r2, r3, #13
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_SIGN_OID_TAG,
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	2102      	movs	r1, #2
 80024fc:	2003      	movs	r0, #3
 80024fe:	f7fe fcfb 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
            private_key_oid = me->session_oid;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	8a9b      	ldrh	r3, [r3, #20]
 8002506:	82bb      	strh	r3, [r7, #20]
            if (OPTIGA_KEY_ID_SESSION_BASED != p_optiga_calc_sign->private_key_oid)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	899b      	ldrh	r3, [r3, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <optiga_cmd_calc_sign_handler+0xae>
                private_key_oid = (uint16_t)p_optiga_calc_sign->private_key_oid;
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	899b      	ldrh	r3, [r3, #12]
 8002514:	82bb      	strh	r3, [r7, #20]
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	89bb      	ldrh	r3, [r7, #12]
 800251c:	3308      	adds	r3, #8
 800251e:	4413      	add	r3, r2
 8002520:	3305      	adds	r3, #5
 8002522:	8aba      	ldrh	r2, [r7, #20]
 8002524:	4611      	mov	r1, r2
 8002526:	4618      	mov	r0, r3
 8002528:	f000 ff8e 	bl	8003448 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800252c:	89bb      	ldrh	r3, [r7, #12]
 800252e:	3302      	adds	r3, #2
 8002530:	b29b      	uxth	r3, r3
 8002532:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SIGN,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	7e59      	ldrb	r1, [r3, #25]
 8002538:	89bb      	ldrh	r3, [r7, #12]
 800253a:	3b04      	subs	r3, #4
 800253c:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_SIGN,
 8002544:	20b1      	movs	r0, #177	@ 0xb1
 8002546:	f7fe fcb4 	bl	8000eb2 <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	89ba      	ldrh	r2, [r7, #12]
 8002550:	809a      	strh	r2, [r3, #4]
            return_status = OPTIGA_LIB_SUCCESS;
 8002552:	2300      	movs	r3, #0
 8002554:	82fb      	strh	r3, [r7, #22]
        break;
 8002556:	e03d      	b.n	80025d4 <optiga_cmd_calc_sign_handler+0x16c>
            if (OPTIGA_CMD_APDU_SUCCESS == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	7b5b      	ldrb	r3, [r3, #13]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d128      	bne.n	80025b4 <optiga_cmd_calc_sign_handler+0x14c>
                if ((*(p_optiga_calc_sign->p_signature_length)) <
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
                    (me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	88db      	ldrh	r3, [r3, #6]
 8002570:	3b04      	subs	r3, #4
                if ((*(p_optiga_calc_sign->p_signature_length)) <
 8002572:	429a      	cmp	r2, r3
 8002574:	da07      	bge.n	8002586 <optiga_cmd_calc_sign_handler+0x11e>
                    *(p_optiga_calc_sign->p_signature_length) = 0x00;
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2200      	movs	r2, #0
 800257c:	801a      	strh	r2, [r3, #0]
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800257e:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002582:	82fb      	strh	r3, [r7, #22]
        break;
 8002584:	e025      	b.n	80025d2 <optiga_cmd_calc_sign_handler+0x16a>
                    *(p_optiga_calc_sign->p_signature_length) = me->p_optiga->comms_rx_size - OPTIGA_CMD_APDU_HEADER_SIZE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	88da      	ldrh	r2, [r3, #6]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	3a04      	subs	r2, #4
 8002592:	b292      	uxth	r2, r2
 8002594:	801a      	strh	r2, [r3, #0]
                    pal_os_memcpy(p_optiga_calc_sign->p_signature,
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	6858      	ldr	r0, [r3, #4]
                                  me->p_optiga->optiga_comms_buffer + OPTIGA_CMD_APDU_INDATA_OFFSET,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	330d      	adds	r3, #13
                    pal_os_memcpy(p_optiga_calc_sign->p_signature,
 80025a0:	1d19      	adds	r1, r3, #4
                                  *(p_optiga_calc_sign->p_signature_length));
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	881b      	ldrh	r3, [r3, #0]
                    pal_os_memcpy(p_optiga_calc_sign->p_signature,
 80025a8:	461a      	mov	r2, r3
 80025aa:	f003 fd31 	bl	8006010 <pal_os_memcpy>
                    return_status = OPTIGA_LIB_SUCCESS;
 80025ae:	2300      	movs	r3, #0
 80025b0:	82fb      	strh	r3, [r7, #22]
        break;
 80025b2:	e00e      	b.n	80025d2 <optiga_cmd_calc_sign_handler+0x16a>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	7e9b      	ldrb	r3, [r3, #26]
 80025b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	769a      	strb	r2, [r3, #26]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	7e9a      	ldrb	r2, [r3, #26]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	769a      	strb	r2, [r3, #26]
                *(p_optiga_calc_sign->p_signature_length) = 0x00;
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2200      	movs	r2, #0
 80025d0:	801a      	strh	r2, [r3, #0]
        break;
 80025d2:	bf00      	nop
    }

    return (return_status);
 80025d4:	8afb      	ldrh	r3, [r7, #22]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <optiga_cmd_calc_sign>:


optiga_lib_status_t optiga_cmd_calc_sign(optiga_cmd_t * me, uint8_t cmd_param, optiga_calc_sign_params_t * params)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	@ 0x28
 80025e4:	af04      	add	r7, sp, #16
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	460b      	mov	r3, r1
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	72fb      	strb	r3, [r7, #11]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
 80025ee:	f240 2303 	movw	r3, #515	@ 0x203
 80025f2:	82fb      	strh	r3, [r7, #22]
    optiga_calc_sign_params_t * p_optiga_calc_sign = (optiga_calc_sign_params_t*)params;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	613b      	str	r3, [r7, #16]
    optiga_cmd_sub_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
 80025f8:	2306      	movs	r3, #6
 80025fa:	757b      	strb	r3, [r7, #21]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    do
    {
        if (OPTIGA_KEY_ID_SESSION_BASED == p_optiga_calc_sign->private_key_oid)
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	899b      	ldrh	r3, [r3, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d105      	bne.n	8002610 <optiga_cmd_calc_sign+0x30>
        {
            if (OPTIGA_CMD_ZERO_LENGTH_OR_VALUE == me->session_oid)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8a9b      	ldrh	r3, [r3, #20]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d010      	beq.n	800262e <optiga_cmd_calc_sign+0x4e>
            {
                break;
            }
            cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
 800260c:	2305      	movs	r3, #5
 800260e:	757b      	strb	r3, [r7, #21]
        }


        optiga_cmd_execute(me,
 8002610:	7af9      	ldrb	r1, [r7, #11]
 8002612:	23b1      	movs	r3, #177	@ 0xb1
 8002614:	9302      	str	r3, [sp, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	7d7b      	ldrb	r3, [r7, #21]
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2302      	movs	r3, #2
 8002620:	4a06      	ldr	r2, [pc, #24]	@ (800263c <optiga_cmd_calc_sign+0x5c>)
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f7fe fca5 	bl	8000f72 <optiga_cmd_execute>
                           cmd_handler_state,
                           params,
                           //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                           OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_CALC_SIGN, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

        return_status = OPTIGA_LIB_SUCCESS;
 8002628:	2300      	movs	r3, #0
 800262a:	82fb      	strh	r3, [r7, #22]
 800262c:	e000      	b.n	8002630 <optiga_cmd_calc_sign+0x50>
                break;
 800262e:	bf00      	nop
    } while (FALSE);
    return (return_status);
 8002630:	8afb      	ldrh	r3, [r7, #22]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	08002469 	.word	0x08002469

08002640 <optiga_cmd_verify_sign_handler>:
#if defined (OPTIGA_CRYPT_ECDSA_VERIFY_ENABLED) || defined (OPTIGA_CRYPT_RSA_VERIFY_ENABLED)
/*
* VerifySign handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_verify_sign_handler(optiga_cmd_t * me)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_verify_sign_params_t * p_optiga_verify_sign = (optiga_verify_sign_params_t *)me->p_input;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	613b      	str	r3, [r7, #16]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 800264e:	2304      	movs	r3, #4
 8002650:	81bb      	strh	r3, [r7, #12]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8002652:	f240 2302 	movw	r3, #514	@ 0x202
 8002656:	82fb      	strh	r3, [r7, #22]

    switch ((uint8_t)me->cmd_next_execution_state)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	7d9b      	ldrb	r3, [r3, #22]
 800265c:	2b02      	cmp	r3, #2
 800265e:	d003      	beq.n	8002668 <optiga_cmd_verify_sign_handler+0x28>
 8002660:	2b03      	cmp	r3, #3
 8002662:	f000 80c4 	beq.w	80027ee <optiga_cmd_verify_sign_handler+0x1ae>
            OPTIGA_CMD_LOG_MESSAGE("Response of veriy sign command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        default:
            break;
 8002666:	e0d6      	b.n	8002816 <optiga_cmd_verify_sign_handler+0x1d6>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	7c1b      	ldrb	r3, [r3, #16]
 800266c:	461a      	mov	r2, r3
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	899b      	ldrh	r3, [r3, #12]
 8002672:	4413      	add	r3, r2
 8002674:	b29a      	uxth	r2, r3
                                    (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type ?
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	7c5b      	ldrb	r3, [r3, #17]
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 800267a:	2b00      	cmp	r3, #0
 800267c:	d005      	beq.n	800268a <optiga_cmd_verify_sign_handler+0x4a>
                                     p_optiga_verify_sign->public_key->length));
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	889b      	ldrh	r3, [r3, #4]
                                    OPTIGA_CMD_TAG_LENGTH_SIZE + (p_optiga_verify_sign->signature_length) +
 8002684:	3309      	adds	r3, #9
 8002686:	b29b      	uxth	r3, r3
 8002688:	e000      	b.n	800268c <optiga_cmd_verify_sign_handler+0x4c>
 800268a:	2305      	movs	r3, #5
 800268c:	4413      	add	r3, r2
 800268e:	b29b      	uxth	r3, r3
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_verify_sign->digest_length +
 8002690:	330a      	adds	r3, #10
 8002692:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8002694:	89fb      	ldrh	r3, [r7, #14]
 8002696:	f240 6215 	movw	r2, #1557	@ 0x615
 800269a:	4293      	cmp	r3, r2
 800269c:	d903      	bls.n	80026a6 <optiga_cmd_verify_sign_handler+0x66>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 800269e:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80026a2:	82fb      	strh	r3, [r7, #22]
                break;
 80026a4:	e0b7      	b.n	8002816 <optiga_cmd_verify_sign_handler+0x1d6>
                                          p_optiga_verify_sign->digest_length,
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	7c1b      	ldrb	r3, [r3, #16]
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
 80026aa:	4619      	mov	r1, r3
                                          me->p_optiga->optiga_comms_buffer,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f103 020d 	add.w	r2, r3, #13
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_DIGEST_TAG,
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	2001      	movs	r0, #1
 80026ba:	f7fe fc1d 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	330d      	adds	r3, #13
 80026c4:	89ba      	ldrh	r2, [r7, #12]
 80026c6:	1898      	adds	r0, r3, r2
                          p_optiga_verify_sign->p_digest,
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	6819      	ldr	r1, [r3, #0]
                          p_optiga_verify_sign->digest_length);
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	7c1b      	ldrb	r3, [r3, #16]
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80026d0:	461a      	mov	r2, r3
 80026d2:	f003 fc9d 	bl	8006010 <pal_os_memcpy>
            index_for_data += p_optiga_verify_sign->digest_length;
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	7c1b      	ldrb	r3, [r3, #16]
 80026da:	461a      	mov	r2, r3
 80026dc:	89bb      	ldrh	r3, [r7, #12]
 80026de:	4413      	add	r3, r2
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	8999      	ldrh	r1, [r3, #12]
                                          me->p_optiga->optiga_comms_buffer,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f103 020d 	add.w	r2, r3, #13
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_SIGNATURE_TAG,
 80026f0:	f107 030c 	add.w	r3, r7, #12
 80026f4:	2002      	movs	r0, #2
 80026f6:	f7fe fbff 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	330d      	adds	r3, #13
 8002700:	89ba      	ldrh	r2, [r7, #12]
 8002702:	1898      	adds	r0, r3, r2
                          p_optiga_verify_sign->p_signature,
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	6859      	ldr	r1, [r3, #4]
                          p_optiga_verify_sign->signature_length);
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	899b      	ldrh	r3, [r3, #12]
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800270c:	461a      	mov	r2, r3
 800270e:	f003 fc7f 	bl	8006010 <pal_os_memcpy>
            index_for_data += p_optiga_verify_sign->signature_length;
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	899a      	ldrh	r2, [r3, #12]
 8002716:	89bb      	ldrh	r3, [r7, #12]
 8002718:	4413      	add	r3, r2
 800271a:	b29b      	uxth	r3, r3
 800271c:	81bb      	strh	r3, [r7, #12]
            if (OPTIGA_CRYPT_OID_DATA == p_optiga_verify_sign->public_key_source_type)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	7c5b      	ldrb	r3, [r3, #17]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d119      	bne.n	800275a <optiga_cmd_verify_sign_handler+0x11a>
                                              me->p_optiga->optiga_comms_buffer,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_SIGN_PUB_KEY_CERT_OID_TAG,
 800272e:	f107 030c 	add.w	r3, r7, #12
 8002732:	2102      	movs	r1, #2
 8002734:	2004      	movs	r0, #4
 8002736:	f7fe fbdf 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	330d      	adds	r3, #13
 8002740:	89ba      	ldrh	r2, [r7, #12]
 8002742:	441a      	add	r2, r3
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	89db      	ldrh	r3, [r3, #14]
 8002748:	4619      	mov	r1, r3
 800274a:	4610      	mov	r0, r2
 800274c:	f000 fe7c 	bl	8003448 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8002750:	89bb      	ldrh	r3, [r7, #12]
 8002752:	3302      	adds	r3, #2
 8002754:	b29b      	uxth	r3, r3
 8002756:	81bb      	strh	r3, [r7, #12]
 8002758:	e037      	b.n	80027ca <optiga_cmd_verify_sign_handler+0x18a>
                                              me->p_optiga->optiga_comms_buffer,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_ALGO_ID_TAG,
 8002762:	f107 030c 	add.w	r3, r7, #12
 8002766:	2101      	movs	r1, #1
 8002768:	2005      	movs	r0, #5
 800276a:	f7fe fbc5 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)p_optiga_verify_sign->public_key->key_type;
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f103 010d 	add.w	r1, r3, #13
 800277a:	89bb      	ldrh	r3, [r7, #12]
 800277c:	1c58      	adds	r0, r3, #1
 800277e:	b280      	uxth	r0, r0
 8002780:	81b8      	strh	r0, [r7, #12]
 8002782:	440b      	add	r3, r1
 8002784:	7992      	ldrb	r2, [r2, #6]
 8002786:	701a      	strb	r2, [r3, #0]
                                              p_optiga_verify_sign->public_key->length,
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	689b      	ldr	r3, [r3, #8]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 800278c:	8899      	ldrh	r1, [r3, #4]
                                              me->p_optiga->optiga_comms_buffer,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_VERIFY_PUBLIC_KEY_TAG,
 8002796:	f107 030c 	add.w	r3, r7, #12
 800279a:	2006      	movs	r0, #6
 800279c:	f7fe fbac 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	330d      	adds	r3, #13
 80027a6:	89ba      	ldrh	r2, [r7, #12]
 80027a8:	1898      	adds	r0, r3, r2
                              p_optiga_verify_sign->public_key->public_key,
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	6819      	ldr	r1, [r3, #0]
                              p_optiga_verify_sign->public_key->length);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	889b      	ldrh	r3, [r3, #4]
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80027b6:	461a      	mov	r2, r3
 80027b8:	f003 fc2a 	bl	8006010 <pal_os_memcpy>
                index_for_data += p_optiga_verify_sign->public_key->length;
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	889a      	ldrh	r2, [r3, #4]
 80027c2:	89bb      	ldrh	r3, [r7, #12]
 80027c4:	4413      	add	r3, r2
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	7e59      	ldrb	r1, [r3, #25]
 80027ce:	89bb      	ldrh	r3, [r7, #12]
 80027d0:	3b04      	subs	r3, #4
 80027d2:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_VERIFY_SIGN,
 80027da:	20b2      	movs	r0, #178	@ 0xb2
 80027dc:	f7fe fb69 	bl	8000eb2 <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	89ba      	ldrh	r2, [r7, #12]
 80027e6:	809a      	strh	r2, [r3, #4]
            return_status = OPTIGA_LIB_SUCCESS;
 80027e8:	2300      	movs	r3, #0
 80027ea:	82fb      	strh	r3, [r7, #22]
        break;
 80027ec:	e013      	b.n	8002816 <optiga_cmd_verify_sign_handler+0x1d6>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	7b5b      	ldrb	r3, [r3, #13]
 80027f4:	2bff      	cmp	r3, #255	@ 0xff
 80027f6:	d10b      	bne.n	8002810 <optiga_cmd_verify_sign_handler+0x1d0>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7e9b      	ldrb	r3, [r3, #26]
 80027fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002800:	b2da      	uxtb	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	769a      	strb	r2, [r3, #26]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	7e9a      	ldrb	r2, [r3, #26]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	769a      	strb	r2, [r3, #26]
                break;
 800280e:	e002      	b.n	8002816 <optiga_cmd_verify_sign_handler+0x1d6>
            return_status = OPTIGA_LIB_SUCCESS;
 8002810:	2300      	movs	r3, #0
 8002812:	82fb      	strh	r3, [r7, #22]
        break;
 8002814:	bf00      	nop
    }

    return (return_status);
 8002816:	8afb      	ldrh	r3, [r7, #22]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <optiga_cmd_verify_sign>:

optiga_lib_status_t optiga_cmd_verify_sign(optiga_cmd_t * me,
                                           uint8_t cmd_param,
                                           optiga_verify_sign_params_t * params)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af04      	add	r7, sp, #16
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	460b      	mov	r3, r1
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	72fb      	strb	r3, [r7, #11]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    optiga_cmd_execute(me,
 800282e:	7af9      	ldrb	r1, [r7, #11]
 8002830:	23b2      	movs	r3, #178	@ 0xb2
 8002832:	9302      	str	r3, [sp, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	2306      	movs	r3, #6
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	2302      	movs	r3, #2
 800283e:	4a04      	ldr	r2, [pc, #16]	@ (8002850 <optiga_cmd_verify_sign+0x30>)
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f7fe fb96 	bl	8000f72 <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_VERIFY_SIGN, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	08002641 	.word	0x08002641

08002854 <optiga_cmd_check_private_key_length>:
#endif //(OPTIGA_CRYPT_TLS_PRF_SHA256_ENABLED || OPTIGA_CRYPT_TLS_PRF_SHA384_ENABLED || OPTIGA_CRYPT_TLS_PRF_SHA512_ENABLED) || (OPTIGA_CRYPT_HKDF_ENABLED)

#if defined (OPTIGA_CRYPT_ECC_GENERATE_KEYPAIR_ENABLED) || defined (OPTIGA_CRYPT_RSA_GENERATE_KEYPAIR_ENABLED)

_STATIC_H uint16_t optiga_cmd_check_private_key_length(uint8_t algorithm)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	71fb      	strb	r3, [r7, #7]
    uint16_t priv_key_len = 0;    
 800285e:	2300      	movs	r3, #0
 8002860:	81fb      	strh	r3, [r7, #14]

    switch(algorithm)
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	2b42      	cmp	r3, #66	@ 0x42
 8002866:	d013      	beq.n	8002890 <optiga_cmd_check_private_key_length+0x3c>
 8002868:	2b42      	cmp	r3, #66	@ 0x42
 800286a:	dc15      	bgt.n	8002898 <optiga_cmd_check_private_key_length+0x44>
 800286c:	2b41      	cmp	r3, #65	@ 0x41
 800286e:	d00c      	beq.n	800288a <optiga_cmd_check_private_key_length+0x36>
 8002870:	2b41      	cmp	r3, #65	@ 0x41
 8002872:	dc11      	bgt.n	8002898 <optiga_cmd_check_private_key_length+0x44>
 8002874:	2b03      	cmp	r3, #3
 8002876:	d002      	beq.n	800287e <optiga_cmd_check_private_key_length+0x2a>
 8002878:	2b04      	cmp	r3, #4
 800287a:	d003      	beq.n	8002884 <optiga_cmd_check_private_key_length+0x30>
        {            
            priv_key_len = 0x104;
        }            
        break;            
        default:
        break;
 800287c:	e00c      	b.n	8002898 <optiga_cmd_check_private_key_length+0x44>
            priv_key_len = 0x22;
 800287e:	2322      	movs	r3, #34	@ 0x22
 8002880:	81fb      	strh	r3, [r7, #14]
        break;
 8002882:	e00a      	b.n	800289a <optiga_cmd_check_private_key_length+0x46>
            priv_key_len = 0x32;
 8002884:	2332      	movs	r3, #50	@ 0x32
 8002886:	81fb      	strh	r3, [r7, #14]
        break;
 8002888:	e007      	b.n	800289a <optiga_cmd_check_private_key_length+0x46>
            priv_key_len = 0x83;
 800288a:	2383      	movs	r3, #131	@ 0x83
 800288c:	81fb      	strh	r3, [r7, #14]
        break;
 800288e:	e004      	b.n	800289a <optiga_cmd_check_private_key_length+0x46>
            priv_key_len = 0x104;
 8002890:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002894:	81fb      	strh	r3, [r7, #14]
        break;            
 8002896:	e000      	b.n	800289a <optiga_cmd_check_private_key_length+0x46>
        break;
 8002898:	bf00      	nop
    }        

    return priv_key_len;
 800289a:	89fb      	ldrh	r3, [r7, #14]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <optiga_cmd_gen_keypair_handler>:

/*
* GenKeyPair handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_gen_keypair_handler(optiga_cmd_t * me)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_gen_keypair_params_t * p_optiga_gen_keypair = (optiga_gen_keypair_params_t *)me->p_input;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	61bb      	str	r3, [r7, #24]
    uint16_t header_offset;
    uint16_t private_key_length;
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 80028b6:	2304      	movs	r3, #4
 80028b8:	827b      	strh	r3, [r7, #18]
    uint16_t out_data_size;
    uint16_t public_key_length;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80028ba:	f240 2302 	movw	r3, #514	@ 0x202
 80028be:	83bb      	strh	r3, [r7, #28]

    switch ((uint8_t)me->cmd_next_execution_state)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	7d9b      	ldrb	r3, [r3, #22]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d002      	beq.n	80028ce <optiga_cmd_gen_keypair_handler+0x26>
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d06c      	beq.n	80029a6 <optiga_cmd_gen_keypair_handler+0xfe>
            }
            OPTIGA_CMD_LOG_MESSAGE("Response of generate keypair command is processed...");
        }
        break;
        default:
            break;
 80028cc:	e110      	b.n	8002af0 <optiga_cmd_gen_keypair_handler+0x248>
                                    (FALSE == p_optiga_gen_keypair->export_private_key ?
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	7cdb      	ldrb	r3, [r3, #19]
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE +
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <optiga_cmd_gen_keypair_handler+0x32>
 80028d6:	230d      	movs	r3, #13
 80028d8:	e000      	b.n	80028dc <optiga_cmd_gen_keypair_handler+0x34>
 80028da:	2307      	movs	r3, #7
 80028dc:	82fb      	strh	r3, [r7, #22]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 80028de:	8afb      	ldrh	r3, [r7, #22]
 80028e0:	f240 6215 	movw	r2, #1557	@ 0x615
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d907      	bls.n	80028f8 <optiga_cmd_gen_keypair_handler+0x50>
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 80028e8:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80028ec:	83bb      	strh	r3, [r7, #28]
                *p_optiga_gen_keypair->public_key_length = 0;
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	801a      	strh	r2, [r3, #0]
                break;
 80028f6:	e0fb      	b.n	8002af0 <optiga_cmd_gen_keypair_handler+0x248>
            if (FALSE == p_optiga_gen_keypair->export_private_key)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	7cdb      	ldrb	r3, [r3, #19]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d136      	bne.n	800296e <optiga_cmd_gen_keypair_handler+0xc6>
                                               me->p_optiga->optiga_comms_buffer,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header (OPTIGA_CMD_GEN_KEY_PAIR_PRIVATE_KEY_OID_TAG,
 8002908:	f107 0312 	add.w	r3, r7, #18
 800290c:	2102      	movs	r1, #2
 800290e:	2001      	movs	r0, #1
 8002910:	f7fe faf2 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	330d      	adds	r3, #13
 800291a:	8a7a      	ldrh	r2, [r7, #18]
 800291c:	441a      	add	r2, r3
                                         ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_gen_keypair->private_key_oid)?
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	8a1b      	ldrh	r3, [r3, #16]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 8002922:	2b00      	cmp	r3, #0
 8002924:	d102      	bne.n	800292c <optiga_cmd_gen_keypair_handler+0x84>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	8a9b      	ldrh	r3, [r3, #20]
 800292a:	e001      	b.n	8002930 <optiga_cmd_gen_keypair_handler+0x88>
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	8a1b      	ldrh	r3, [r3, #16]
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f000 fd88 	bl	8003448 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8002938:	8a7b      	ldrh	r3, [r7, #18]
 800293a:	3302      	adds	r3, #2
 800293c:	b29b      	uxth	r3, r3
 800293e:	827b      	strh	r3, [r7, #18]
                                               me->p_optiga->optiga_comms_buffer,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header (OPTIGA_CMD_GEN_KEY_PAIR_KEY_USAGE_TAG,
 8002948:	f107 0312 	add.w	r3, r7, #18
 800294c:	2101      	movs	r1, #1
 800294e:	2002      	movs	r0, #2
 8002950:	f7fe fad2 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = p_optiga_gen_keypair->key_usage;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f103 020d 	add.w	r2, r3, #13
 800295c:	8a7b      	ldrh	r3, [r7, #18]
 800295e:	1c59      	adds	r1, r3, #1
 8002960:	b289      	uxth	r1, r1
 8002962:	8279      	strh	r1, [r7, #18]
 8002964:	4413      	add	r3, r2
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	7c92      	ldrb	r2, [r2, #18]
 800296a:	701a      	strb	r2, [r3, #0]
 800296c:	e009      	b.n	8002982 <optiga_cmd_gen_keypair_handler+0xda>
                                               me->p_optiga->optiga_comms_buffer,
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header (OPTIGA_CMD_GEN_KEY_PAIR_EXPORT_KEY_TAG,
 8002976:	f107 0312 	add.w	r3, r7, #18
 800297a:	2100      	movs	r1, #0
 800297c:	2007      	movs	r0, #7
 800297e:	f7fe fabb 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GEN_KEYPAIR, me->cmd_param,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7e59      	ldrb	r1, [r3, #25]
 8002986:	8a7b      	ldrh	r3, [r7, #18]
 8002988:	3b04      	subs	r3, #4
 800298a:	b29a      	uxth	r2, r3
            me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_GEN_KEYPAIR, me->cmd_param,
 8002992:	20b8      	movs	r0, #184	@ 0xb8
 8002994:	f7fe fa8d 	bl	8000eb2 <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	8a7a      	ldrh	r2, [r7, #18]
 800299e:	809a      	strh	r2, [r3, #4]
            return_status = OPTIGA_LIB_SUCCESS;
 80029a0:	2300      	movs	r3, #0
 80029a2:	83bb      	strh	r3, [r7, #28]
        break;
 80029a4:	e0a4      	b.n	8002af0 <optiga_cmd_gen_keypair_handler+0x248>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	7b5b      	ldrb	r3, [r3, #13]
 80029ac:	2bff      	cmp	r3, #255	@ 0xff
 80029ae:	d10f      	bne.n	80029d0 <optiga_cmd_gen_keypair_handler+0x128>
                *p_optiga_gen_keypair->public_key_length = 0;
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	801a      	strh	r2, [r3, #0]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	7e9b      	ldrb	r3, [r3, #26]
 80029bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	769a      	strb	r2, [r3, #26]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7e9a      	ldrb	r2, [r3, #26]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	769a      	strb	r2, [r3, #26]
                break;
 80029ce:	e08f      	b.n	8002af0 <optiga_cmd_gen_keypair_handler+0x248>
            header_offset = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	83fb      	strh	r3, [r7, #30]
            optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET - OPTIGA_CMD_UINT16_SIZE_IN_BYTES],
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	330f      	adds	r3, #15
 80029da:	f107 0210 	add.w	r2, r7, #16
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 fd65 	bl	80034b0 <optiga_common_get_uint16>
            while (out_data_size > header_offset)
 80029e6:	e07c      	b.n	8002ae2 <optiga_cmd_gen_keypair_handler+0x23a>
                    me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset])
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	8bfb      	ldrh	r3, [r7, #30]
 80029ee:	3304      	adds	r3, #4
 80029f0:	4413      	add	r3, r2
 80029f2:	7b5b      	ldrb	r3, [r3, #13]
                if (OPTIGA_CMD_GEN_KEY_PAIR_PUBLIC_KEY_TAG ==
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d138      	bne.n	8002a6a <optiga_cmd_gen_keypair_handler+0x1c2>
                    optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681a      	ldr	r2, [r3, #0]
                                                header_offset + OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &public_key_length);
 80029fc:	8bfb      	ldrh	r3, [r7, #30]
 80029fe:	3305      	adds	r3, #5
                    optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8002a00:	3308      	adds	r3, #8
 8002a02:	4413      	add	r3, r2
 8002a04:	3305      	adds	r3, #5
 8002a06:	f107 020e 	add.w	r2, r7, #14
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 fd4f 	bl	80034b0 <optiga_common_get_uint16>
                    if (public_key_length > *p_optiga_gen_keypair->public_key_length)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	881a      	ldrh	r2, [r3, #0]
 8002a18:	89fb      	ldrh	r3, [r7, #14]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d207      	bcs.n	8002a2e <optiga_cmd_gen_keypair_handler+0x186>
                        return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8002a1e:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002a22:	83bb      	strh	r3, [r7, #28]
                        *p_optiga_gen_keypair->public_key_length = 0;
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	801a      	strh	r2, [r3, #0]
                        break;
 8002a2c:	e05f      	b.n	8002aee <optiga_cmd_gen_keypair_handler+0x246>
                    *p_optiga_gen_keypair->public_key_length = public_key_length;
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	89fa      	ldrh	r2, [r7, #14]
 8002a34:	801a      	strh	r2, [r3, #0]
                    pal_os_memcpy(p_optiga_gen_keypair->public_key,
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	6898      	ldr	r0, [r3, #8]
                                  &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset +
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681a      	ldr	r2, [r3, #0]
                                   OPTIGA_CMD_UINT16_SIZE_IN_BYTES + OPTIGA_CMD_NO_OF_BYTES_IN_TAG],
 8002a3e:	8bfb      	ldrh	r3, [r7, #30]
 8002a40:	3307      	adds	r3, #7
                                  &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset +
 8002a42:	3308      	adds	r3, #8
 8002a44:	4413      	add	r3, r2
 8002a46:	1d59      	adds	r1, r3, #5
                                   *p_optiga_gen_keypair->public_key_length);
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	881b      	ldrh	r3, [r3, #0]
                    pal_os_memcpy(p_optiga_gen_keypair->public_key,
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f003 fade 	bl	8006010 <pal_os_memcpy>
                                        *p_optiga_gen_keypair->public_key_length;
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	881a      	ldrh	r2, [r3, #0]
                    header_offset +=  (uint16_t)OPTIGA_CMD_UINT16_SIZE_IN_BYTES+ OPTIGA_CMD_NO_OF_BYTES_IN_TAG +
 8002a5a:	8bfb      	ldrh	r3, [r7, #30]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3303      	adds	r3, #3
 8002a62:	83fb      	strh	r3, [r7, #30]
                    return_status = OPTIGA_LIB_SUCCESS;
 8002a64:	2300      	movs	r3, #0
 8002a66:	83bb      	strh	r3, [r7, #28]
 8002a68:	e03b      	b.n	8002ae2 <optiga_cmd_gen_keypair_handler+0x23a>
                else if ((OPTIGA_CMD_GEN_KEY_PAIR_PRIVATE_KEY_TAG == me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	8bfb      	ldrh	r3, [r7, #30]
 8002a70:	3304      	adds	r3, #4
 8002a72:	4413      	add	r3, r2
 8002a74:	7b5b      	ldrb	r3, [r3, #13]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d139      	bne.n	8002aee <optiga_cmd_gen_keypair_handler+0x246>
                                                             header_offset]) && (FALSE != p_optiga_gen_keypair->export_private_key))
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	7cdb      	ldrb	r3, [r3, #19]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d035      	beq.n	8002aee <optiga_cmd_gen_keypair_handler+0x246>
                    optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681a      	ldr	r2, [r3, #0]
                                             + OPTIGA_CMD_NO_OF_BYTES_IN_TAG], &private_key_length);
 8002a86:	8bfb      	ldrh	r3, [r7, #30]
 8002a88:	3305      	adds	r3, #5
                    optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset
 8002a8a:	3308      	adds	r3, #8
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3305      	adds	r3, #5
 8002a90:	f107 0214 	add.w	r2, r7, #20
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fd0a 	bl	80034b0 <optiga_common_get_uint16>
                    if( private_key_length != optiga_cmd_check_private_key_length(me->cmd_param))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	7e5b      	ldrb	r3, [r3, #25]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fed7 	bl	8002854 <optiga_cmd_check_private_key_length>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	8abb      	ldrh	r3, [r7, #20]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d003      	beq.n	8002ab8 <optiga_cmd_gen_keypair_handler+0x210>
                        return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8002ab0:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002ab4:	83bb      	strh	r3, [r7, #28]
                        break;
 8002ab6:	e01a      	b.n	8002aee <optiga_cmd_gen_keypair_handler+0x246>
                    pal_os_memcpy(p_optiga_gen_keypair->private_key,
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	6818      	ldr	r0, [r3, #0]
                                  &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset +
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681a      	ldr	r2, [r3, #0]
                                  OPTIGA_CMD_UINT16_SIZE_IN_BYTES+ OPTIGA_CMD_NO_OF_BYTES_IN_TAG], private_key_length);
 8002ac0:	8bfb      	ldrh	r3, [r7, #30]
 8002ac2:	3307      	adds	r3, #7
                                  &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + header_offset +
 8002ac4:	3308      	adds	r3, #8
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3305      	adds	r3, #5
                    pal_os_memcpy(p_optiga_gen_keypair->private_key,
 8002aca:	8aba      	ldrh	r2, [r7, #20]
 8002acc:	4619      	mov	r1, r3
 8002ace:	f003 fa9f 	bl	8006010 <pal_os_memcpy>
                    header_offset +=  OPTIGA_CMD_UINT16_SIZE_IN_BYTES+ OPTIGA_CMD_NO_OF_BYTES_IN_TAG + private_key_length;
 8002ad2:	8aba      	ldrh	r2, [r7, #20]
 8002ad4:	8bfb      	ldrh	r3, [r7, #30]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3303      	adds	r3, #3
 8002adc:	83fb      	strh	r3, [r7, #30]
                    return_status = OPTIGA_LIB_SUCCESS;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	83bb      	strh	r3, [r7, #28]
            while (out_data_size > header_offset)
 8002ae2:	8a3b      	ldrh	r3, [r7, #16]
 8002ae4:	8bfa      	ldrh	r2, [r7, #30]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	f4ff af7e 	bcc.w	80029e8 <optiga_cmd_gen_keypair_handler+0x140>
        break;
 8002aec:	e7ff      	b.n	8002aee <optiga_cmd_gen_keypair_handler+0x246>
 8002aee:	bf00      	nop
    }

    return (return_status);
 8002af0:	8bbb      	ldrh	r3, [r7, #28]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3720      	adds	r7, #32
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <optiga_cmd_gen_keypair>:

optiga_lib_status_t optiga_cmd_gen_keypair(optiga_cmd_t * me, uint8_t cmd_param, optiga_gen_keypair_params_t * params)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	@ 0x28
 8002b00:	af04      	add	r7, sp, #16
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	460b      	mov	r3, r1
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	72fb      	strb	r3, [r7, #11]
    optiga_gen_keypair_params_t * p_optiga_gen_keypair = (optiga_gen_keypair_params_t*)params;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	617b      	str	r3, [r7, #20]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);

    if ((OPTIGA_KEY_ID_SESSION_BASED == p_optiga_gen_keypair->private_key_oid)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	8a1b      	ldrh	r3, [r3, #16]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d110      	bne.n	8002b38 <optiga_cmd_gen_keypair+0x3c>
        && (FALSE == p_optiga_gen_keypair->export_private_key))
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	7cdb      	ldrb	r3, [r3, #19]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10c      	bne.n	8002b38 <optiga_cmd_gen_keypair+0x3c>
    {
        optiga_cmd_execute(me,
 8002b1e:	7af9      	ldrb	r1, [r7, #11]
 8002b20:	23b8      	movs	r3, #184	@ 0xb8
 8002b22:	9302      	str	r3, [sp, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	2305      	movs	r3, #5
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8002b5c <optiga_cmd_gen_keypair+0x60>)
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f7fe fa1e 	bl	8000f72 <optiga_cmd_execute>
 8002b36:	e00b      	b.n	8002b50 <optiga_cmd_gen_keypair+0x54>
                           //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                           OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_GEN_KEYPAIR, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));
    }
    else
    {
        optiga_cmd_execute(me,
 8002b38:	7af9      	ldrb	r1, [r7, #11]
 8002b3a:	23b8      	movs	r3, #184	@ 0xb8
 8002b3c:	9302      	str	r3, [sp, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	2306      	movs	r3, #6
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	2302      	movs	r3, #2
 8002b48:	4a04      	ldr	r2, [pc, #16]	@ (8002b5c <optiga_cmd_gen_keypair+0x60>)
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f7fe fa11 	bl	8000f72 <optiga_cmd_execute>
                           params,
                           //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                           OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_GEN_KEYPAIR, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));
    }

    return (OPTIGA_LIB_SUCCESS);
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	080028a9 	.word	0x080028a9

08002b60 <optiga_cmd_encrypt_asym_handler>:

/*
* EncryptAsym handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_encrypt_asym_handler(optiga_cmd_t * me)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_encrypt_asym_params_t * p_optiga_encrypt_asym = (optiga_encrypt_asym_params_t *)me->p_input;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	613b      	str	r3, [r7, #16]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8002b6e:	2304      	movs	r3, #4
 8002b70:	81fb      	strh	r3, [r7, #14]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8002b72:	f240 2302 	movw	r3, #514	@ 0x202
 8002b76:	82bb      	strh	r3, [r7, #20]
    uint16_t out_data_size;

#define PUBLIC_KEY_HOST ((public_key_from_host_t *)(p_optiga_encrypt_asym->key))

    switch ((uint8_t)me->cmd_next_execution_state)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	7d9b      	ldrb	r3, [r3, #22]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d003      	beq.n	8002b88 <optiga_cmd_encrypt_asym_handler+0x28>
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	f000 80d2 	beq.w	8002d2a <optiga_cmd_encrypt_asym_handler+0x1ca>
            OPTIGA_CMD_LOG_MESSAGE("Response of asymmetric encryption command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        default:
            break;
 8002b86:	e10c      	b.n	8002da2 <optiga_cmd_encrypt_asym_handler+0x242>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + (OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES) + (OPTIGA_CMD_TAG_LENGTH_SIZE +
 8002b88:	230e      	movs	r3, #14
 8002b8a:	82fb      	strh	r3, [r7, #22]
            if (NULL != p_optiga_encrypt_asym->message)
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d006      	beq.n	8002ba2 <optiga_cmd_encrypt_asym_handler+0x42>
                total_apdu_length += (p_optiga_encrypt_asym->message_length - OPTIGA_CMD_UINT16_SIZE_IN_BYTES);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	8a1a      	ldrh	r2, [r3, #16]
 8002b98:	8afb      	ldrh	r3, [r7, #22]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	3b02      	subs	r3, #2
 8002ba0:	82fb      	strh	r3, [r7, #22]
            if (p_optiga_encrypt_asym->public_key_source_type)
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	7d1b      	ldrb	r3, [r3, #20]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <optiga_cmd_encrypt_asym_handler+0x60>
                total_apdu_length += (OPTIGA_CMD_TAG_LENGTH_SIZE +(PUBLIC_KEY_HOST->length));
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	889a      	ldrh	r2, [r3, #4]
 8002bb0:	8afb      	ldrh	r3, [r7, #22]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3303      	adds	r3, #3
 8002bb8:	82fb      	strh	r3, [r7, #22]
                total_apdu_length--;
 8002bba:	8afb      	ldrh	r3, [r7, #22]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	82fb      	strh	r3, [r7, #22]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8002bc0:	8afb      	ldrh	r3, [r7, #22]
 8002bc2:	f240 6215 	movw	r2, #1557	@ 0x615
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d907      	bls.n	8002bda <optiga_cmd_encrypt_asym_handler+0x7a>
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8002bd2:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002bd6:	82bb      	strh	r3, [r7, #20]
                break;
 8002bd8:	e0e3      	b.n	8002da2 <optiga_cmd_encrypt_asym_handler+0x242>
            if ((NULL == p_optiga_encrypt_asym->message) && (0 == p_optiga_encrypt_asym->message_length))
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d11d      	bne.n	8002c1e <optiga_cmd_encrypt_asym_handler+0xbe>
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	8a1b      	ldrh	r3, [r3, #16]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d119      	bne.n	8002c1e <optiga_cmd_encrypt_asym_handler+0xbe>
                                              me->p_optiga->optiga_comms_buffer,
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_SESSION_OID_TAG,
 8002bf2:	f107 030e 	add.w	r3, r7, #14
 8002bf6:	2102      	movs	r1, #2
 8002bf8:	2002      	movs	r0, #2
 8002bfa:	f7fe f97d 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data ), (me->session_oid));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	330d      	adds	r3, #13
 8002c04:	89fa      	ldrh	r2, [r7, #14]
 8002c06:	441a      	add	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	8a9b      	ldrh	r3, [r3, #20]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4610      	mov	r0, r2
 8002c10:	f000 fc1a 	bl	8003448 <optiga_common_set_uint16>
                index_for_data += 2;
 8002c14:	89fb      	ldrh	r3, [r7, #14]
 8002c16:	3302      	adds	r3, #2
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	81fb      	strh	r3, [r7, #14]
 8002c1c:	e01c      	b.n	8002c58 <optiga_cmd_encrypt_asym_handler+0xf8>
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_MESSAGE_TAG,
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	8a19      	ldrh	r1, [r3, #16]
                                              me->p_optiga->optiga_comms_buffer,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_MESSAGE_TAG,
 8002c2a:	f107 030e 	add.w	r3, r7, #14
 8002c2e:	2061      	movs	r0, #97	@ 0x61
 8002c30:	f7fe f962 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	330d      	adds	r3, #13
 8002c3a:	89fa      	ldrh	r2, [r7, #14]
 8002c3c:	1898      	adds	r0, r3, r2
                                p_optiga_encrypt_asym->message,
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	68d9      	ldr	r1, [r3, #12]
                                p_optiga_encrypt_asym->message_length);
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	8a1b      	ldrh	r3, [r3, #16]
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8002c46:	461a      	mov	r2, r3
 8002c48:	f003 f9e2 	bl	8006010 <pal_os_memcpy>
                index_for_data += p_optiga_encrypt_asym->message_length;
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	8a1a      	ldrh	r2, [r3, #16]
 8002c50:	89fb      	ldrh	r3, [r7, #14]
 8002c52:	4413      	add	r3, r2
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	81fb      	strh	r3, [r7, #14]
            if (p_optiga_encrypt_asym->public_key_source_type)
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	7d1b      	ldrb	r3, [r3, #20]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d038      	beq.n	8002cd2 <optiga_cmd_encrypt_asym_handler+0x172>
                                              me->p_optiga->optiga_comms_buffer,
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_ALGO_ID_TAG,
 8002c68:	f107 030e 	add.w	r3, r7, #14
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	2005      	movs	r0, #5
 8002c70:	f7fe f942 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = (uint8_t)PUBLIC_KEY_HOST->key_type;
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f103 010d 	add.w	r1, r3, #13
 8002c80:	89fb      	ldrh	r3, [r7, #14]
 8002c82:	1c58      	adds	r0, r3, #1
 8002c84:	b280      	uxth	r0, r0
 8002c86:	81f8      	strh	r0, [r7, #14]
 8002c88:	440b      	add	r3, r1
 8002c8a:	7992      	ldrb	r2, [r2, #6]
 8002c8c:	701a      	strb	r2, [r3, #0]
                                              PUBLIC_KEY_HOST->length,
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	685b      	ldr	r3, [r3, #4]
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_PUBLIC_KEY_TAG,
 8002c92:	8899      	ldrh	r1, [r3, #4]
                                              me->p_optiga->optiga_comms_buffer,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_PUBLIC_KEY_TAG,
 8002c9c:	f107 030e 	add.w	r3, r7, #14
 8002ca0:	2006      	movs	r0, #6
 8002ca2:	f7fe f929 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	330d      	adds	r3, #13
 8002cac:	89fa      	ldrh	r2, [r7, #14]
 8002cae:	1898      	adds	r0, r3, r2
                              PUBLIC_KEY_HOST->public_key,
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	6819      	ldr	r1, [r3, #0]
                              PUBLIC_KEY_HOST->length);
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	889b      	ldrh	r3, [r3, #4]
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f003 f9a7 	bl	8006010 <pal_os_memcpy>
                index_for_data += PUBLIC_KEY_HOST->length;
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	889a      	ldrh	r2, [r3, #4]
 8002cc8:	89fb      	ldrh	r3, [r7, #14]
 8002cca:	4413      	add	r3, r2
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	81fb      	strh	r3, [r7, #14]
 8002cd0:	e019      	b.n	8002d06 <optiga_cmd_encrypt_asym_handler+0x1a6>
                                              me->p_optiga->optiga_comms_buffer,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_TAG,
 8002cda:	f107 030e 	add.w	r3, r7, #14
 8002cde:	2102      	movs	r1, #2
 8002ce0:	2004      	movs	r0, #4
 8002ce2:	f7fe f909 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
                optiga_common_set_uint16(me->p_optiga->optiga_comms_buffer + index_for_data,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	330d      	adds	r3, #13
 8002cec:	89fa      	ldrh	r2, [r7, #14]
 8002cee:	441a      	add	r2, r3
                                        *((uint16_t * )(p_optiga_encrypt_asym->key)));
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	685b      	ldr	r3, [r3, #4]
                optiga_common_set_uint16(me->p_optiga->optiga_comms_buffer + index_for_data,
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	f000 fba5 	bl	8003448 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_ENCRYPT_ASYM_PUB_KEY_CERT_OID_LENGTH;
 8002cfe:	89fb      	ldrh	r3, [r7, #14]
 8002d00:	3302      	adds	r3, #2
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	81fb      	strh	r3, [r7, #14]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_ENCRYPT_ASYM,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	7e59      	ldrb	r1, [r3, #25]
 8002d0a:	89fb      	ldrh	r3, [r7, #14]
 8002d0c:	3b04      	subs	r3, #4
 8002d0e:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_ENCRYPT_ASYM,
 8002d16:	209e      	movs	r0, #158	@ 0x9e
 8002d18:	f7fe f8cb 	bl	8000eb2 <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	89fa      	ldrh	r2, [r7, #14]
 8002d22:	809a      	strh	r2, [r3, #4]
            return_status = OPTIGA_LIB_SUCCESS;
 8002d24:	2300      	movs	r3, #0
 8002d26:	82bb      	strh	r3, [r7, #20]
        break;
 8002d28:	e03b      	b.n	8002da2 <optiga_cmd_encrypt_asym_handler+0x242>
            if (OPTIGA_CMD_APDU_SUCCESS != me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	7b5b      	ldrb	r3, [r3, #13]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00f      	beq.n	8002d54 <optiga_cmd_encrypt_asym_handler+0x1f4>
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	801a      	strh	r2, [r3, #0]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	7e9b      	ldrb	r3, [r3, #26]
 8002d40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	769a      	strb	r2, [r3, #26]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	7e9a      	ldrb	r2, [r3, #26]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	769a      	strb	r2, [r3, #26]
                break;
 8002d52:	e026      	b.n	8002da2 <optiga_cmd_encrypt_asym_handler+0x242>
            optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_NO_OF_BYTES_IN_TAG],
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3312      	adds	r3, #18
 8002d5a:	f107 020c 	add.w	r2, r7, #12
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fba5 	bl	80034b0 <optiga_common_get_uint16>
            if ((*(p_optiga_encrypt_asym->processed_message_length )) < out_data_size)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	881a      	ldrh	r2, [r3, #0]
 8002d6c:	89bb      	ldrh	r3, [r7, #12]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d207      	bcs.n	8002d82 <optiga_cmd_encrypt_asym_handler+0x222>
                *(p_optiga_encrypt_asym->processed_message_length) = 0;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2200      	movs	r2, #0
 8002d78:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8002d7a:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002d7e:	82bb      	strh	r3, [r7, #20]
                break;
 8002d80:	e00f      	b.n	8002da2 <optiga_cmd_encrypt_asym_handler+0x242>
            pal_os_memcpy(p_optiga_encrypt_asym->processed_message,
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	6898      	ldr	r0, [r3, #8]
                          &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	3314      	adds	r3, #20
            pal_os_memcpy(p_optiga_encrypt_asym->processed_message,
 8002d8c:	89ba      	ldrh	r2, [r7, #12]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f003 f93e 	bl	8006010 <pal_os_memcpy>
            *(p_optiga_encrypt_asym->processed_message_length) = out_data_size ;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	89ba      	ldrh	r2, [r7, #12]
 8002d9a:	801a      	strh	r2, [r3, #0]
            return_status = OPTIGA_LIB_SUCCESS;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	82bb      	strh	r3, [r7, #20]
        break;
 8002da0:	bf00      	nop
    }

    return (return_status);
 8002da2:	8abb      	ldrh	r3, [r7, #20]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <optiga_cmd_encrypt_asym>:

optiga_lib_status_t optiga_cmd_encrypt_asym(optiga_cmd_t * me, uint8_t cmd_param, optiga_encrypt_asym_params_t * params)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08a      	sub	sp, #40	@ 0x28
 8002db0:	af04      	add	r7, sp, #16
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	460b      	mov	r3, r1
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	72fb      	strb	r3, [r7, #11]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR_INVALID_INPUT;
 8002dba:	f240 2303 	movw	r3, #515	@ 0x203
 8002dbe:	82fb      	strh	r3, [r7, #22]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);

    // for encrypting session data, instance must have session.
    if (((NULL == params->message) && (0 == params->message_length) && (0x0000 != me->session_oid)) ||
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d107      	bne.n	8002dd8 <optiga_cmd_encrypt_asym+0x2c>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	8a1b      	ldrh	r3, [r3, #16]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d103      	bne.n	8002dd8 <optiga_cmd_encrypt_asym+0x2c>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8a9b      	ldrh	r3, [r3, #20]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d103      	bne.n	8002de0 <optiga_cmd_encrypt_asym+0x34>
        (NULL != params->message))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
    if (((NULL == params->message) && (0 == params->message_length) && (0x0000 != me->session_oid)) ||
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00d      	beq.n	8002dfc <optiga_cmd_encrypt_asym+0x50>
    {
        optiga_cmd_execute(me,
 8002de0:	7af9      	ldrb	r1, [r7, #11]
 8002de2:	239e      	movs	r3, #158	@ 0x9e
 8002de4:	9302      	str	r3, [sp, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	9301      	str	r3, [sp, #4]
 8002dea:	2306      	movs	r3, #6
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	2302      	movs	r3, #2
 8002df0:	4a05      	ldr	r2, [pc, #20]	@ (8002e08 <optiga_cmd_encrypt_asym+0x5c>)
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f7fe f8bd 	bl	8000f72 <optiga_cmd_execute>
                           OPTIGA_CMD_EXEC_REQUEST_LOCK,
                           params,
                           //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                           OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_ENCRYPT_ASYM, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

        return_status = OPTIGA_LIB_SUCCESS;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	82fb      	strh	r3, [r7, #22]
    }
    return (return_status);
 8002dfc:	8afb      	ldrh	r3, [r7, #22]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	08002b61 	.word	0x08002b61

08002e0c <optiga_cmd_decrypt_asym_handler>:

/*
* EncryptAsym handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_decrypt_asym_handler(optiga_cmd_t * me)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
    uint16_t total_apdu_length;
    optiga_decrypt_asym_params_t * p_optiga_decrypt_asym = (optiga_decrypt_asym_params_t *)me->p_input;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	613b      	str	r3, [r7, #16]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8002e1a:	f240 2302 	movw	r3, #514	@ 0x202
 8002e1e:	82fb      	strh	r3, [r7, #22]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 8002e20:	2304      	movs	r3, #4
 8002e22:	81bb      	strh	r3, [r7, #12]
    uint16_t out_data_size;

    switch ((uint8_t)me->cmd_next_execution_state)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	7d9b      	ldrb	r3, [r3, #22]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d003      	beq.n	8002e34 <optiga_cmd_decrypt_asym_handler+0x28>
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	f000 808f 	beq.w	8002f50 <optiga_cmd_decrypt_asym_handler+0x144>
            OPTIGA_CMD_LOG_MESSAGE("Response of asymmetric decryption command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        default:
            break;
 8002e32:	e0d5      	b.n	8002fe0 <optiga_cmd_decrypt_asym_handler+0x1d4>
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_decrypt_asym->message_length +
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	8a1b      	ldrh	r3, [r3, #16]
                                ((NULL != p_optiga_decrypt_asym->processed_message) &&
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	6892      	ldr	r2, [r2, #8]
                                OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 8002e3c:	2a00      	cmp	r2, #0
 8002e3e:	d005      	beq.n	8002e4c <optiga_cmd_decrypt_asym_handler+0x40>
                                (NULL != p_optiga_decrypt_asym->processed_message_length)
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	6812      	ldr	r2, [r2, #0]
                                ((NULL != p_optiga_decrypt_asym->processed_message) &&
 8002e44:	2a00      	cmp	r2, #0
 8002e46:	d001      	beq.n	8002e4c <optiga_cmd_decrypt_asym_handler+0x40>
                                OPTIGA_CMD_TAG_LENGTH_SIZE + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 8002e48:	2200      	movs	r2, #0
 8002e4a:	e000      	b.n	8002e4e <optiga_cmd_decrypt_asym_handler+0x42>
 8002e4c:	2205      	movs	r2, #5
 8002e4e:	4413      	add	r3, r2
 8002e50:	b29b      	uxth	r3, r3
            total_apdu_length = OPTIGA_CMD_APDU_HEADER_SIZE + OPTIGA_CMD_TAG_LENGTH_SIZE + p_optiga_decrypt_asym->message_length +
 8002e52:	330c      	adds	r3, #12
 8002e54:	81fb      	strh	r3, [r7, #14]
            if (OPTIGA_MAX_COMMS_BUFFER_SIZE < total_apdu_length)
 8002e56:	89fb      	ldrh	r3, [r7, #14]
 8002e58:	f240 6215 	movw	r2, #1557	@ 0x615
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d90b      	bls.n	8002e78 <optiga_cmd_decrypt_asym_handler+0x6c>
                if (NULL != p_optiga_decrypt_asym->processed_message_length)
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <optiga_cmd_decrypt_asym_handler+0x64>
                    *(p_optiga_decrypt_asym->processed_message_length) = 0;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	801a      	strh	r2, [r3, #0]
                return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8002e70:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002e74:	82fb      	strh	r3, [r7, #22]
                break;
 8002e76:	e0b3      	b.n	8002fe0 <optiga_cmd_decrypt_asym_handler+0x1d4>
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_DECRYPT_ASYM_ENCRYPT_MESSAGE_TAG,
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	8a19      	ldrh	r1, [r3, #16]
                                          me->p_optiga->optiga_comms_buffer,
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f103 020d 	add.w	r2, r3, #13
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_DECRYPT_ASYM_ENCRYPT_MESSAGE_TAG,
 8002e84:	f107 030c 	add.w	r3, r7, #12
 8002e88:	2061      	movs	r0, #97	@ 0x61
 8002e8a:	f7fe f835 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	330d      	adds	r3, #13
 8002e94:	89ba      	ldrh	r2, [r7, #12]
 8002e96:	1898      	adds	r0, r3, r2
                          p_optiga_decrypt_asym->message,
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	68d9      	ldr	r1, [r3, #12]
                          p_optiga_decrypt_asym->message_length);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	8a1b      	ldrh	r3, [r3, #16]
            pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	f003 f8b5 	bl	8006010 <pal_os_memcpy>
            index_for_data += p_optiga_decrypt_asym->message_length;
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	8a1a      	ldrh	r2, [r3, #16]
 8002eaa:	89bb      	ldrh	r3, [r7, #12]
 8002eac:	4413      	add	r3, r2
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	81bb      	strh	r3, [r7, #12]
                                          me->p_optiga->optiga_comms_buffer,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f103 020d 	add.w	r2, r3, #13
            optiga_cmd_prepare_tag_header(OPTIGA_CMD_DECRYPT_ASYM_DECRYPT_KEY_TAG,
 8002eba:	f107 030c 	add.w	r3, r7, #12
 8002ebe:	2102      	movs	r1, #2
 8002ec0:	2003      	movs	r0, #3
 8002ec2:	f7fe f819 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	89bb      	ldrh	r3, [r7, #12]
 8002ecc:	3308      	adds	r3, #8
 8002ece:	4413      	add	r3, r2
 8002ed0:	1d5a      	adds	r2, r3, #5
                                     (uint16_t)*((optiga_key_id_t*)p_optiga_decrypt_asym->key));
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	685b      	ldr	r3, [r3, #4]
            optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4610      	mov	r0, r2
 8002edc:	f000 fab4 	bl	8003448 <optiga_common_set_uint16>
            index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8002ee0:	89bb      	ldrh	r3, [r7, #12]
 8002ee2:	3302      	adds	r3, #2
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	81bb      	strh	r3, [r7, #12]
            if ((NULL == p_optiga_decrypt_asym->processed_message) &&
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d11d      	bne.n	8002f2c <optiga_cmd_decrypt_asym_handler+0x120>
                (NULL == p_optiga_decrypt_asym->processed_message_length))
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	681b      	ldr	r3, [r3, #0]
            if ((NULL == p_optiga_decrypt_asym->processed_message) &&
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d119      	bne.n	8002f2c <optiga_cmd_decrypt_asym_handler+0x120>
                                              me->p_optiga->optiga_comms_buffer,
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CMD_DECRYPT_ASYM_SESSION_OID_TAG,
 8002f00:	f107 030c 	add.w	r3, r7, #12
 8002f04:	2102      	movs	r1, #2
 8002f06:	2002      	movs	r0, #2
 8002f08:	f7fd fff6 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
                optiga_common_set_uint16(&me->p_optiga->optiga_comms_buffer[index_for_data],
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	89bb      	ldrh	r3, [r7, #12]
 8002f12:	3308      	adds	r3, #8
 8002f14:	4413      	add	r3, r2
 8002f16:	1d5a      	adds	r2, r3, #5
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	8a9b      	ldrh	r3, [r3, #20]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f000 fa92 	bl	8003448 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8002f24:	89bb      	ldrh	r3, [r7, #12]
 8002f26:	3302      	adds	r3, #2
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	81bb      	strh	r3, [r7, #12]
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_DECRYPT_ASYM,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	7e59      	ldrb	r1, [r3, #25]
 8002f30:	89bb      	ldrh	r3, [r7, #12]
 8002f32:	3b04      	subs	r3, #4
 8002f34:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_DECRYPT_ASYM,
 8002f3c:	209f      	movs	r0, #159	@ 0x9f
 8002f3e:	f7fd ffb8 	bl	8000eb2 <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	89ba      	ldrh	r2, [r7, #12]
 8002f48:	809a      	strh	r2, [r3, #4]
            return_status = OPTIGA_LIB_SUCCESS;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	82fb      	strh	r3, [r7, #22]
        break;
 8002f4e:	e047      	b.n	8002fe0 <optiga_cmd_decrypt_asym_handler+0x1d4>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	7b5b      	ldrb	r3, [r3, #13]
 8002f56:	2bff      	cmp	r3, #255	@ 0xff
 8002f58:	d113      	bne.n	8002f82 <optiga_cmd_decrypt_asym_handler+0x176>
                if (NULL != p_optiga_decrypt_asym->processed_message_length)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <optiga_cmd_decrypt_asym_handler+0x15e>
                    *p_optiga_decrypt_asym->processed_message_length = 0;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2200      	movs	r2, #0
 8002f68:	801a      	strh	r2, [r3, #0]
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	7e9b      	ldrb	r3, [r3, #26]
 8002f6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	769a      	strb	r2, [r3, #26]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	7e9a      	ldrb	r2, [r3, #26]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	769a      	strb	r2, [r3, #26]
                break;
 8002f80:	e02e      	b.n	8002fe0 <optiga_cmd_decrypt_asym_handler+0x1d4>
            if ((NULL != p_optiga_decrypt_asym->processed_message) &&
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d027      	beq.n	8002fda <optiga_cmd_decrypt_asym_handler+0x1ce>
                (NULL != p_optiga_decrypt_asym->processed_message_length))
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	681b      	ldr	r3, [r3, #0]
            if ((NULL != p_optiga_decrypt_asym->processed_message) &&
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d023      	beq.n	8002fda <optiga_cmd_decrypt_asym_handler+0x1ce>
                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3312      	adds	r3, #18
 8002f98:	f107 020a 	add.w	r2, r7, #10
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fa86 	bl	80034b0 <optiga_common_get_uint16>
                if ((*(p_optiga_decrypt_asym->processed_message_length )) < out_data_size)
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	881a      	ldrh	r2, [r3, #0]
 8002faa:	897b      	ldrh	r3, [r7, #10]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d207      	bcs.n	8002fc0 <optiga_cmd_decrypt_asym_handler+0x1b4>
                    *(p_optiga_decrypt_asym->processed_message_length) = 0;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	801a      	strh	r2, [r3, #0]
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 8002fb8:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8002fbc:	82fb      	strh	r3, [r7, #22]
                    break;
 8002fbe:	e00f      	b.n	8002fe0 <optiga_cmd_decrypt_asym_handler+0x1d4>
                pal_os_memcpy(p_optiga_decrypt_asym->processed_message,
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	6898      	ldr	r0, [r3, #8]
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_TAG_LENGTH_SIZE],
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	3314      	adds	r3, #20
                pal_os_memcpy(p_optiga_decrypt_asym->processed_message,
 8002fca:	897a      	ldrh	r2, [r7, #10]
 8002fcc:	4619      	mov	r1, r3
 8002fce:	f003 f81f 	bl	8006010 <pal_os_memcpy>
                *p_optiga_decrypt_asym->processed_message_length = out_data_size;
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	897a      	ldrh	r2, [r7, #10]
 8002fd8:	801a      	strh	r2, [r3, #0]
            return_status = OPTIGA_LIB_SUCCESS;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	82fb      	strh	r3, [r7, #22]
        break;
 8002fde:	bf00      	nop
    }

    return (return_status);
 8002fe0:	8afb      	ldrh	r3, [r7, #22]
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <optiga_cmd_decrypt_asym>:

optiga_lib_status_t optiga_cmd_decrypt_asym(optiga_cmd_t * me, uint8_t cmd_param, optiga_decrypt_asym_params_t * params)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	@ 0x28
 8002ff0:	af04      	add	r7, sp, #16
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	72fb      	strb	r3, [r7, #11]
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 8002ffa:	f240 2302 	movw	r3, #514	@ 0x202
 8002ffe:	82bb      	strh	r3, [r7, #20]
    optiga_decrypt_asym_params_t * p_optiga_decrypt_asym = (optiga_decrypt_asym_params_t*)params;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	613b      	str	r3, [r7, #16]
    optiga_cmd_sub_state_t cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_LOCK;
 8003004:	2306      	movs	r3, #6
 8003006:	75fb      	strb	r3, [r7, #23]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);
    do
    {
        if ((NULL == p_optiga_decrypt_asym->processed_message) &&
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d105      	bne.n	800301c <optiga_cmd_decrypt_asym+0x30>
            (NULL == p_optiga_decrypt_asym->processed_message_length))
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	681b      	ldr	r3, [r3, #0]
        if ((NULL == p_optiga_decrypt_asym->processed_message) &&
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <optiga_cmd_decrypt_asym+0x30>
        {
            cmd_handler_state = OPTIGA_CMD_EXEC_REQUEST_SESSION;
 8003018:	2305      	movs	r3, #5
 800301a:	75fb      	strb	r3, [r7, #23]
        }
        optiga_cmd_execute(me,
 800301c:	7af9      	ldrb	r1, [r7, #11]
 800301e:	239f      	movs	r3, #159	@ 0x9f
 8003020:	9302      	str	r3, [sp, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	9301      	str	r3, [sp, #4]
 8003026:	7dfb      	ldrb	r3, [r7, #23]
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	2302      	movs	r3, #2
 800302c:	4a05      	ldr	r2, [pc, #20]	@ (8003044 <optiga_cmd_decrypt_asym+0x58>)
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f7fd ff9f 	bl	8000f72 <optiga_cmd_execute>
                           cmd_handler_state,
                           params,
                           //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                           OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_DECRYPT_ASYM, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

        return_status = OPTIGA_LIB_SUCCESS;
 8003034:	2300      	movs	r3, #0
 8003036:	82bb      	strh	r3, [r7, #20]
    } while (FALSE);
    return (return_status);
 8003038:	8abb      	ldrh	r3, [r7, #20]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3718      	adds	r7, #24
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	08002e0d 	.word	0x08002e0d

08003048 <optiga_cmd_calc_hash_set_current_hash_sequence>:
#endif // OPTIGA_CRYPT_RSA_DECRYPT_ENABLED

#ifdef OPTIGA_CRYPT_HASH_ENABLED

_STATIC_H void optiga_cmd_calc_hash_set_current_hash_sequence(const optiga_cmd_t * me)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	60fb      	str	r3, [r7, #12]
    uint32_t apparent_comms_buffer_size = (OPTIGA_MAX_COMMS_BUFFER_SIZE - (OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_HASH_HEADER_SIZE \
 8003056:	f44f 63c1 	mov.w	r3, #1544	@ 0x608
 800305a:	60bb      	str	r3, [r7, #8]
                                          + OPTIGA_CMD_INTERMEDIATE_CONTEXT_HEADER));

    p_optiga_calc_hash->current_hash_sequence = p_optiga_calc_hash->hash_sequence;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	7e1a      	ldrb	r2, [r3, #24]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	765a      	strb	r2, [r3, #25]

    // Check for hash sequence as S&F
    if(OPTIGA_CRYPT_HASH_START_FINAL == p_optiga_calc_hash->hash_sequence)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	7e1b      	ldrb	r3, [r3, #24]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d11d      	bne.n	80030a8 <optiga_cmd_calc_hash_set_current_hash_sequence+0x60>
    {
        // Calculate the apparent comms buffer size and compare with hash data length
        if(apparent_comms_buffer_size < p_optiga_calc_hash->p_hash_data->length)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	429a      	cmp	r2, r3
 8003076:	d217      	bcs.n	80030a8 <optiga_cmd_calc_hash_set_current_hash_sequence+0x60>
        {
            // sent data is 0 hence change the hash sequence to S
            if( 0 == p_optiga_calc_hash->data_sent)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d103      	bne.n	8003088 <optiga_cmd_calc_hash_set_current_hash_sequence+0x40>
            {
                p_optiga_calc_hash->current_hash_sequence = OPTIGA_CRYPT_HASH_START;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	765a      	strb	r2, [r3, #25]
            {
                p_optiga_calc_hash->current_hash_sequence = OPTIGA_CRYPT_HASH_FINAL;
            }
        }
    }
}
 8003086:	e00f      	b.n	80030a8 <optiga_cmd_calc_hash_set_current_hash_sequence+0x60>
            else if((p_optiga_calc_hash->data_sent + apparent_comms_buffer_size) < p_optiga_calc_hash->p_hash_data->length)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	441a      	add	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	429a      	cmp	r2, r3
 8003098:	d203      	bcs.n	80030a2 <optiga_cmd_calc_hash_set_current_hash_sequence+0x5a>
                p_optiga_calc_hash->current_hash_sequence = OPTIGA_CRYPT_HASH_CONTINUE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2202      	movs	r2, #2
 800309e:	765a      	strb	r2, [r3, #25]
}
 80030a0:	e002      	b.n	80030a8 <optiga_cmd_calc_hash_set_current_hash_sequence+0x60>
                p_optiga_calc_hash->current_hash_sequence = OPTIGA_CRYPT_HASH_FINAL;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2203      	movs	r2, #3
 80030a6:	765a      	strb	r2, [r3, #25]
}
 80030a8:	bf00      	nop
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <optiga_cmd_check_hash_alg_length>:

_STATIC_H uint16_t optiga_cmd_check_hash_alg_length(uint8_t algo_identifier)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	71fb      	strb	r3, [r7, #7]
    uint16_t hash_output_len = 0;    
 80030be:	2300      	movs	r3, #0
 80030c0:	81fb      	strh	r3, [r7, #14]

    switch(algo_identifier)
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	2be2      	cmp	r3, #226	@ 0xe2
 80030c6:	d102      	bne.n	80030ce <optiga_cmd_check_hash_alg_length+0x1a>
    {

        case OPTIGA_HASH_TYPE_SHA_256:
        {
            hash_output_len = 0x20;
 80030c8:	2320      	movs	r3, #32
 80030ca:	81fb      	strh	r3, [r7, #14]
        }
        break;
 80030cc:	e000      	b.n	80030d0 <optiga_cmd_check_hash_alg_length+0x1c>
        default:
        break;
 80030ce:	bf00      	nop
    }        

    return hash_output_len;
 80030d0:	89fb      	ldrh	r3, [r7, #14]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <optiga_cmd_calc_hash_handler>:

/*
* CalCHash handler
*/
_STATIC_H optiga_lib_status_t optiga_cmd_calc_hash_handler(optiga_cmd_t * me)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b086      	sub	sp, #24
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t *)me->p_input;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	613b      	str	r3, [r7, #16]
    uint16_t index_for_data = OPTIGA_CMD_APDU_INDATA_OFFSET;
 80030ec:	2304      	movs	r3, #4
 80030ee:	817b      	strh	r3, [r7, #10]
    uint16_t out_data_size;
    uint32_t length_to_hash;
    optiga_lib_status_t return_status = OPTIGA_CMD_ERROR;
 80030f0:	f240 2302 	movw	r3, #514	@ 0x202
 80030f4:	82fb      	strh	r3, [r7, #22]


    switch ((uint8_t)me->cmd_next_execution_state)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	7d9b      	ldrb	r3, [r3, #22]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d003      	beq.n	8003106 <optiga_cmd_calc_hash_handler+0x28>
 80030fe:	2b03      	cmp	r3, #3
 8003100:	f000 8108 	beq.w	8003314 <optiga_cmd_calc_hash_handler+0x236>
            OPTIGA_CMD_LOG_MESSAGE("Response of calculate hash command is processed...");
            return_status = OPTIGA_LIB_SUCCESS;
        }
        break;
        default:
            break;
 8003104:	e17b      	b.n	80033fe <optiga_cmd_calc_hash_handler+0x320>
            optiga_cmd_calc_hash_set_current_hash_sequence(me);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff ff9e 	bl	8003048 <optiga_cmd_calc_hash_set_current_hash_sequence>
            me->chaining_ongoing = FALSE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	761a      	strb	r2, [r3, #24]
            if (NULL != p_optiga_calc_hash->p_hash_data)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d052      	beq.n	80031c0 <optiga_cmd_calc_hash_handler+0xe2>
                length_to_hash = MIN(((OPTIGA_MAX_COMMS_BUFFER_SIZE - (index_for_data + OPTIGA_CMD_HASH_HEADER_SIZE + OPTIGA_CMD_INTERMEDIATE_CONTEXT_HEADER)) -
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	1ad2      	subs	r2, r2, r3
 8003126:	897b      	ldrh	r3, [r7, #10]
 8003128:	4619      	mov	r1, r3
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	440b      	add	r3, r1
 8003130:	f5c3 63c1 	rsb	r3, r3, #1544	@ 0x608
 8003134:	3304      	adds	r3, #4
 8003136:	4293      	cmp	r3, r2
 8003138:	bf28      	it	cs
 800313a:	4613      	movcs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = p_optiga_calc_hash->current_hash_sequence;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f103 020d 	add.w	r2, r3, #13
 8003146:	897b      	ldrh	r3, [r7, #10]
 8003148:	1c59      	adds	r1, r3, #1
 800314a:	b289      	uxth	r1, r1
 800314c:	8179      	strh	r1, [r7, #10]
 800314e:	4413      	add	r3, r2
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	7e52      	ldrb	r2, [r2, #25]
 8003154:	701a      	strb	r2, [r3, #0]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data), length_to_hash);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	330d      	adds	r3, #13
 800315c:	897a      	ldrh	r2, [r7, #10]
 800315e:	4413      	add	r3, r2
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	b292      	uxth	r2, r2
 8003164:	4611      	mov	r1, r2
 8003166:	4618      	mov	r0, r3
 8003168:	f000 f96e 	bl	8003448 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 800316c:	897b      	ldrh	r3, [r7, #10]
 800316e:	3302      	adds	r3, #2
 8003170:	b29b      	uxth	r3, r3
 8003172:	817b      	strh	r3, [r7, #10]
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	330d      	adds	r3, #13
 800317a:	897a      	ldrh	r2, [r7, #10]
 800317c:	1898      	adds	r0, r3, r2
                              p_optiga_calc_hash->p_hash_data->buffer + p_optiga_calc_hash->data_sent,
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	4413      	add	r3, r2
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4619      	mov	r1, r3
 800318e:	f002 ff3f 	bl	8006010 <pal_os_memcpy>
                index_for_data += length_to_hash;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	b29a      	uxth	r2, r3
 8003196:	897b      	ldrh	r3, [r7, #10]
 8003198:	4413      	add	r3, r2
 800319a:	b29b      	uxth	r3, r3
 800319c:	817b      	strh	r3, [r7, #10]
                p_optiga_calc_hash->data_sent += length_to_hash;
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	441a      	add	r2, r3
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	611a      	str	r2, [r3, #16]
                if (p_optiga_calc_hash->data_sent != p_optiga_calc_hash->p_hash_data->length)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	691a      	ldr	r2, [r3, #16]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d04e      	beq.n	8003256 <optiga_cmd_calc_hash_handler+0x178>
                    me->chaining_ongoing = TRUE;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	761a      	strb	r2, [r3, #24]
 80031be:	e04a      	b.n	8003256 <optiga_cmd_calc_hash_handler+0x178>
            else if (NULL != p_optiga_calc_hash->p_hash_oid)
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d03b      	beq.n	8003240 <optiga_cmd_calc_hash_handler+0x162>
                optiga_cmd_prepare_tag_header(p_optiga_calc_hash->current_hash_sequence,
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	7e58      	ldrb	r0, [r3, #25]
                                              me->p_optiga->optiga_comms_buffer,
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(p_optiga_calc_hash->current_hash_sequence,
 80031d4:	f107 030a 	add.w	r3, r7, #10
 80031d8:	2106      	movs	r1, #6
 80031da:	f7fd fe8d 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	330d      	adds	r3, #13
 80031e4:	897a      	ldrh	r2, [r7, #10]
 80031e6:	441a      	add	r2, r3
                                          p_optiga_calc_hash->p_hash_oid->oid);
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	681b      	ldr	r3, [r3, #0]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	4619      	mov	r1, r3
 80031f0:	4610      	mov	r0, r2
 80031f2:	f000 f929 	bl	8003448 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 80031f6:	897b      	ldrh	r3, [r7, #10]
 80031f8:	3302      	adds	r3, #2
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	817b      	strh	r3, [r7, #10]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	330d      	adds	r3, #13
 8003204:	897a      	ldrh	r2, [r7, #10]
 8003206:	441a      	add	r2, r3
                                          p_optiga_calc_hash->p_hash_oid->offset);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	681b      	ldr	r3, [r3, #0]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 800320c:	885b      	ldrh	r3, [r3, #2]
 800320e:	4619      	mov	r1, r3
 8003210:	4610      	mov	r0, r2
 8003212:	f000 f919 	bl	8003448 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8003216:	897b      	ldrh	r3, [r7, #10]
 8003218:	3302      	adds	r3, #2
 800321a:	b29b      	uxth	r3, r3
 800321c:	817b      	strh	r3, [r7, #10]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	330d      	adds	r3, #13
 8003224:	897a      	ldrh	r2, [r7, #10]
 8003226:	441a      	add	r2, r3
                                          p_optiga_calc_hash->p_hash_oid->length);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	681b      	ldr	r3, [r3, #0]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 800322c:	889b      	ldrh	r3, [r3, #4]
 800322e:	4619      	mov	r1, r3
 8003230:	4610      	mov	r0, r2
 8003232:	f000 f909 	bl	8003448 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8003236:	897b      	ldrh	r3, [r7, #10]
 8003238:	3302      	adds	r3, #2
 800323a:	b29b      	uxth	r3, r3
 800323c:	817b      	strh	r3, [r7, #10]
 800323e:	e00a      	b.n	8003256 <optiga_cmd_calc_hash_handler+0x178>
                optiga_cmd_prepare_tag_header (p_optiga_calc_hash->current_hash_sequence,
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	7e58      	ldrb	r0, [r3, #25]
                                               me->p_optiga->optiga_comms_buffer,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header (p_optiga_calc_hash->current_hash_sequence,
 800324c:	f107 030a 	add.w	r3, r7, #10
 8003250:	2100      	movs	r1, #0
 8003252:	f7fd fe51 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
            if ((NULL != p_optiga_calc_hash->p_hash_context) &&
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d036      	beq.n	80032cc <optiga_cmd_calc_hash_handler+0x1ee>
                (0 != p_optiga_calc_hash->apparent_context_size))
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	695b      	ldr	r3, [r3, #20]
            if ((NULL != p_optiga_calc_hash->p_hash_context) &&
 8003262:	2b00      	cmp	r3, #0
 8003264:	d032      	beq.n	80032cc <optiga_cmd_calc_hash_handler+0x1ee>
                *(me->p_optiga->optiga_comms_buffer + index_for_data++) = OPTIGA_CRYPT_INTERMEDIATE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f103 020d 	add.w	r2, r3, #13
 800326e:	897b      	ldrh	r3, [r7, #10]
 8003270:	1c59      	adds	r1, r3, #1
 8003272:	b289      	uxth	r1, r1
 8003274:	8179      	strh	r1, [r7, #10]
 8003276:	4413      	add	r3, r2
 8003278:	2206      	movs	r2, #6
 800327a:	701a      	strb	r2, [r3, #0]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	330d      	adds	r3, #13
 8003282:	897a      	ldrh	r2, [r7, #10]
 8003284:	441a      	add	r2, r3
                                          p_optiga_calc_hash->p_hash_context->context_buffer_length);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	689b      	ldr	r3, [r3, #8]
                optiga_common_set_uint16((me->p_optiga->optiga_comms_buffer + index_for_data),
 800328a:	889b      	ldrh	r3, [r3, #4]
 800328c:	4619      	mov	r1, r3
 800328e:	4610      	mov	r0, r2
 8003290:	f000 f8da 	bl	8003448 <optiga_common_set_uint16>
                index_for_data += OPTIGA_CMD_UINT16_SIZE_IN_BYTES;
 8003294:	897b      	ldrh	r3, [r7, #10]
 8003296:	3302      	adds	r3, #2
 8003298:	b29b      	uxth	r3, r3
 800329a:	817b      	strh	r3, [r7, #10]
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	330d      	adds	r3, #13
 80032a2:	897a      	ldrh	r2, [r7, #10]
 80032a4:	1898      	adds	r0, r3, r2
                              p_optiga_calc_hash->p_hash_context->context_buffer,
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	6819      	ldr	r1, [r3, #0]
                              p_optiga_calc_hash->p_hash_context->context_buffer_length);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	889b      	ldrh	r3, [r3, #4]
                pal_os_memcpy(me->p_optiga->optiga_comms_buffer + index_for_data,
 80032b2:	461a      	mov	r2, r3
 80032b4:	f002 feac 	bl	8006010 <pal_os_memcpy>
                index_for_data += p_optiga_calc_hash->p_hash_context->context_buffer_length;
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	889a      	ldrh	r2, [r3, #4]
 80032be:	897b      	ldrh	r3, [r7, #10]
 80032c0:	4413      	add	r3, r2
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	817b      	strh	r3, [r7, #10]
                p_optiga_calc_hash->apparent_context_size = 0;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	2200      	movs	r2, #0
 80032ca:	615a      	str	r2, [r3, #20]
            if((TRUE == p_optiga_calc_hash->export_hash_ctx) && (FALSE == me->chaining_ongoing))
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	7e9b      	ldrb	r3, [r3, #26]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d10d      	bne.n	80032f0 <optiga_cmd_calc_hash_handler+0x212>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	7e1b      	ldrb	r3, [r3, #24]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d109      	bne.n	80032f0 <optiga_cmd_calc_hash_handler+0x212>
                                              me->p_optiga->optiga_comms_buffer,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f103 020d 	add.w	r2, r3, #13
                optiga_cmd_prepare_tag_header(OPTIGA_CRYPT_HASH_CONTX_OUT,
 80032e4:	f107 030a 	add.w	r3, r7, #10
 80032e8:	2100      	movs	r1, #0
 80032ea:	2007      	movs	r0, #7
 80032ec:	f7fd fe04 	bl	8000ef8 <optiga_cmd_prepare_tag_header>
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	7e59      	ldrb	r1, [r3, #25]
 80032f4:	897b      	ldrh	r3, [r7, #10]
 80032f6:	3b04      	subs	r3, #4
 80032f8:	b29a      	uxth	r2, r3
                                           me->p_optiga->optiga_comms_buffer + OPTIGA_COMMS_DATA_OFFSET);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	330d      	adds	r3, #13
            optiga_cmd_prepare_apdu_header(OPTIGA_CMD_CALC_HASH,
 8003300:	20b0      	movs	r0, #176	@ 0xb0
 8003302:	f7fd fdd6 	bl	8000eb2 <optiga_cmd_prepare_apdu_header>
            me->p_optiga->comms_tx_size = (uint16_t)(index_for_data - OPTIGA_COMMS_DATA_OFFSET);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	897a      	ldrh	r2, [r7, #10]
 800330c:	809a      	strh	r2, [r3, #4]
            return_status = OPTIGA_LIB_SUCCESS;
 800330e:	2300      	movs	r3, #0
 8003310:	82fb      	strh	r3, [r7, #22]
        break;
 8003312:	e074      	b.n	80033fe <optiga_cmd_calc_hash_handler+0x320>
            if (OPTIGA_CMD_APDU_FAILURE == me->p_optiga->optiga_comms_buffer[OPTIGA_COMMS_DATA_OFFSET])
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	7b5b      	ldrb	r3, [r3, #13]
 800331a:	2bff      	cmp	r3, #255	@ 0xff
 800331c:	d10b      	bne.n	8003336 <optiga_cmd_calc_hash_handler+0x258>
                SET_DEV_ERROR_NOTIFICATION(OPTIGA_CMD_EXIT_HANDLER_CALL);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	7e9b      	ldrb	r3, [r3, #26]
 8003322:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003326:	b2da      	uxtb	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	769a      	strb	r2, [r3, #26]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	7e9a      	ldrb	r2, [r3, #26]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	769a      	strb	r2, [r3, #26]
                break;
 8003334:	e063      	b.n	80033fe <optiga_cmd_calc_hash_handler+0x320>
            if((FALSE == me->chaining_ongoing) && (NULL != p_optiga_calc_hash->p_out_digest))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	7e1b      	ldrb	r3, [r3, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d125      	bne.n	800338a <optiga_cmd_calc_hash_handler+0x2ac>
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d021      	beq.n	800338a <optiga_cmd_calc_hash_handler+0x2ac>
                if (OPTIGA_CRYPT_HASH_START_FINAL != me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET])
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	7c5b      	ldrb	r3, [r3, #17]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d151      	bne.n	80033f4 <optiga_cmd_calc_hash_handler+0x316>
                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3312      	adds	r3, #18
 8003356:	f107 0208 	add.w	r2, r7, #8
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f000 f8a7 	bl	80034b0 <optiga_common_get_uint16>
                if(optiga_cmd_check_hash_alg_length(me->cmd_param) != out_data_size)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	7e5b      	ldrb	r3, [r3, #25]
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff fea4 	bl	80030b4 <optiga_cmd_check_hash_alg_length>
 800336c:	4603      	mov	r3, r0
 800336e:	461a      	mov	r2, r3
 8003370:	893b      	ldrh	r3, [r7, #8]
 8003372:	429a      	cmp	r2, r3
 8003374:	d140      	bne.n	80033f8 <optiga_cmd_calc_hash_handler+0x31a>
                pal_os_memcpy(p_optiga_calc_hash->p_out_digest,
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	68d8      	ldr	r0, [r3, #12]
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3314      	adds	r3, #20
                pal_os_memcpy(p_optiga_calc_hash->p_out_digest,
 8003380:	893a      	ldrh	r2, [r7, #8]
 8003382:	4619      	mov	r1, r3
 8003384:	f002 fe44 	bl	8006010 <pal_os_memcpy>
 8003388:	e031      	b.n	80033ee <optiga_cmd_calc_hash_handler+0x310>
            else if ((TRUE == p_optiga_calc_hash->export_hash_ctx) && (FALSE == me->chaining_ongoing) && (NULL != p_optiga_calc_hash->p_hash_context))
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	7e9b      	ldrb	r3, [r3, #26]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d12d      	bne.n	80033ee <optiga_cmd_calc_hash_handler+0x310>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	7e1b      	ldrb	r3, [r3, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d129      	bne.n	80033ee <optiga_cmd_calc_hash_handler+0x310>
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d025      	beq.n	80033ee <optiga_cmd_calc_hash_handler+0x310>
                if (OPTIGA_CRYPT_INTERMEDIATE != me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET])
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	7c5b      	ldrb	r3, [r3, #17]
 80033a8:	2b06      	cmp	r3, #6
 80033aa:	d127      	bne.n	80033fc <optiga_cmd_calc_hash_handler+0x31e>
                optiga_common_get_uint16(&me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET +
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3312      	adds	r3, #18
 80033b2:	f107 0208 	add.w	r2, r7, #8
 80033b6:	4611      	mov	r1, r2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 f879 	bl	80034b0 <optiga_common_get_uint16>
                if (p_optiga_calc_hash->p_hash_context->context_buffer_length < out_data_size)
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	889a      	ldrh	r2, [r3, #4]
 80033c4:	893b      	ldrh	r3, [r7, #8]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d203      	bcs.n	80033d2 <optiga_cmd_calc_hash_handler+0x2f4>
                    return_status = OPTIGA_CMD_ERROR_MEMORY_INSUFFICIENT;
 80033ca:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80033ce:	82fb      	strh	r3, [r7, #22]
                    break;
 80033d0:	e015      	b.n	80033fe <optiga_cmd_calc_hash_handler+0x320>
                pal_os_memcpy(p_optiga_calc_hash->p_hash_context->context_buffer,
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	6818      	ldr	r0, [r3, #0]
                              &me->p_optiga->optiga_comms_buffer[OPTIGA_CMD_APDU_INDATA_OFFSET + OPTIGA_CMD_UINT16_SIZE_IN_BYTES +
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3314      	adds	r3, #20
                pal_os_memcpy(p_optiga_calc_hash->p_hash_context->context_buffer,
 80033de:	893a      	ldrh	r2, [r7, #8]
 80033e0:	4619      	mov	r1, r3
 80033e2:	f002 fe15 	bl	8006010 <pal_os_memcpy>
                p_optiga_calc_hash->p_hash_context->context_buffer_length = out_data_size;
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	893a      	ldrh	r2, [r7, #8]
 80033ec:	809a      	strh	r2, [r3, #4]
            return_status = OPTIGA_LIB_SUCCESS;
 80033ee:	2300      	movs	r3, #0
 80033f0:	82fb      	strh	r3, [r7, #22]
        break;
 80033f2:	e004      	b.n	80033fe <optiga_cmd_calc_hash_handler+0x320>
                   break;
 80033f4:	bf00      	nop
 80033f6:	e002      	b.n	80033fe <optiga_cmd_calc_hash_handler+0x320>
                    break;
 80033f8:	bf00      	nop
 80033fa:	e000      	b.n	80033fe <optiga_cmd_calc_hash_handler+0x320>
                    break;
 80033fc:	bf00      	nop
    }

    return (return_status);
 80033fe:	8afb      	ldrh	r3, [r7, #22]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3718      	adds	r7, #24
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <optiga_cmd_calc_hash>:

optiga_lib_status_t optiga_cmd_calc_hash(optiga_cmd_t * me,
                                         uint8_t cmd_param,
                                         optiga_calc_hash_params_t * params)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08a      	sub	sp, #40	@ 0x28
 800340c:	af04      	add	r7, sp, #16
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	460b      	mov	r3, r1
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	72fb      	strb	r3, [r7, #11]
    optiga_calc_hash_params_t * p_optiga_calc_hash = (optiga_calc_hash_params_t*)params;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	617b      	str	r3, [r7, #20]
    OPTIGA_CMD_LOG_MESSAGE(__FUNCTION__);

    p_optiga_calc_hash->data_sent = 0;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2200      	movs	r2, #0
 800341e:	611a      	str	r2, [r3, #16]

    optiga_cmd_execute(me,
 8003420:	7af9      	ldrb	r1, [r7, #11]
 8003422:	23b0      	movs	r3, #176	@ 0xb0
 8003424:	9302      	str	r3, [sp, #8]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	9301      	str	r3, [sp, #4]
 800342a:	2306      	movs	r3, #6
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	2302      	movs	r3, #2
 8003430:	4a04      	ldr	r2, [pc, #16]	@ (8003444 <optiga_cmd_calc_hash+0x3c>)
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f7fd fd9d 	bl	8000f72 <optiga_cmd_execute>
                       OPTIGA_CMD_EXEC_REQUEST_LOCK,
                       params,
                       //lint --e{835} suppress "Upper 8 bits of apdu_data is kept as zero and is reserved for future enhancements"
                       OPTIGA_CMD_SET_APDU_DATA(OPTIGA_CMD_CALC_HASH, OPTIGA_CMD_ZERO_LENGTH_OR_VALUE));

    return (OPTIGA_LIB_SUCCESS);
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	080030df 	.word	0x080030df

08003448 <optiga_common_set_uint16>:

#include "optiga/common/optiga_lib_types.h"
#include "optiga/common/optiga_lib_common.h"

void optiga_common_set_uint16 (uint8_t * p_output_buffer,uint16_t two_byte_value)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	807b      	strh	r3, [r7, #2]
    *p_output_buffer = (uint8_t)(two_byte_value>>8);
 8003454:	887b      	ldrh	r3, [r7, #2]
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	b29b      	uxth	r3, r3
 800345a:	b2da      	uxtb	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	701a      	strb	r2, [r3, #0]
    *(p_output_buffer + 1) = (uint8_t)(two_byte_value);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3301      	adds	r3, #1
 8003464:	887a      	ldrh	r2, [r7, #2]
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <optiga_common_get_uint32>:
    *(p_output_buffer + 2) = (uint8_t)(four_byte_value>>8);
    *(p_output_buffer + 3) = (uint8_t)(four_byte_value);
}

uint32_t optiga_common_get_uint32 (const uint8_t* p_input_buffer)
{
 8003476:	b480      	push	{r7}
 8003478:	b085      	sub	sp, #20
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
    uint32_t four_byte_value;
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	061a      	lsls	r2, r3, #24
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3301      	adds	r3, #1
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	0419      	lsls	r1, r3, #16
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3302      	adds	r3, #2
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	021b      	lsls	r3, r3, #8
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 8003494:	430b      	orrs	r3, r1
                      ((uint32_t)(*(p_input_buffer + 2)))<< 8 | (uint32_t)(*(p_input_buffer + 3)));
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	3103      	adds	r1, #3
 800349a:	7809      	ldrb	r1, [r1, #0]
 800349c:	430b      	orrs	r3, r1
    four_byte_value = ((uint32_t)(*p_input_buffer))<< 24 | ((uint32_t)(*(p_input_buffer + 1))<< 16 |
 800349e:	4313      	orrs	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]

    return (four_byte_value);
 80034a2:	68fb      	ldr	r3, [r7, #12]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <optiga_common_get_uint16>:

void optiga_common_get_uint16 (const uint8_t * p_input_buffer,uint16_t* p_two_byte_value)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
    *p_two_byte_value = (uint16_t)(*p_input_buffer << 8);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	801a      	strh	r2, [r3, #0]
    *p_two_byte_value |= (uint16_t)(*(p_input_buffer+1));
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	3201      	adds	r2, #1
 80034ce:	7812      	ldrb	r2, [r2, #0]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	801a      	strh	r2, [r3, #0]
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <ifx_i2c_open>:
                                                          uint8_t slave_address,
                                                          uint8_t storage_type);
/// @endcond

optiga_lib_status_t ifx_i2c_open(ifx_i2c_context_t * p_ctx)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 80034ec:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80034f0:	81fb      	strh	r3, [r7, #14]

    //If api status is not busy, proceed
    if ((IFX_I2C_STATUS_BUSY != p_ctx->status))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 33c8 	ldrb.w	r3, [r3, #968]	@ 0x3c8
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d027      	beq.n	800354c <ifx_i2c_open+0x68>
    {
        do
        {
            p_ctx->p_pal_i2c_ctx->p_upper_layer_ctx = p_ctx;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	605a      	str	r2, [r3, #4]
            p_ctx->reset_type = OPTIGA_COMMS_DEFAULT_RESET_TYPE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
            if(p_ctx->reset_type > (uint8_t)IFX_I2C_WARM_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 33ca 	ldrb.w	r3, [r3, #970]	@ 0x3ca
 8003514:	2b02      	cmp	r3, #2
 8003516:	d818      	bhi.n	800354a <ifx_i2c_open+0x66>
            {
                break;
            }
            p_ctx->reset_state = IFX_I2C_STATE_RESET_PIN_LOW;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	22b1      	movs	r2, #177	@ 0xb1
 800351c:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
            p_ctx->do_pal_init = TRUE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
            p_ctx->state = IFX_I2C_STATE_UNINIT;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 23c7 	strb.w	r2, [r3, #967]	@ 0x3c7

            api_status = ifx_i2c_init(p_ctx);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f8b7 	bl	80036a4 <ifx_i2c_init>
 8003536:	4603      	mov	r3, r0
 8003538:	81fb      	strh	r3, [r7, #14]
            if (IFX_I2C_STACK_SUCCESS == api_status)
 800353a:	89fb      	ldrh	r3, [r7, #14]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d105      	bne.n	800354c <ifx_i2c_open+0x68>
            {
                p_ctx->status = IFX_I2C_STATUS_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2203      	movs	r2, #3
 8003544:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
 8003548:	e000      	b.n	800354c <ifx_i2c_open+0x68>
                break;
 800354a:	bf00      	nop
            }
        }while(FALSE);
    }
    return (api_status);
 800354c:	89fb      	ldrh	r3, [r7, #14]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <ifx_i2c_transceive>:
optiga_lib_status_t ifx_i2c_transceive(ifx_i2c_context_t * p_ctx,
                                       const uint8_t * p_tx_data,
                                       uint16_t tx_data_length,
                                       uint8_t * p_rx_buffer,
                                       uint16_t * p_rx_buffer_len)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b088      	sub	sp, #32
 800355a:	af02      	add	r7, sp, #8
 800355c:	60f8      	str	r0, [r7, #12]
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	603b      	str	r3, [r7, #0]
 8003562:	4613      	mov	r3, r2
 8003564:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 8003566:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800356a:	82fb      	strh	r3, [r7, #22]
    // Proceed, if not busy and in idle state
    if ((IFX_I2C_STATE_IDLE == p_ctx->state) && (IFX_I2C_STATUS_BUSY != p_ctx->status))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 33c7 	ldrb.w	r3, [r3, #967]	@ 0x3c7
 8003572:	2b02      	cmp	r3, #2
 8003574:	d129      	bne.n	80035ca <ifx_i2c_transceive+0x74>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f893 33c8 	ldrb.w	r3, [r3, #968]	@ 0x3c8
 800357c:	2b03      	cmp	r3, #3
 800357e:	d024      	beq.n	80035ca <ifx_i2c_transceive+0x74>
    {
        p_ctx->p_upper_layer_rx_buffer = p_rx_buffer;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	f8c3 2188 	str.w	r2, [r3, #392]	@ 0x188
        p_ctx->p_upper_layer_rx_buffer_len = p_rx_buffer_len;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a3a      	ldr	r2, [r7, #32]
 800358c:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_transceive(p_ctx,
 8003590:	88fa      	ldrh	r2, [r7, #6]
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68b9      	ldr	r1, [r7, #8]
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f001 fa36 	bl	8004a0c <ifx_i2c_tl_transceive>
 80035a0:	4603      	mov	r3, r0
 80035a2:	82fb      	strh	r3, [r7, #22]
                                           (uint8_t * )p_tx_data,
                                           (tx_data_length),
                                           (uint8_t * )p_rx_buffer,
                                           p_rx_buffer_len);
        if (IFX_I2C_STACK_SUCCESS == api_status)
 80035a4:	8afb      	ldrh	r3, [r7, #22]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d103      	bne.n	80035b2 <ifx_i2c_transceive+0x5c>
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2203      	movs	r2, #3
 80035ae:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
                                         (uint8_t * )p_tx_data,
                                         tx_data_length,
                                         (uint8_t * )p_rx_buffer,
                                         p_rx_buffer_len);
#endif
        if ((IFX_I2C_STACK_SUCCESS == api_status) && (IFX_I2C_STACK_SUCCESS == p_ctx->close_state))
 80035b2:	8afb      	ldrh	r3, [r7, #22]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d108      	bne.n	80035ca <ifx_i2c_transceive+0x74>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f8b3 3198 	ldrh.w	r3, [r3, #408]	@ 0x198
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d103      	bne.n	80035ca <ifx_i2c_transceive+0x74>
        {
            p_ctx->status = IFX_I2C_STATUS_BUSY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2203      	movs	r2, #3
 80035c6:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
        }
    }
    return (api_status);
 80035ca:	8afb      	ldrh	r3, [r7, #22]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3718      	adds	r7, #24
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <ifx_i2c_close>:


optiga_lib_status_t ifx_i2c_close(ifx_i2c_context_t * p_ctx)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = (int32_t)IFX_I2C_STACK_ERROR;
 80035dc:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80035e0:	81fb      	strh	r3, [r7, #14]
    // Proceed, if not busy and in idle state
    if (IFX_I2C_STATUS_BUSY != p_ctx->status)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 33c8 	ldrb.w	r3, [r3, #968]	@ 0x3c8
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d021      	beq.n	8003630 <ifx_i2c_close+0x5c>
    {
        api_status = IFX_I2C_STACK_SUCCESS;
 80035ec:	2300      	movs	r3, #0
 80035ee:	81fb      	strh	r3, [r7, #14]
            pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
            pal_gpio_set_low(p_ctx->p_slave_reset_pin);
            p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
        }
#else
        ifx_i2c_tl_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, NULL, 0);
 80035f0:	2300      	movs	r3, #0
 80035f2:	2200      	movs	r2, #0
 80035f4:	2100      	movs	r1, #0
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f81f 	bl	800363a <ifx_i2c_tl_event_handler>
        //lint --e{534} suppress "Error handling is not required so return value is not checked"
        // Close I2C master
        pal_i2c_deinit(p_ctx->p_pal_i2c_ctx);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8003602:	4618      	mov	r0, r3
 8003604:	f002 fa87 	bl	8005b16 <pal_i2c_deinit>
        // Also power off the device
        pal_gpio_set_low(p_ctx->p_slave_vdd_pin);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 800360e:	4618      	mov	r0, r3
 8003610:	f002 fa19 	bl	8005a46 <pal_gpio_set_low>
        pal_gpio_set_low(p_ctx->p_slave_reset_pin);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800361a:	4618      	mov	r0, r3
 800361c:	f002 fa13 	bl	8005a46 <pal_gpio_set_low>
        p_ctx->state = IFX_I2C_STATE_UNINIT;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 23c7 	strb.w	r2, [r3, #967]	@ 0x3c7
        p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2204      	movs	r2, #4
 800362c:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
#endif

    }
    return (api_status);
 8003630:	89fb      	ldrh	r3, [r7, #14]
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <ifx_i2c_tl_event_handler>:
//                        but as per the function signature those 2 parameter should be passed"
void ifx_i2c_tl_event_handler(ifx_i2c_context_t * p_ctx,
                              optiga_lib_status_t event,
                              const uint8_t * p_data,
                              uint16_t data_len)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	60f8      	str	r0, [r7, #12]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	461a      	mov	r2, r3
 8003646:	460b      	mov	r3, r1
 8003648:	817b      	strh	r3, [r7, #10]
 800364a:	4613      	mov	r3, r2
 800364c:	813b      	strh	r3, [r7, #8]
    // If there is no upper layer handler, don't do anything and return
    if (NULL != p_ctx->upper_layer_event_handler)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <ifx_i2c_tl_event_handler+0x30>
    {
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	f8d2 2184 	ldr.w	r2, [r2, #388]	@ 0x184
 8003664:	8979      	ldrh	r1, [r7, #10]
 8003666:	4610      	mov	r0, r2
 8003668:	4798      	blx	r3
    }
    p_ctx->close_state = event;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	897a      	ldrh	r2, [r7, #10]
 800366e:	f8a3 2198 	strh.w	r2, [r3, #408]	@ 0x198
    p_ctx->status = IFX_I2C_STATUS_NOT_BUSY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2204      	movs	r2, #4
 8003676:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    switch (p_ctx->state)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f893 33c7 	ldrb.w	r3, [r3, #967]	@ 0x3c7
 8003680:	2b01      	cmp	r3, #1
 8003682:	d107      	bne.n	8003694 <ifx_i2c_tl_event_handler+0x5a>
    {
        case IFX_I2C_STATE_UNINIT:
        {
            if (IFX_I2C_STACK_SUCCESS == event)
 8003684:	897b      	ldrh	r3, [r7, #10]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d106      	bne.n	8003698 <ifx_i2c_tl_event_handler+0x5e>
            {
                p_ctx->state = IFX_I2C_STATE_IDLE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2202      	movs	r2, #2
 800368e:	f883 23c7 	strb.w	r2, [r3, #967]	@ 0x3c7
            }
            break;
 8003692:	e001      	b.n	8003698 <ifx_i2c_tl_event_handler+0x5e>
        }
        default:
            break;
 8003694:	bf00      	nop
 8003696:	e000      	b.n	800369a <ifx_i2c_tl_event_handler+0x60>
            break;
 8003698:	bf00      	nop
    }
}
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <ifx_i2c_init>:
        p_ctx->upper_layer_event_handler(p_ctx->p_upper_layer_ctx, event);
    }
}
#endif
_STATIC_H optiga_lib_status_t ifx_i2c_init(ifx_i2c_context_t * p_ifx_i2c_context)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status = IFX_I2C_STACK_ERROR;
 80036ac:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80036b0:	81fb      	strh	r3, [r7, #14]

    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f893 33ca 	ldrb.w	r3, [r3, #970]	@ 0x3ca
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d004      	beq.n	80036c6 <ifx_i2c_init+0x22>
        ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 33ca 	ldrb.w	r3, [r3, #970]	@ 0x3ca
    if (((uint8_t)IFX_I2C_WARM_RESET == p_ifx_i2c_context->reset_type) ||
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d156      	bne.n	8003774 <ifx_i2c_init+0xd0>
    {
        switch (p_ifx_i2c_context->reset_state)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 33c9 	ldrb.w	r3, [r3, #969]	@ 0x3c9
 80036cc:	2bb3      	cmp	r3, #179	@ 0xb3
 80036ce:	d048      	beq.n	8003762 <ifx_i2c_init+0xbe>
 80036d0:	2bb3      	cmp	r3, #179	@ 0xb3
 80036d2:	dc4d      	bgt.n	8003770 <ifx_i2c_init+0xcc>
 80036d4:	2bb1      	cmp	r3, #177	@ 0xb1
 80036d6:	d002      	beq.n	80036de <ifx_i2c_init+0x3a>
 80036d8:	2bb2      	cmp	r3, #178	@ 0xb2
 80036da:	d021      	beq.n	8003720 <ifx_i2c_init+0x7c>
                api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#endif
                break;
            }
            default:
                break;
 80036dc:	e048      	b.n	8003770 <ifx_i2c_init+0xcc>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 33ca 	ldrb.w	r3, [r3, #970]	@ 0x3ca
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d105      	bne.n	80036f4 <ifx_i2c_init+0x50>
                    pal_gpio_set_low(p_ifx_i2c_context->p_slave_vdd_pin);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 80036ee:	4618      	mov	r0, r3
 80036f0:	f002 f9a9 	bl	8005a46 <pal_gpio_set_low>
                pal_gpio_set_low(p_ifx_i2c_context->p_slave_reset_pin);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 80036fa:	4618      	mov	r0, r3
 80036fc:	f002 f9a3 	bl	8005a46 <pal_gpio_set_low>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_PIN_HIGH;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	22b2      	movs	r2, #178	@ 0xb2
 8003704:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8d3 0190 	ldr.w	r0, [r3, #400]	@ 0x190
 800370e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4923      	ldr	r1, [pc, #140]	@ (80037a4 <ifx_i2c_init+0x100>)
 8003716:	f002 fc2b 	bl	8005f70 <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 800371a:	2300      	movs	r3, #0
 800371c:	81fb      	strh	r3, [r7, #14]
                break;
 800371e:	e028      	b.n	8003772 <ifx_i2c_init+0xce>
                if ((uint8_t)IFX_I2C_COLD_RESET == p_ifx_i2c_context->reset_type)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f893 33ca 	ldrb.w	r3, [r3, #970]	@ 0x3ca
 8003726:	2b00      	cmp	r3, #0
 8003728:	d105      	bne.n	8003736 <ifx_i2c_init+0x92>
                    pal_gpio_set_high(p_ifx_i2c_context->p_slave_vdd_pin);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8003730:	4618      	mov	r0, r3
 8003732:	f002 f96f 	bl	8005a14 <pal_gpio_set_high>
                pal_gpio_set_high(p_ifx_i2c_context->p_slave_reset_pin);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 800373c:	4618      	mov	r0, r3
 800373e:	f002 f969 	bl	8005a14 <pal_gpio_set_high>
                p_ifx_i2c_context->reset_state = IFX_I2C_STATE_RESET_INIT;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	22b3      	movs	r2, #179	@ 0xb3
 8003746:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
                pal_os_event_register_callback_oneshot(p_ifx_i2c_context->pal_os_event_ctx,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8d3 0190 	ldr.w	r0, [r3, #400]	@ 0x190
 8003750:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	4913      	ldr	r1, [pc, #76]	@ (80037a4 <ifx_i2c_init+0x100>)
 8003758:	f002 fc0a 	bl	8005f70 <pal_os_event_register_callback_oneshot>
                api_status = IFX_I2C_STACK_SUCCESS;
 800375c:	2300      	movs	r3, #0
 800375e:	81fb      	strh	r3, [r7, #14]
                break;
 8003760:	e007      	b.n	8003772 <ifx_i2c_init+0xce>
                api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 8003762:	4911      	ldr	r1, [pc, #68]	@ (80037a8 <ifx_i2c_init+0x104>)
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f001 f927 	bl	80049b8 <ifx_i2c_tl_init>
 800376a:	4603      	mov	r3, r0
 800376c:	81fb      	strh	r3, [r7, #14]
                break;
 800376e:	e000      	b.n	8003772 <ifx_i2c_init+0xce>
                break;
 8003770:	bf00      	nop
        switch (p_ifx_i2c_context->reset_state)
 8003772:	e009      	b.n	8003788 <ifx_i2c_init+0xe4>
        }
    }
    //soft reset
    else
    {
        p_ifx_i2c_context->pl.request_soft_reset = (uint8_t)TRUE;    //Soft reset
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2173 	strb.w	r2, [r3, #371]	@ 0x173
#ifndef OPTIGA_COMMS_SHIELDED_CONNECTION
        api_status = ifx_i2c_tl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
 800377c:	490a      	ldr	r1, [pc, #40]	@ (80037a8 <ifx_i2c_init+0x104>)
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f001 f91a 	bl	80049b8 <ifx_i2c_tl_init>
 8003784:	4603      	mov	r3, r0
 8003786:	81fb      	strh	r3, [r7, #14]
#else
        api_status = ifx_i2c_prl_init(p_ifx_i2c_context, ifx_i2c_tl_event_handler);
#endif
    }
    if (api_status != IFX_I2C_STACK_SUCCESS)
 8003788:	89fb      	ldrh	r3, [r7, #14]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <ifx_i2c_init+0xf6>
    {
        ifx_i2c_tl_event_handler(p_ifx_i2c_context, api_status, 0, 0);
 800378e:	89f9      	ldrh	r1, [r7, #14]
 8003790:	2300      	movs	r3, #0
 8003792:	2200      	movs	r2, #0
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7ff ff50 	bl	800363a <ifx_i2c_tl_event_handler>
    }
    return (api_status);
 800379a:	89fb      	ldrh	r3, [r7, #14]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	080036a5 	.word	0x080036a5
 80037a8:	0800363b 	.word	0x0800363b

080037ac <ifx_i2c_dl_init>:
                                        uint16_t data_len);

/// @endcond

optiga_lib_status_t ifx_i2c_dl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
    LOG_DL("[IFX-DL]: Init\n");

    p_ctx->dl.state = DL_STATE_UNINIT;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    // Initialize Physical Layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_pl_init(p_ctx, ifx_i2c_pl_event_handler))
 80037be:	4918      	ldr	r1, [pc, #96]	@ (8003820 <ifx_i2c_dl_init+0x74>)
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 fc1d 	bl	8004000 <ifx_i2c_pl_init>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d002      	beq.n	80037d2 <ifx_i2c_dl_init+0x26>
    {
        return (IFX_I2C_STACK_ERROR);
 80037cc:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80037d0:	e021      	b.n	8003816 <ifx_i2c_dl_init+0x6a>
    }

    // Initialize internal variables
    p_ctx->dl.upper_layer_event_handler = handler;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	635a      	str	r2, [r3, #52]	@ 0x34
    p_ctx->dl.state = DL_STATE_IDLE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2203      	movs	r2, #3
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2203      	movs	r2, #3
 80037ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    p_ctx->dl.resynced = 0;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    p_ctx->dl.error = 0;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    p_ctx->dl.p_tx_frame_buffer = p_ctx->tx_frame_buffer;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f503 72cd 	add.w	r2, r3, #410	@ 0x19a
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	629a      	str	r2, [r3, #40]	@ 0x28
    p_ctx->dl.p_rx_frame_buffer = p_ctx->rx_frame_buffer;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f503 722c 	add.w	r2, r3, #688	@ 0x2b0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	62da      	str	r2, [r3, #44]	@ 0x2c

    return IFX_I2C_STACK_SUCCESS;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	08003bad 	.word	0x08003bad

08003824 <ifx_i2c_dl_send_frame>:

optiga_lib_status_t ifx_i2c_dl_send_frame(ifx_i2c_context_t * p_ctx, uint16_t frame_len)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	807b      	strh	r3, [r7, #2]
    LOG_DL("[IFX-DL]: Start TX Frame\n");
    // State must be idle and payload available
    if (p_ctx->dl.state != DL_STATE_IDLE || (0 == frame_len))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003836:	2b01      	cmp	r3, #1
 8003838:	d102      	bne.n	8003840 <ifx_i2c_dl_send_frame+0x1c>
 800383a:	887b      	ldrh	r3, [r7, #2]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d102      	bne.n	8003846 <ifx_i2c_dl_send_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 8003840:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003844:	e018      	b.n	8003878 <ifx_i2c_dl_send_frame+0x54>
    }

    p_ctx->dl.state = DL_STATE_TX;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2202      	movs	r2, #2
 800384a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    p_ctx->dl.retransmit_counter = 0;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    p_ctx->dl.action_rx_only = 0;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    p_ctx->dl.tx_buffer_size = frame_len;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	887a      	ldrh	r2, [r7, #2]
 8003862:	879a      	strh	r2, [r3, #60]	@ 0x3c
    p_ctx->dl.data_poll_timeout = PL_TRANS_TIMEOUT_MS;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	220a      	movs	r2, #10
 8003868:	639a      	str	r2, [r3, #56]	@ 0x38

    return (ifx_i2c_dl_send_frame_internal(p_ctx, frame_len, DL_FCTR_SEQCTR_VALUE_ACK, 0));
 800386a:	8879      	ldrh	r1, [r7, #2]
 800386c:	2300      	movs	r3, #0
 800386e:	2200      	movs	r2, #0
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f888 	bl	8003986 <ifx_i2c_dl_send_frame_internal>
 8003876:	4603      	mov	r3, r0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <ifx_i2c_dl_receive_frame>:

optiga_lib_status_t ifx_i2c_dl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
    LOG_DL("[IFX-DL]: Start RX Frame\n");

    if (DL_STATE_IDLE != p_ctx->dl.state)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800388e:	2b01      	cmp	r3, #1
 8003890:	d002      	beq.n	8003898 <ifx_i2c_dl_receive_frame+0x18>
    {
        return (IFX_I2C_STACK_ERROR);
 8003892:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8003896:	e017      	b.n	80038c8 <ifx_i2c_dl_receive_frame+0x48>
    }

    // Set internal state
    p_ctx->dl.state = DL_STATE_RX;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2203      	movs	r2, #3
 800389c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    p_ctx->dl.retransmit_counter = 0;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    p_ctx->dl.action_rx_only = 1;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 80038b0:	f002 fbdc 	bl	800606c <pal_os_timer_get_time_in_milliseconds>
 80038b4:	4602      	mov	r2, r0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	631a      	str	r2, [r3, #48]	@ 0x30
    p_ctx->dl.data_poll_timeout = TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a04      	ldr	r2, [pc, #16]	@ (80038d0 <ifx_i2c_dl_receive_frame+0x50>)
 80038be:	639a      	str	r2, [r3, #56]	@ 0x38

    return (ifx_i2c_pl_receive_frame(p_ctx));
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 fc13 	bl	80040ec <ifx_i2c_pl_receive_frame>
 80038c6:	4603      	mov	r3, r0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3708      	adds	r7, #8
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	0002bf20 	.word	0x0002bf20

080038d4 <ifx_i2c_dl_calc_crc_byte>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc_byte(uint16_t seed, uint8_t byte)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	460a      	mov	r2, r1
 80038de:	80fb      	strh	r3, [r7, #6]
 80038e0:	4613      	mov	r3, r2
 80038e2:	717b      	strb	r3, [r7, #5]
    uint16_t h1;
    uint16_t h2;
    uint16_t h3;
    uint16_t h4;

    h1 = (seed ^ byte) & 0xFF;
 80038e4:	797b      	ldrb	r3, [r7, #5]
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	4053      	eors	r3, r2
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	81fb      	strh	r3, [r7, #14]
    h2 = h1 & 0x0F;
 80038f2:	89fb      	ldrh	r3, [r7, #14]
 80038f4:	f003 030f 	and.w	r3, r3, #15
 80038f8:	81bb      	strh	r3, [r7, #12]
    h3 = ((uint16_t)(h2 << 4)) ^ h1;
 80038fa:	89bb      	ldrh	r3, [r7, #12]
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	b29a      	uxth	r2, r3
 8003900:	89fb      	ldrh	r3, [r7, #14]
 8003902:	4053      	eors	r3, r2
 8003904:	817b      	strh	r3, [r7, #10]
    h4 = h3 >> 4;
 8003906:	897b      	ldrh	r3, [r7, #10]
 8003908:	091b      	lsrs	r3, r3, #4
 800390a:	813b      	strh	r3, [r7, #8]

    return ((uint16_t)((((uint16_t)((((uint16_t)(h3 << 1)) ^ h4) << 4)) ^ h2) << 3)) ^ h4 ^ (seed >> 8);
 800390c:	897b      	ldrh	r3, [r7, #10]
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	893b      	ldrh	r3, [r7, #8]
 8003914:	4053      	eors	r3, r2
 8003916:	b29b      	uxth	r3, r3
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	b29a      	uxth	r2, r3
 800391c:	89bb      	ldrh	r3, [r7, #12]
 800391e:	4053      	eors	r3, r2
 8003920:	b29b      	uxth	r3, r3
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	b29a      	uxth	r2, r3
 8003926:	893b      	ldrh	r3, [r7, #8]
 8003928:	4053      	eors	r3, r2
 800392a:	b29a      	uxth	r2, r3
 800392c:	88fb      	ldrh	r3, [r7, #6]
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	b29b      	uxth	r3, r3
 8003932:	4053      	eors	r3, r2
 8003934:	b29b      	uxth	r3, r3
}
 8003936:	4618      	mov	r0, r3
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <ifx_i2c_dl_calc_crc>:

_STATIC_H uint16_t ifx_i2c_dl_calc_crc(const uint8_t * p_data, uint16_t data_len)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b084      	sub	sp, #16
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	460b      	mov	r3, r1
 800394c:	807b      	strh	r3, [r7, #2]
    uint16_t i;
    uint16_t crc = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	81bb      	strh	r3, [r7, #12]

    for (i = 0; i < data_len; i++)
 8003952:	2300      	movs	r3, #0
 8003954:	81fb      	strh	r3, [r7, #14]
 8003956:	e00d      	b.n	8003974 <ifx_i2c_dl_calc_crc+0x32>
    {
        crc = ifx_i2c_dl_calc_crc_byte(crc, p_data[i]);
 8003958:	89fb      	ldrh	r3, [r7, #14]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	4413      	add	r3, r2
 800395e:	781a      	ldrb	r2, [r3, #0]
 8003960:	89bb      	ldrh	r3, [r7, #12]
 8003962:	4611      	mov	r1, r2
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff ffb5 	bl	80038d4 <ifx_i2c_dl_calc_crc_byte>
 800396a:	4603      	mov	r3, r0
 800396c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < data_len; i++)
 800396e:	89fb      	ldrh	r3, [r7, #14]
 8003970:	3301      	adds	r3, #1
 8003972:	81fb      	strh	r3, [r7, #14]
 8003974:	89fa      	ldrh	r2, [r7, #14]
 8003976:	887b      	ldrh	r3, [r7, #2]
 8003978:	429a      	cmp	r2, r3
 800397a:	d3ed      	bcc.n	8003958 <ifx_i2c_dl_calc_crc+0x16>
    }

    return (crc);
 800397c:	89bb      	ldrh	r3, [r7, #12]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <ifx_i2c_dl_send_frame_internal>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_send_frame_internal(ifx_i2c_context_t * p_ctx,
                                                             uint16_t frame_len,
                                                             uint8_t seqctr_value,
                                                             uint8_t resend)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b086      	sub	sp, #24
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	4608      	mov	r0, r1
 8003990:	4611      	mov	r1, r2
 8003992:	461a      	mov	r2, r3
 8003994:	4603      	mov	r3, r0
 8003996:	807b      	strh	r3, [r7, #2]
 8003998:	460b      	mov	r3, r1
 800399a:	707b      	strb	r3, [r7, #1]
 800399c:	4613      	mov	r3, r2
 800399e:	703b      	strb	r3, [r7, #0]
    uint16_t crc;
    uint16_t ack_nr = p_ctx->dl.rx_seq_nr;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039a6:	82fb      	strh	r3, [r7, #22]
    uint8_t * p_buffer;

    LOG_DL("[IFX-DL]: TX Frame len %d\n", frame_len);
    // In case of sending a NACK the next frame is referenced
    if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr_value)
 80039a8:	787b      	ldrb	r3, [r7, #1]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d107      	bne.n	80039be <ifx_i2c_dl_send_frame_internal+0x38>
    {
        ack_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039b4:	3301      	adds	r3, #1
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	82fb      	strh	r3, [r7, #22]
    }
    p_buffer = p_ctx->dl.p_tx_frame_buffer;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c2:	613b      	str	r3, [r7, #16]
    if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr_value)
 80039c4:	787b      	ldrb	r3, [r7, #1]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d104      	bne.n	80039d4 <ifx_i2c_dl_send_frame_internal+0x4e>
    {
        ack_nr = 0;
 80039ca:	2300      	movs	r3, #0
 80039cc:	82fb      	strh	r3, [r7, #22]
        // Use rx buffer to send resync
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d2:	613b      	str	r3, [r7, #16]
    }
    // Use tx buffer when discarding a frame and send nakc for later received frame
    if ((DL_FCTR_SEQCTR_VALUE_ACK == seqctr_value) && (DL_STATE_DISCARD == p_ctx->dl.state))
 80039d4:	787b      	ldrb	r3, [r7, #1]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d107      	bne.n	80039ea <ifx_i2c_dl_send_frame_internal+0x64>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039e0:	2b09      	cmp	r3, #9
 80039e2:	d102      	bne.n	80039ea <ifx_i2c_dl_send_frame_internal+0x64>
    {
        p_buffer = p_ctx->dl.p_rx_frame_buffer;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e8:	613b      	str	r3, [r7, #16]
    }

    // Set sequence control value (ACK or NACK) and referenced frame number
    //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_buffer[0] = (uint8_t)(ack_nr << DL_FCTR_ACKNR_OFFSET);
 80039ea:	8afb      	ldrh	r3, [r7, #22]
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	701a      	strb	r2, [r3, #0]
    p_buffer[0] |= (uint8_t)(seqctr_value << DL_FCTR_SEQCTR_OFFSET);
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	781a      	ldrb	r2, [r3, #0]
 80039f6:	787b      	ldrb	r3, [r7, #1]
 80039f8:	015b      	lsls	r3, r3, #5
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	4313      	orrs	r3, r2
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	701a      	strb	r2, [r3, #0]

    if (0 != frame_len) // Data frame
 8003a04:	887b      	ldrh	r3, [r7, #2]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d022      	beq.n	8003a50 <ifx_i2c_dl_send_frame_internal+0xca>
    {
        // Increment and set frame transmit sequence number
        if ((0 == resend) || (0 != p_ctx->dl.resynced))
 8003a0a:	783b      	ldrb	r3, [r7, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d004      	beq.n	8003a1a <ifx_i2c_dl_send_frame_internal+0x94>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <ifx_i2c_dl_send_frame_internal+0xaa>
        {
            p_ctx->dl.tx_seq_nr = (p_ctx->dl.tx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a20:	3301      	adds	r3, #1
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	f003 0303 	and.w	r3, r3, #3
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        }
        p_buffer[0] |= (uint8_t)(p_ctx->dl.tx_seq_nr << DL_FCTR_FRNR_OFFSET);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	781a      	ldrb	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	701a      	strb	r2, [r3, #0]
        // Reset resync received
        p_ctx->dl.resynced = 0;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a4e:	e006      	b.n	8003a5e <ifx_i2c_dl_send_frame_internal+0xd8>
        OPTIGA_COMMS_LOG_MESSAGE(">>>>");
    }
    else // Control frame
    {
        p_buffer[0] |= DL_FCTR_FTYPE_MASK;
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	701a      	strb	r2, [r3, #0]
    }

    // Set frame length
    p_buffer[1] = (uint8_t)(frame_len >> 8);
 8003a5e:	887b      	ldrh	r3, [r7, #2]
 8003a60:	0a1b      	lsrs	r3, r3, #8
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	3301      	adds	r3, #1
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	701a      	strb	r2, [r3, #0]
    p_buffer[2] = (uint8_t)frame_len;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	3302      	adds	r3, #2
 8003a70:	887a      	ldrh	r2, [r7, #2]
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]

    // Calculate frame CRC
    crc = ifx_i2c_dl_calc_crc(p_buffer, 3 + frame_len);
 8003a76:	887b      	ldrh	r3, [r7, #2]
 8003a78:	3303      	adds	r3, #3
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	6938      	ldr	r0, [r7, #16]
 8003a80:	f7ff ff5f 	bl	8003942 <ifx_i2c_dl_calc_crc>
 8003a84:	4603      	mov	r3, r0
 8003a86:	81fb      	strh	r3, [r7, #14]
    p_buffer[3 + frame_len] = (uint8_t) (crc >> 8);
 8003a88:	89fb      	ldrh	r3, [r7, #14]
 8003a8a:	0a1b      	lsrs	r3, r3, #8
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	887b      	ldrh	r3, [r7, #2]
 8003a90:	3303      	adds	r3, #3
 8003a92:	4619      	mov	r1, r3
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	440b      	add	r3, r1
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	701a      	strb	r2, [r3, #0]
    p_buffer[4 + frame_len] = (uint8_t)crc;
 8003a9c:	887b      	ldrh	r3, [r7, #2]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	89fa      	ldrh	r2, [r7, #14]
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	701a      	strb	r2, [r3, #0]

    // Transmit frame
    OPTIGA_IFXI2C_LOG_TRANSMIT_HEX_DATA(p_buffer,DL_HEADER_SIZE + frame_len,p_ctx)
    return (ifx_i2c_pl_send_frame(p_ctx, p_buffer, DL_HEADER_SIZE + frame_len));
 8003aac:	887b      	ldrh	r3, [r7, #2]
 8003aae:	3305      	adds	r3, #5
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	6939      	ldr	r1, [r7, #16]
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f000 faf0 	bl	800409c <ifx_i2c_pl_send_frame>
 8003abc:	4603      	mov	r3, r0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <ifx_i2c_dl_resync>:

_STATIC_H optiga_lib_status_t ifx_i2c_dl_resync(ifx_i2c_context_t * p_ctx)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b084      	sub	sp, #16
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t api_status;
    // Reset tx and rx counters
    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2203      	movs	r2, #3
 8003ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    p_ctx->dl.resynced = 1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    LOG_DL("[IFX-DL]: Send Re-Sync Frame\n");
    p_ctx->dl.state = DL_STATE_RESEND;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2205      	movs	r2, #5
 8003aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    api_status = ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_RESYNC, 0);
 8003aee:	2300      	movs	r3, #0
 8003af0:	2202      	movs	r2, #2
 8003af2:	2100      	movs	r1, #0
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff ff46 	bl	8003986 <ifx_i2c_dl_send_frame_internal>
 8003afa:	4603      	mov	r3, r0
 8003afc:	81fb      	strh	r3, [r7, #14]
    return (api_status);
 8003afe:	89fb      	ldrh	r3, [r7, #14]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <ifx_i2c_dl_resend_frame>:

_STATIC_H void ifx_i2c_dl_resend_frame(ifx_i2c_context_t * p_ctx, uint8_t seqctr_value)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t status;
    // If exit timeout not violated
    uint32_t current_time_stamp = pal_os_timer_get_time_in_milliseconds();
 8003b14:	f002 faaa 	bl	800606c <pal_os_timer_get_time_in_milliseconds>
 8003b18:	60f8      	str	r0, [r7, #12]
    uint32_t time_stamp_diff = current_time_stamp - p_ctx->tl.api_start_time;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	613b      	str	r3, [r7, #16]

    if (p_ctx->tl.api_start_time > current_time_stamp)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d204      	bcs.n	8003b38 <ifx_i2c_dl_resend_frame+0x30>
    {
        time_stamp_diff = (0xFFFFFFFF + (current_time_stamp - p_ctx->tl.api_start_time)) + 0x01;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	613b      	str	r3, [r7, #16]
    }
    if (time_stamp_diff < (TL_MAX_EXIT_TIMEOUT * DL_SEC_TO_MSECS))
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ba8 <ifx_i2c_dl_resend_frame+0xa0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d82b      	bhi.n	8003b98 <ifx_i2c_dl_resend_frame+0x90>
    {
        if (DL_TRANS_REPEAT == p_ctx->dl.retransmit_counter)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d109      	bne.n	8003b5e <ifx_i2c_dl_resend_frame+0x56>
        {
            LOG_DL("[IFX-DL]: Re-Sync counters\n");
            p_ctx->dl.retransmit_counter = 0;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            status = ifx_i2c_dl_resync(p_ctx);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff ffb7 	bl	8003ac6 <ifx_i2c_dl_resync>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	82fb      	strh	r3, [r7, #22]
 8003b5c:	e014      	b.n	8003b88 <ifx_i2c_dl_resend_frame+0x80>
        }
        else
        {
            LOG_DL("[IFX-DL]: Re-TX Frame\n");
            p_ctx->dl.retransmit_counter++;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b64:	3301      	adds	r3, #1
 8003b66:	b2da      	uxtb	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            p_ctx->dl.state = DL_STATE_TX;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2202      	movs	r2, #2
 8003b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            status = ifx_i2c_dl_send_frame_internal(p_ctx, p_ctx->dl.tx_buffer_size, seqctr_value, 1);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	8f99      	ldrh	r1, [r3, #60]	@ 0x3c
 8003b7a:	78fa      	ldrb	r2, [r7, #3]
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff ff01 	bl	8003986 <ifx_i2c_dl_send_frame_internal>
 8003b84:	4603      	mov	r3, r0
 8003b86:	82fb      	strh	r3, [r7, #22]
        }
        // Handle error in above case by sending NACK
        if (IFX_I2C_STACK_SUCCESS != status)
 8003b88:	8afb      	ldrh	r3, [r7, #22]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <ifx_i2c_dl_resend_frame+0x98>
        {
            p_ctx->dl.state  = DL_STATE_NACK;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2206      	movs	r2, #6
 8003b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    }
    else
    {
        p_ctx->dl.state = DL_STATE_ERROR;
    }
}
 8003b96:	e003      	b.n	8003ba0 <ifx_i2c_dl_resend_frame+0x98>
        p_ctx->dl.state = DL_STATE_ERROR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003ba0:	bf00      	nop
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	0002bf1f 	.word	0x0002bf1f

08003bac <ifx_i2c_pl_event_handler>:

_STATIC_H void ifx_i2c_pl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b089      	sub	sp, #36	@ 0x24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	607a      	str	r2, [r7, #4]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	460b      	mov	r3, r1
 8003bba:	817b      	strh	r3, [r7, #10]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	813b      	strh	r3, [r7, #8]
    uint8_t fctr = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	757b      	strb	r3, [r7, #21]
    uint8_t fr_nr = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	77fb      	strb	r3, [r7, #31]
    uint8_t ack_nr = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	77bb      	strb	r3, [r7, #30]
    uint8_t seqctr = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	777b      	strb	r3, [r7, #29]
    uint8_t current_event;
    uint8_t ftype = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	753b      	strb	r3, [r7, #20]
    uint8_t continue_state_machine = TRUE;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	773b      	strb	r3, [r7, #28]
    uint16_t packet_len = 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	837b      	strh	r3, [r7, #26]
    uint16_t crc_received = 0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	833b      	strh	r3, [r7, #24]
    uint16_t crc_calculated = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	82fb      	strh	r3, [r7, #22]
    LOG_DL("[IFX-DL]: #Enter DL Handler\n");
    do
    {
        if ((IFX_I2C_FATAL_ERROR == event) && (DL_STATE_IDLE != p_ctx->dl.state))
 8003be4:	897b      	ldrh	r3, [r7, #10]
 8003be6:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8003bea:	d108      	bne.n	8003bfe <ifx_i2c_pl_event_handler+0x52>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d003      	beq.n	8003bfe <ifx_i2c_pl_event_handler+0x52>
        {    // Exit in case of fatal error
            LOG_DL("[IFX-DL]: Fatal error received\n");
            p_ctx->dl.state = DL_STATE_ERROR;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        }
        switch (p_ctx->dl.state)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c04:	3b01      	subs	r3, #1
 8003c06:	2b0a      	cmp	r3, #10
 8003c08:	f200 81e1 	bhi.w	8003fce <ifx_i2c_pl_event_handler+0x422>
 8003c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c14 <ifx_i2c_pl_event_handler+0x68>)
 8003c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c12:	bf00      	nop
 8003c14:	08003c41 	.word	0x08003c41
 8003c18:	08003c65 	.word	0x08003c65
 8003c1c:	08003ca5 	.word	0x08003ca5
 8003c20:	08003ef1 	.word	0x08003ef1
 8003c24:	08003f67 	.word	0x08003f67
 8003c28:	08003f4d 	.word	0x08003f4d
 8003c2c:	08003fcf 	.word	0x08003fcf
 8003c30:	08003f7f 	.word	0x08003f7f
 8003c34:	08003edd 	.word	0x08003edd
 8003c38:	08003d51 	.word	0x08003d51
 8003c3c:	08003e1d 	.word	0x08003e1d
        {
            case DL_STATE_IDLE:
            {
                current_event = (event != IFX_I2C_STACK_SUCCESS) ? IFX_I2C_DL_EVENT_ERROR : IFX_I2C_DL_EVENT_TX_SUCCESS;
 8003c40:	897b      	ldrh	r3, [r7, #10]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <ifx_i2c_pl_event_handler+0x9e>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <ifx_i2c_pl_event_handler+0xa0>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	74fb      	strb	r3, [r7, #19]
                continue_state_machine = FALSE;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx,current_event, 0, 0);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8003c56:	7cfb      	ldrb	r3, [r7, #19]
 8003c58:	b299      	uxth	r1, r3
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	47a0      	blx	r4
            }
            break;
 8003c62:	e1c3      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
            case DL_STATE_TX:
            {
                // If writing a frame failed retry sending
                if (IFX_I2C_STACK_ERROR == event)
 8003c64:	897b      	ldrh	r3, [r7, #10]
 8003c66:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8003c6a:	d104      	bne.n	8003c76 <ifx_i2c_pl_event_handler+0xca>
                {
                    p_ctx->dl.state = DL_STATE_RESEND;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2205      	movs	r2, #5
 8003c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    break;
 8003c74:	e1ba      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
                }
                LOG_DL("[IFX-DL]: Frame Sent\n");
                // Transmission successful, start receiving frame
                p_ctx->dl.frame_start_time = pal_os_timer_get_time_in_milliseconds();
 8003c76:	f002 f9f9 	bl	800606c <pal_os_timer_get_time_in_milliseconds>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	631a      	str	r2, [r3, #48]	@ 0x30
                p_ctx->dl.state = DL_STATE_RX;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2203      	movs	r2, #3
 8003c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                if (0 != ifx_i2c_pl_receive_frame(p_ctx))
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 fa2f 	bl	80040ec <ifx_i2c_pl_receive_frame>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d004      	beq.n	8003c9e <ifx_i2c_pl_event_handler+0xf2>
                {
                    p_ctx->dl.state  = DL_STATE_NACK;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2206      	movs	r2, #6
 8003c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                else
                {
                    continue_state_machine = FALSE;
                }
            }
            break;
 8003c9c:	e1a6      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
                    continue_state_machine = FALSE;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	773b      	strb	r3, [r7, #28]
            break;
 8003ca2:	e1a3      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
            case DL_STATE_RX:
            {
                if (IFX_I2C_STACK_ERROR == event)
 8003ca4:	897b      	ldrh	r3, [r7, #10]
 8003ca6:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8003caa:	d104      	bne.n	8003cb6 <ifx_i2c_pl_event_handler+0x10a>
                {    // If no frame was received retry sending
                    p_ctx->dl.state = DL_STATE_RESEND;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2205      	movs	r2, #5
 8003cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    break;
 8003cb4:	e19a      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
                }
                // Received frame from device, start analyzing
                LOG_DL("[IFX-DL]: Received Frame of length %d\n",data_len);

                if (data_len < DL_HEADER_SIZE)
 8003cb6:	893b      	ldrh	r3, [r7, #8]
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d804      	bhi.n	8003cc6 <ifx_i2c_pl_event_handler+0x11a>
                {    // Received length is less than minimum size
                    LOG_DL("[IFX-DL]: received data_len < DL_HEADER_SIZE\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2206      	movs	r2, #6
 8003cc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    break;
 8003cc4:	e192      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
                }
                // Check transmit frame sequence number
                fctr = p_data[0];
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	757b      	strb	r3, [r7, #21]
                ftype = (fctr & DL_FCTR_FTYPE_MASK) >> DL_FCTR_FTYPE_OFFSET;
 8003ccc:	7d7b      	ldrb	r3, [r7, #21]
 8003cce:	09db      	lsrs	r3, r3, #7
 8003cd0:	753b      	strb	r3, [r7, #20]
                seqctr = (fctr & DL_FCTR_SEQCTR_MASK) >> DL_FCTR_SEQCTR_OFFSET;
 8003cd2:	7d7b      	ldrb	r3, [r7, #21]
 8003cd4:	115b      	asrs	r3, r3, #5
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	f003 0303 	and.w	r3, r3, #3
 8003cdc:	777b      	strb	r3, [r7, #29]
                //lint --e{835} suppress "DL_FCTR_ACKNR_OFFSET is defined as 0x00 and is kept for future enhancements"
                ack_nr = (fctr & DL_FCTR_ACKNR_MASK) >> DL_FCTR_ACKNR_OFFSET;
 8003cde:	7d7b      	ldrb	r3, [r7, #21]
 8003ce0:	f003 0303 	and.w	r3, r3, #3
 8003ce4:	77bb      	strb	r3, [r7, #30]
                fr_nr = (fctr & DL_FCTR_FRNR_MASK) >> DL_FCTR_FRNR_OFFSET;
 8003ce6:	7d7b      	ldrb	r3, [r7, #21]
 8003ce8:	109b      	asrs	r3, r3, #2
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f003 0303 	and.w	r3, r3, #3
 8003cf0:	77fb      	strb	r3, [r7, #31]
                packet_len = (p_data[1] << 8) | p_data[2];
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	021b      	lsls	r3, r3, #8
 8003cfa:	b21a      	sxth	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3302      	adds	r3, #2
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	b21b      	sxth	r3, r3
 8003d04:	4313      	orrs	r3, r2
 8003d06:	b21b      	sxth	r3, r3
 8003d08:	837b      	strh	r3, [r7, #26]

                // Check frame CRC value
                crc_received = (p_data[data_len - 2] << 8) | p_data[data_len - 1];
 8003d0a:	893b      	ldrh	r3, [r7, #8]
 8003d0c:	3b02      	subs	r3, #2
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	4413      	add	r3, r2
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	021b      	lsls	r3, r3, #8
 8003d16:	b21a      	sxth	r2, r3
 8003d18:	893b      	ldrh	r3, [r7, #8]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	440b      	add	r3, r1
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	b21b      	sxth	r3, r3
 8003d24:	4313      	orrs	r3, r2
 8003d26:	b21b      	sxth	r3, r3
 8003d28:	833b      	strh	r3, [r7, #24]
                crc_calculated = ifx_i2c_dl_calc_crc(p_data, data_len - 2);
 8003d2a:	893b      	ldrh	r3, [r7, #8]
 8003d2c:	3b02      	subs	r3, #2
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	4619      	mov	r1, r3
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff fe05 	bl	8003942 <ifx_i2c_dl_calc_crc>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	82fb      	strh	r3, [r7, #22]
                p_ctx->dl.state = (ftype == DL_FCTR_VALUE_CONTROL_FRAME) ? DL_STATE_RX_CF : DL_STATE_RX_DF;
 8003d3c:	7d3b      	ldrb	r3, [r7, #20]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <ifx_i2c_pl_event_handler+0x19a>
 8003d42:	220b      	movs	r2, #11
 8003d44:	e000      	b.n	8003d48 <ifx_i2c_pl_event_handler+0x19c>
 8003d46:	220a      	movs	r2, #10
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            }
            break;
 8003d4e:	e14d      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
            case DL_STATE_RX_DF:
            {
                LOG_DL("[IFX-DL]: Data Frame Received\n");
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8003d50:	8b3a      	ldrh	r2, [r7, #24]
 8003d52:	8afb      	ldrh	r3, [r7, #22]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d10d      	bne.n	8003d74 <ifx_i2c_pl_event_handler+0x1c8>
 8003d58:	8b7b      	ldrh	r3, [r7, #26]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <ifx_i2c_pl_event_handler+0x1c8>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8003d5e:	893a      	ldrh	r2, [r7, #8]
 8003d60:	8b7b      	ldrh	r3, [r7, #26]
 8003d62:	3305      	adds	r3, #5
                if ((crc_received != crc_calculated) || (0 == packet_len) ||
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d105      	bne.n	8003d74 <ifx_i2c_pl_event_handler+0x1c8>
                    (data_len != (DL_HEADER_SIZE + packet_len)) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) ||
 8003d68:	7f7b      	ldrb	r3, [r7, #29]
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d002      	beq.n	8003d74 <ifx_i2c_pl_event_handler+0x1c8>
 8003d6e:	7f7b      	ldrb	r3, [r7, #29]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d104      	bne.n	8003d7e <ifx_i2c_pl_event_handler+0x1d2>
                    (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
                {
                    // CRC,Length of data frame is 0/ SEQCTR has RFU/Re-sync in Data frame
                    LOG_DL("[IFX-DL]: NACK for CRC error,Data frame length is not correct,RFU in SEQCTR\n");
                    p_ctx->dl.state  = DL_STATE_NACK;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2206      	movs	r2, #6
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    break;
 8003d7c:	e136      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
                }
                if (fr_nr != ((p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM))
 8003d7e:	7ffa      	ldrb	r2, [r7, #31]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d86:	3301      	adds	r3, #1
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d00c      	beq.n	8003daa <ifx_i2c_pl_event_handler+0x1fe>
                {
                    LOG_DL("[IFX-DL]: Data frame number not expected\n");
                    p_ctx->dl.state  = DL_STATE_DISCARD;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2209      	movs	r2, #9
 8003d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    continue_state_machine = FALSE;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	773b      	strb	r3, [r7, #28]
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	2200      	movs	r2, #0
 8003da0:	2100      	movs	r1, #0
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f7ff fdef 	bl	8003986 <ifx_i2c_dl_send_frame_internal>
                    break;
 8003da8:	e120      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
                }
                if (ack_nr != p_ctx->dl.tx_seq_nr)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db0:	7fba      	ldrb	r2, [r7, #30]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d004      	beq.n	8003dc0 <ifx_i2c_pl_event_handler+0x214>
                {
                    // ack number error
                    LOG_DL("[IFX-DL]: Error in ack number\n");
                    //lint --e{534} suppress "Error handling is not required so return value is not checked"
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2209      	movs	r2, #9
 8003dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    break;
 8003dbe:	e115      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 8003dc0:	7f7b      	ldrb	r3, [r7, #29]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d104      	bne.n	8003dd0 <ifx_i2c_pl_event_handler+0x224>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received in data frame\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2205      	movs	r2, #5
 8003dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    break;
 8003dce:	e10d      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
                }
                p_ctx->dl.rx_seq_nr = (p_ctx->dl.rx_seq_nr + 1) & DL_MAX_FRAME_NUM;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
                memcpy(p_ctx->dl.p_rx_frame_buffer, p_data, data_len);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dea:	893a      	ldrh	r2, [r7, #8]
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f004 ff1e 	bl	8008c30 <memcpy>
                p_ctx->dl.rx_buffer_size = data_len;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	893a      	ldrh	r2, [r7, #8]
 8003df8:	87da      	strh	r2, [r3, #62]	@ 0x3e

                // Send control frame to acknowledge reception of this data frame
                LOG_DL("[IFX-DL]: Read Data Frame -> Send ACK\n");
                p_ctx->dl.retransmit_counter = 0;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
                p_ctx->dl.state = DL_STATE_ACK;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2204      	movs	r2, #4
 8003e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                continue_state_machine = FALSE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	773b      	strb	r3, [r7, #28]

                OPTIGA_COMMS_LOG_MESSAGE("<<<<");\
                OPTIGA_IFXI2C_LOG_RECEIVE_HEX_DATA(p_data,data_len,p_ctx);
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_ACK, 0);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2200      	movs	r2, #0
 8003e12:	2100      	movs	r1, #0
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f7ff fdb6 	bl	8003986 <ifx_i2c_dl_send_frame_internal>
            }
            break;
 8003e1a:	e0e7      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
            {
                LOG_DL("[IFX-DL]: Control Frame Received\n");
                // Except Re-Sync, Discard Control frame when in receiver mode
                // Discard Re-Sync in transmission mode
                //lint --e{514} suppress "Refer the above comment for the explaination of this check"
                if ((p_ctx->dl.action_rx_only) ^ (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e22:	461a      	mov	r2, r3
 8003e24:	7f7b      	ldrb	r3, [r7, #29]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	bf0c      	ite	eq
 8003e2a:	2301      	moveq	r3, #1
 8003e2c:	2300      	movne	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d004      	beq.n	8003e3e <ifx_i2c_pl_event_handler+0x292>
                {
                    //If control frame already received for data frame, ignore any received control frame
                    LOG_DL("[IFX-DL]: CF in receiver mode,Discard\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2209      	movs	r2, #9
 8003e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    break;
 8003e3c:	e0d6      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
                }
                if (crc_received != crc_calculated)
 8003e3e:	8b3a      	ldrh	r2, [r7, #24]
 8003e40:	8afb      	ldrh	r3, [r7, #22]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d004      	beq.n	8003e50 <ifx_i2c_pl_event_handler+0x2a4>
                {
                    // Re-Transmit frame in case of CF CRC error
                    LOG_DL("[IFX-DL]: Retransmit frame for CF CRC error\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2205      	movs	r2, #5
 8003e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    break;
 8003e4e:	e0cd      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
                }
                if ((data_len > DL_CONTROL_FRAME_LENGTH) || (0 != packet_len))
 8003e50:	893b      	ldrh	r3, [r7, #8]
 8003e52:	2b05      	cmp	r3, #5
 8003e54:	d802      	bhi.n	8003e5c <ifx_i2c_pl_event_handler+0x2b0>
 8003e56:	8b7b      	ldrh	r3, [r7, #26]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d004      	beq.n	8003e66 <ifx_i2c_pl_event_handler+0x2ba>
                {
                    // Control frame is more than 5/Control frame with non-zero FRNR/packet len is not 0
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2209      	movs	r2, #9
 8003e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    break;
 8003e64:	e0c2      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
                }
                if (DL_FCTR_SEQCTR_VALUE_RESYNC == seqctr)
 8003e66:	7f7b      	ldrb	r3, [r7, #29]
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d110      	bne.n	8003e8e <ifx_i2c_pl_event_handler+0x2e2>
                {    // Re-sync received
                    LOG_DL("[IFX-DL]: Re-Sync received\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2209      	movs	r2, #9
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    p_ctx->dl.resynced = 1;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                    p_ctx->dl.tx_seq_nr = DL_MAX_FRAME_NUM;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2203      	movs	r2, #3
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
                    p_ctx->dl.rx_seq_nr = DL_MAX_FRAME_NUM;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2203      	movs	r2, #3
 8003e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
                    break;
 8003e8c:	e0ae      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
                }
                if ((0 != fr_nr) || (DL_FCTR_SEQCTR_VALUE_RFU == seqctr) || (ack_nr != p_ctx->dl.tx_seq_nr))
 8003e8e:	7ffb      	ldrb	r3, [r7, #31]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d108      	bne.n	8003ea6 <ifx_i2c_pl_event_handler+0x2fa>
 8003e94:	7f7b      	ldrb	r3, [r7, #29]
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d005      	beq.n	8003ea6 <ifx_i2c_pl_event_handler+0x2fa>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ea0:	7fba      	ldrb	r2, [r7, #30]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d004      	beq.n	8003eb0 <ifx_i2c_pl_event_handler+0x304>
                {
                    // Control frame with non-zero FRNR/ ACK not received/ ack number != tx number
                    LOG_DL("[IFX-DL]: Errors in control frame\n");
                    p_ctx->dl.state = DL_STATE_DISCARD;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2209      	movs	r2, #9
 8003eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    break;
 8003eae:	e09d      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
                }
                if (DL_FCTR_SEQCTR_VALUE_NACK == seqctr)
 8003eb0:	7f7b      	ldrb	r3, [r7, #29]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d104      	bne.n	8003ec0 <ifx_i2c_pl_event_handler+0x314>
                {
                    // NACK for transmitted frame
                    LOG_DL("[IFX-DL]: NACK received\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2205      	movs	r2, #5
 8003eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    break;
 8003ebe:	e095      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
                }

                LOG_DL("[IFX-DL]: ACK received\n");
                // Report frame reception to upper layer and go in idle state
                p_ctx->dl.state = DL_STATE_IDLE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                continue_state_machine = FALSE;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	773b      	strb	r3, [r7, #28]
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_TX_SUCCESS, 0, 0);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	2102      	movs	r1, #2
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	47a0      	blx	r4
            }
            break;
 8003eda:	e087      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
            case DL_STATE_DISCARD:
            {
                LOG_DL("[IFX-DL]: Discard frame\n");
                p_ctx->dl.state = DL_STATE_RX;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2203      	movs	r2, #3
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                continue_state_machine = FALSE;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_pl_receive_frame(p_ctx);
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f8ff 	bl	80040ec <ifx_i2c_pl_receive_frame>
            }
            break;
 8003eee:	e07d      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
            case DL_STATE_ACK:
            {
                LOG_DL("[IFX-DL]: ACK sent\n");
                if (IFX_I2C_STACK_ERROR == event)
 8003ef0:	897b      	ldrh	r3, [r7, #10]
 8003ef2:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 8003ef6:	d104      	bne.n	8003f02 <ifx_i2c_pl_event_handler+0x356>
                {
                    // If writing the ACK frame failed, Re-Send
                    LOG_DL("[IFX-DL]: Physical Layer error -> Resend ACK\n");
                    p_ctx->dl.state = DL_STATE_RESEND;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2205      	movs	r2, #5
 8003efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    break;
 8003f00:	e074      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
                }
                // Control frame successful transmitted
                p_ctx->dl.state = DL_STATE_IDLE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                continue_state_machine = FALSE;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	773b      	strb	r3, [r7, #28]
                if (0 != p_ctx->dl.action_rx_only)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00c      	beq.n	8003f32 <ifx_i2c_pl_event_handler+0x386>
                {
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
                                                        IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f20:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8003f26:	3b05      	subs	r3, #5
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2104      	movs	r1, #4
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	47a0      	blx	r4
                                                        IFX_I2C_DL_EVENT_TX_SUCCESS | IFX_I2C_DL_EVENT_RX_SUCCESS,
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
                }
            }
            break;
 8003f30:	e05c      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
                                                        p_ctx->dl.p_rx_frame_buffer + 3,
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3a:	1cda      	adds	r2, r3, #3
                                                        p_ctx->dl.rx_buffer_size - DL_HEADER_SIZE);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
                    p_ctx->dl.upper_layer_event_handler(p_ctx,
 8003f40:	3b05      	subs	r3, #5
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2106      	movs	r1, #6
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	47a0      	blx	r4
            break;
 8003f4a:	e04f      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
            case DL_STATE_NACK:
            {
                // Sending NACK
                LOG_DL("[IFX-DL]: Sending NACK\n");
                p_ctx->dl.state = DL_STATE_TX;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                continue_state_machine = FALSE;
 8003f54:	2300      	movs	r3, #0
 8003f56:	773b      	strb	r3, [r7, #28]
                //lint --e{534} suppress "Error handling is not required so return value is not checked"
                ifx_i2c_dl_send_frame_internal(p_ctx, 0, DL_FCTR_SEQCTR_VALUE_NACK, 0);
 8003f58:	2300      	movs	r3, #0
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f7ff fd11 	bl	8003986 <ifx_i2c_dl_send_frame_internal>
            }
            break;
 8003f64:	e042      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
            case DL_STATE_RESEND:
            {
                //Resend frame
                ifx_i2c_dl_resend_frame(p_ctx, DL_FCTR_SEQCTR_VALUE_ACK);
 8003f66:	2100      	movs	r1, #0
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f7ff fdcd 	bl	8003b08 <ifx_i2c_dl_resend_frame>
                if (DL_STATE_ERROR != p_ctx->dl.state)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f74:	2b08      	cmp	r3, #8
 8003f76:	d038      	beq.n	8003fea <ifx_i2c_pl_event_handler+0x43e>
                {
                    continue_state_machine = FALSE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	773b      	strb	r3, [r7, #28]
                }
            }
            break;
 8003f7c:	e035      	b.n	8003fea <ifx_i2c_pl_event_handler+0x43e>
            case DL_STATE_ERROR:
            {
                if (0 == p_ctx->dl.resynced)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d103      	bne.n	8003f90 <ifx_i2c_pl_event_handler+0x3e4>
                {
                    p_ctx->dl.error = 1;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
                }
                if (0 == p_ctx->dl.error)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d10b      	bne.n	8003fb2 <ifx_i2c_pl_event_handler+0x406>
                {
                    LOG_DL("[IFX-DL]: Exit error after fatal error\n");
                    //After sending resync, inform upper layer
                    p_ctx->dl.state = DL_STATE_IDLE;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	2200      	movs	r2, #0
 8003faa:	2101      	movs	r1, #1
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	47a0      	blx	r4
 8003fb0:	e00a      	b.n	8003fc8 <ifx_i2c_pl_event_handler+0x41c>
                else
                {
                    LOG_DL("[IFX-DL]: Sending re-sync after fatal error\n");
                    // Send re-sync to slave on error
                    //lint --e{534} suppress "As this is last step, no effect of checking return code"
                    ifx_i2c_dl_resync(p_ctx);
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f7ff fd87 	bl	8003ac6 <ifx_i2c_dl_resync>
                    p_ctx->dl.state = DL_STATE_ERROR;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2208      	movs	r2, #8
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                    p_ctx->dl.error = 0;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
                }
                continue_state_machine = FALSE;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	773b      	strb	r3, [r7, #28]
            }
            break;
 8003fcc:	e00e      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
            default:
                LOG_DL("[IFX-DL]: Default condition occurred. Exiting with error\n");
                p_ctx->dl.state = DL_STATE_IDLE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                p_ctx->dl.upper_layer_event_handler(p_ctx, IFX_I2C_DL_EVENT_ERROR, 0, 0);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 8003fda:	2300      	movs	r3, #0
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2101      	movs	r1, #1
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	47a0      	blx	r4
                continue_state_machine = FALSE;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	773b      	strb	r3, [r7, #28]
                break;
 8003fe8:	e000      	b.n	8003fec <ifx_i2c_pl_event_handler+0x440>
            break;
 8003fea:	bf00      	nop
        }
    } while (TRUE == continue_state_machine);
 8003fec:	7f3b      	ldrb	r3, [r7, #28]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	f43f adf8 	beq.w	8003be4 <ifx_i2c_pl_event_handler+0x38>
    LOG_DL("[IFX-DL]: #Exiting DL Handler\n");
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	3724      	adds	r7, #36	@ 0x24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd90      	pop	{r4, r7, pc}
 8003ffe:	bf00      	nop

08004000 <ifx_i2c_pl_init>:
_STATIC_H void ifx_i2c_pl_pal_slave_addr_event_handler(void * p_input_ctx, optiga_lib_status_t event);

/// @endcond

optiga_lib_status_t ifx_i2c_pl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
    LOG_PL("[IFX-PL]: Init\n");

    p_ctx->pl.upper_layer_event_handler = handler;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	64da      	str	r2, [r3, #76]	@ 0x4c
    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2171 	strb.w	r2, [r3, #369]	@ 0x171
    p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_DEFAULT;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	22bb      	movs	r2, #187	@ 0xbb
 800401c:	f883 2172 	strb.w	r2, [r3, #370]	@ 0x172
    p_ctx->p_pal_i2c_ctx->slave_address = p_ctx->slave_address;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	f892 23c6 	ldrb.w	r2, [r2, #966]	@ 0x3c6
 800402c:	731a      	strb	r2, [r3, #12]
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler = (void *)ifx_i2c_pl_pal_event_handler;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8004034:	4a18      	ldr	r2, [pc, #96]	@ (8004098 <ifx_i2c_pl_init+0x98>)
 8004036:	609a      	str	r2, [r3, #8]
    p_ctx->pl.retry_counter = PL_POLLING_MAX_CNT;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	22c8      	movs	r2, #200	@ 0xc8
 800403c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    if (TRUE == p_ctx->do_pal_init)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 33cb 	ldrb.w	r3, [r3, #971]	@ 0x3cb
 8004046:	2b01      	cmp	r3, #1
 8004048:	d10b      	bne.n	8004062 <ifx_i2c_pl_init+0x62>
    {
        // Initialize I2C driver
        if (PAL_STATUS_SUCCESS != pal_i2c_init(p_ctx->p_pal_i2c_ctx))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8004050:	4618      	mov	r0, r3
 8004052:	f001 fd55 	bl	8005b00 <pal_i2c_init>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <ifx_i2c_pl_init+0x62>
        {
            return (IFX_I2C_STACK_ERROR);
 800405c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8004060:	e016      	b.n	8004090 <ifx_i2c_pl_init+0x90>
        }
    }
    // Set Physical Layer internal state
    if ((uint8_t)TRUE == p_ctx->pl.request_soft_reset)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3173 	ldrb.w	r3, [r3, #371]	@ 0x173
 8004068:	2b01      	cmp	r3, #1
 800406a:	d108      	bne.n	800407e <ifx_i2c_pl_init+0x7e>
    {
        //Set the soft reset request to initial state to read register
        p_ctx->pl.request_soft_reset = PL_INIT_GET_STATUS_REG;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2299      	movs	r2, #153	@ 0x99
 8004070:	f883 2173 	strb.w	r2, [r3, #371]	@ 0x173
        p_ctx->pl.frame_state = PL_STATE_SOFT_RESET;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2205      	movs	r2, #5
 8004078:	f883 2171 	strb.w	r2, [r3, #369]	@ 0x171
 800407c:	e003      	b.n	8004086 <ifx_i2c_pl_init+0x86>
    }
    else
    {
        p_ctx->pl.frame_state = PL_STATE_INIT;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2171 	strb.w	r2, [r3, #369]	@ 0x171
    }

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8004086:	2100      	movs	r1, #0
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fa81 	bl	8004590 <ifx_i2c_pl_frame_event_handler>

    return (IFX_I2C_STACK_SUCCESS);
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	0800485d 	.word	0x0800485d

0800409c <ifx_i2c_pl_send_frame>:

optiga_lib_status_t ifx_i2c_pl_send_frame(ifx_i2c_context_t * p_ctx, uint8_t * p_frame, uint16_t frame_len)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	4613      	mov	r3, r2
 80040a8:	80fb      	strh	r3, [r7, #6]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f893 3171 	ldrb.w	r3, [r3, #369]	@ 0x171
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d007      	beq.n	80040c4 <ifx_i2c_pl_send_frame+0x28>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f893 3171 	ldrb.w	r3, [r3, #369]	@ 0x171
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d002      	beq.n	80040c4 <ifx_i2c_pl_send_frame+0x28>
    {
        return (IFX_I2C_STACK_ERROR);
 80040be:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80040c2:	e00f      	b.n	80040e4 <ifx_i2c_pl_send_frame+0x48>
    }
    p_ctx->pl.frame_action = PL_ACTION_WRITE_FRAME;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2170 	strb.w	r2, [r3, #368]	@ 0x170

    // Store reference to frame for sending it later
    p_ctx->pl.p_tx_frame   = p_frame;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	649a      	str	r2, [r3, #72]	@ 0x48
    p_ctx->pl.tx_frame_len = frame_len;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	88fa      	ldrh	r2, [r7, #6]
 80040d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 80040da:	2100      	movs	r1, #0
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 fa57 	bl	8004590 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <ifx_i2c_pl_receive_frame>:

optiga_lib_status_t ifx_i2c_pl_receive_frame(ifx_i2c_context_t * p_ctx)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
    // Physical Layer must be idle, set requested action
    if ((PL_STATE_INIT != p_ctx->pl.frame_state) && (PL_STATE_READY != p_ctx->pl.frame_state))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 3171 	ldrb.w	r3, [r3, #369]	@ 0x171
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d007      	beq.n	800410e <ifx_i2c_pl_receive_frame+0x22>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3171 	ldrb.w	r3, [r3, #369]	@ 0x171
 8004104:	2b02      	cmp	r3, #2
 8004106:	d002      	beq.n	800410e <ifx_i2c_pl_receive_frame+0x22>
    {
        return (IFX_I2C_STACK_ERROR);
 8004108:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800410c:	e008      	b.n	8004120 <ifx_i2c_pl_receive_frame+0x34>
    }
    p_ctx->pl.frame_action = PL_ACTION_READ_FRAME;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2202      	movs	r2, #2
 8004112:	f883 2170 	strb.w	r2, [r3, #368]	@ 0x170

    ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 8004116:	2100      	movs	r1, #0
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 fa39 	bl	8004590 <ifx_i2c_pl_frame_event_handler>
    return (IFX_I2C_STACK_SUCCESS);
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <ifx_i2c_pl_read_register>:

    return (status);
}

_STATIC_H void ifx_i2c_pl_read_register(ifx_i2c_context_t * p_ctx, uint8_t reg_addr, uint16_t reg_len)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	70fb      	strb	r3, [r7, #3]
 8004134:	4613      	mov	r3, r2
 8004136:	803b      	strh	r3, [r7, #0]
    LOG_PL("[IFX-PL]: Read register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address
    p_ctx->pl.buffer[0]     = reg_addr;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	78fa      	ldrb	r2, [r7, #3]
 800413c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    p_ctx->pl.buffer_tx_len = 1;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    // Set low level interface variables and start transmission
    p_ctx->pl.buffer_rx_len   = reg_len;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	883a      	ldrh	r2, [r7, #0]
 800414c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    p_ctx->pl.register_action = PL_ACTION_READ_REGISTER;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 216e 	strb.w	r2, [r3, #366]	@ 0x16e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	22c8      	movs	r2, #200	@ 0xc8
 800415c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 216f 	strb.w	r2, [r3, #367]	@ 0x16f

    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8d3 017c 	ldr.w	r0, [r3, #380]	@ 0x17c
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800417a:	461a      	mov	r2, r3
 800417c:	f001 fcd6 	bl	8005b2c <pal_i2c_write>
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <ifx_i2c_pl_write_register>:

_STATIC_H void ifx_i2c_pl_write_register(ifx_i2c_context_t * p_ctx,
                                         uint8_t reg_addr,
                                         uint16_t reg_len,
                                         const uint8_t * p_content)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	607b      	str	r3, [r7, #4]
 8004192:	460b      	mov	r3, r1
 8004194:	72fb      	strb	r3, [r7, #11]
 8004196:	4613      	mov	r3, r2
 8004198:	813b      	strh	r3, [r7, #8]
    LOG_PL("[IFX-PL]: Write register %x len %d\n", reg_addr, reg_len);

    // Prepare transmit buffer to write register address and content
    p_ctx->pl.buffer[0] = reg_addr;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	7afa      	ldrb	r2, [r7, #11]
 800419e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    memcpy(p_ctx->pl.buffer + 1, p_content, reg_len);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3358      	adds	r3, #88	@ 0x58
 80041a6:	3301      	adds	r3, #1
 80041a8:	893a      	ldrh	r2, [r7, #8]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f004 fd3f 	bl	8008c30 <memcpy>
    p_ctx->pl.buffer_tx_len = 1 + reg_len;
 80041b2:	893b      	ldrh	r3, [r7, #8]
 80041b4:	3301      	adds	r3, #1
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    // Set Physical Layer low level interface variables and start transmission
    p_ctx->pl.register_action = PL_ACTION_WRITE_REGISTER;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2202      	movs	r2, #2
 80041c2:	f883 216e 	strb.w	r2, [r3, #366]	@ 0x16e
    p_ctx->pl.retry_counter   = PL_POLLING_MAX_CNT;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	22c8      	movs	r2, #200	@ 0xc8
 80041ca:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    p_ctx->pl.i2c_cmd         = PL_I2C_CMD_WRITE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 216f 	strb.w	r2, [r3, #367]	@ 0x16f
    //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
    pal_i2c_write(p_ctx->p_pal_i2c_ctx, p_ctx->pl.buffer, p_ctx->pl.buffer_tx_len);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f8d3 017c 	ldr.w	r0, [r3, #380]	@ 0x17c
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80041e8:	461a      	mov	r2, r3
 80041ea:	f001 fc9f 	bl	8005b2c <pal_i2c_write>
}
 80041ee:	bf00      	nop
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <ifx_i2c_pl_status_poll_callback>:


_STATIC_H void ifx_i2c_pl_status_poll_callback(void * p_ctx)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
    LOG_PL("[IFX-PL]: Status poll Timer elapsed  -> Read STATUS register\n");
    ifx_i2c_pl_read_register((ifx_i2c_context_t * )p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 80041fe:	2204      	movs	r2, #4
 8004200:	2182      	movs	r1, #130	@ 0x82
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7ff ff90 	bl	8004128 <ifx_i2c_pl_read_register>
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <ifx_i2c_pl_set_bit_rate>:

_STATIC_H optiga_lib_status_t ifx_i2c_pl_set_bit_rate(ifx_i2c_context_t * p_ctx, uint16_t bitrate)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	807b      	strh	r3, [r7, #2]
    optiga_lib_status_t status;
    void* p_pal_ctx_upper_layer_handler;
    // Save upper layer context in pal
    p_pal_ctx_upper_layer_handler = p_ctx->p_pal_i2c_ctx->upper_layer_event_handler;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	60bb      	str	r3, [r7, #8]
    // Pass context as NULL to avoid callback invocation
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = NULL;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 800422c:	2200      	movs	r2, #0
 800422e:	609a      	str	r2, [r3, #8]
    status = pal_i2c_set_bitrate(p_ctx->p_pal_i2c_ctx , bitrate);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 8004236:	887a      	ldrh	r2, [r7, #2]
 8004238:	4611      	mov	r1, r2
 800423a:	4618      	mov	r0, r3
 800423c:	f001 fd02 	bl	8005c44 <pal_i2c_set_bitrate>
 8004240:	4603      	mov	r3, r0
 8004242:	81fb      	strh	r3, [r7, #14]
    // Restore callback
    p_ctx->p_pal_i2c_ctx->upper_layer_event_handler  = p_pal_ctx_upper_layer_handler;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	609a      	str	r2, [r3, #8]
    if (PAL_I2C_EVENT_SUCCESS != status)
 800424e:	89fb      	ldrh	r3, [r7, #14]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d019      	beq.n	8004288 <ifx_i2c_pl_set_bit_rate+0x78>
    {
        if (0 != (p_ctx->pl.retry_counter--))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800425a:	1e5a      	subs	r2, r3, #1
 800425c:	b291      	uxth	r1, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	f8a2 1050 	strh.w	r1, [r2, #80]	@ 0x50
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00b      	beq.n	8004280 <ifx_i2c_pl_set_bit_rate+0x70>
        {
            LOG_PL("[IFX-PL]: Set bit rate failed, Retry setting.\n");
            pal_os_event_register_callback_oneshot( p_ctx->pal_os_event_ctx,
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 0190 	ldr.w	r0, [r3, #400]	@ 0x190
 800426e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	4908      	ldr	r1, [pc, #32]	@ (8004298 <ifx_i2c_pl_set_bit_rate+0x88>)
 8004276:	f001 fe7b 	bl	8005f70 <pal_os_event_register_callback_oneshot>
                                                    ifx_i2c_pl_negotiation_event_handler,
                                                   ((void * )p_ctx),
                                                   PL_POLLING_INVERVAL_US);
            status = IFX_I2C_STACK_BUSY;
 800427a:	2301      	movs	r3, #1
 800427c:	81fb      	strh	r3, [r7, #14]
 800427e:	e005      	b.n	800428c <ifx_i2c_pl_set_bit_rate+0x7c>
        }
        else
        {
           status = IFX_I2C_STACK_ERROR;
 8004280:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8004284:	81fb      	strh	r3, [r7, #14]
 8004286:	e001      	b.n	800428c <ifx_i2c_pl_set_bit_rate+0x7c>
        }
    }
    else
    {
        status = IFX_I2C_STACK_SUCCESS;
 8004288:	2300      	movs	r3, #0
 800428a:	81fb      	strh	r3, [r7, #14]
    }

    return (status);
 800428c:	89fb      	ldrh	r3, [r7, #14]

}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	0800429d 	.word	0x0800429d

0800429c <ifx_i2c_pl_negotiation_event_handler>:
_STATIC_H void ifx_i2c_pl_negotiation_event_handler(void * p_input_ctx)
{
 800429c:	b590      	push	{r4, r7, lr}
 800429e:	b08b      	sub	sp, #44	@ 0x2c
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t event = (optiga_lib_status_t)IFX_I2C_STACK_ERROR;
 80042a4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80042a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t continue_negotiation;
    ifx_i2c_context_t * p_ctx = (ifx_i2c_context_t * )p_input_ctx;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	61bb      	str	r3, [r7, #24]
    uint8_t i2c_mode_value[2];
    uint8_t max_frame_size[2] = { (uint8_t)(p_ctx->frame_size >> 8), (uint8_t)(p_ctx->frame_size) };
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 80042b4:	0a1b      	lsrs	r3, r3, #8
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	733b      	strb	r3, [r7, #12]
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	737b      	strb	r3, [r7, #13]
    uint16_t buffer_len = 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t slave_frequency;
    uint16_t slave_frame_len;
    uint8_t* p_buffer = NULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]

    do
    {
        continue_negotiation = FALSE;
 80042ce:	2300      	movs	r3, #0
 80042d0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        LOG_PL("[IFX-PL]: Negotiation started\n");
        switch (p_ctx->pl.negotiate_state)
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	f893 3172 	ldrb.w	r3, [r3, #370]	@ 0x172
 80042da:	2bbb      	cmp	r3, #187	@ 0xbb
 80042dc:	d031      	beq.n	8004342 <ifx_i2c_pl_negotiation_event_handler+0xa6>
 80042de:	2bbb      	cmp	r3, #187	@ 0xbb
 80042e0:	f300 8144 	bgt.w	800456c <ifx_i2c_pl_negotiation_event_handler+0x2d0>
 80042e4:	2baa      	cmp	r3, #170	@ 0xaa
 80042e6:	f000 812d 	beq.w	8004544 <ifx_i2c_pl_negotiation_event_handler+0x2a8>
 80042ea:	2baa      	cmp	r3, #170	@ 0xaa
 80042ec:	f300 813e 	bgt.w	800456c <ifx_i2c_pl_negotiation_event_handler+0x2d0>
 80042f0:	2b88      	cmp	r3, #136	@ 0x88
 80042f2:	f000 8103 	beq.w	80044fc <ifx_i2c_pl_negotiation_event_handler+0x260>
 80042f6:	2b88      	cmp	r3, #136	@ 0x88
 80042f8:	f300 8138 	bgt.w	800456c <ifx_i2c_pl_negotiation_event_handler+0x2d0>
 80042fc:	2b77      	cmp	r3, #119	@ 0x77
 80042fe:	f000 80c6 	beq.w	800448e <ifx_i2c_pl_negotiation_event_handler+0x1f2>
 8004302:	2b77      	cmp	r3, #119	@ 0x77
 8004304:	f300 8132 	bgt.w	800456c <ifx_i2c_pl_negotiation_event_handler+0x2d0>
 8004308:	2b66      	cmp	r3, #102	@ 0x66
 800430a:	f000 809d 	beq.w	8004448 <ifx_i2c_pl_negotiation_event_handler+0x1ac>
 800430e:	2b66      	cmp	r3, #102	@ 0x66
 8004310:	f300 812c 	bgt.w	800456c <ifx_i2c_pl_negotiation_event_handler+0x2d0>
 8004314:	2b55      	cmp	r3, #85	@ 0x55
 8004316:	f000 808d 	beq.w	8004434 <ifx_i2c_pl_negotiation_event_handler+0x198>
 800431a:	2b55      	cmp	r3, #85	@ 0x55
 800431c:	f300 8126 	bgt.w	800456c <ifx_i2c_pl_negotiation_event_handler+0x2d0>
 8004320:	2b44      	cmp	r3, #68	@ 0x44
 8004322:	d040      	beq.n	80043a6 <ifx_i2c_pl_negotiation_event_handler+0x10a>
 8004324:	2b44      	cmp	r3, #68	@ 0x44
 8004326:	f300 8121 	bgt.w	800456c <ifx_i2c_pl_negotiation_event_handler+0x2d0>
 800432a:	2b33      	cmp	r3, #51	@ 0x33
 800432c:	d031      	beq.n	8004392 <ifx_i2c_pl_negotiation_event_handler+0xf6>
 800432e:	2b33      	cmp	r3, #51	@ 0x33
 8004330:	f300 811c 	bgt.w	800456c <ifx_i2c_pl_negotiation_event_handler+0x2d0>
 8004334:	2b11      	cmp	r3, #17
 8004336:	f000 80cb 	beq.w	80044d0 <ifx_i2c_pl_negotiation_event_handler+0x234>
 800433a:	2b22      	cmp	r3, #34	@ 0x22
 800433c:	f000 80d4 	beq.w	80044e8 <ifx_i2c_pl_negotiation_event_handler+0x24c>
                // Negotiation between master and slave is complete
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
            }
            break;
            default:
                break;
 8004340:	e114      	b.n	800456c <ifx_i2c_pl_negotiation_event_handler+0x2d0>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, PL_DEFAULT_FREQUENCY);
 8004342:	2164      	movs	r1, #100	@ 0x64
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7ff ff63 	bl	8004210 <ifx_i2c_pl_set_bit_rate>
 800434a:	4603      	mov	r3, r0
 800434c:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 800434e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004350:	2b00      	cmp	r3, #0
 8004352:	d107      	bne.n	8004364 <ifx_i2c_pl_negotiation_event_handler+0xc8>
                    p_ctx->pl.negotiate_state = PL_INIT_GET_FREQ_REG;
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2233      	movs	r2, #51	@ 0x33
 8004358:	f883 2172 	strb.w	r2, [r3, #370]	@ 0x172
                    continue_negotiation = TRUE;
 800435c:	2301      	movs	r3, #1
 800435e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8004362:	e105      	b.n	8004570 <ifx_i2c_pl_negotiation_event_handler+0x2d4>
                else if (IFX_I2C_STACK_ERROR == event)
 8004364:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004366:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 800436a:	f040 8101 	bne.w	8004570 <ifx_i2c_pl_negotiation_event_handler+0x2d4>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	22aa      	movs	r2, #170	@ 0xaa
 8004372:	f883 2172 	strb.w	r2, [r3, #370]	@ 0x172
                    p_buffer = NULL;
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 800437a:	2300      	movs	r3, #0
 800437c:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_negotiation_event_handler,
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	f8d3 0190 	ldr.w	r0, [r3, #400]	@ 0x190
 8004384:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4980      	ldr	r1, [pc, #512]	@ (800458c <ifx_i2c_pl_negotiation_event_handler+0x2f0>)
 800438c:	f001 fdf0 	bl	8005f70 <pal_os_event_register_callback_oneshot>
            break;
 8004390:	e0ee      	b.n	8004570 <ifx_i2c_pl_negotiation_event_handler+0x2d4>
                p_ctx->pl.negotiate_state = PL_INIT_SET_FREQ_REG;
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	2244      	movs	r2, #68	@ 0x44
 8004396:	f883 2172 	strb.w	r2, [r3, #370]	@ 0x172
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 800439a:	2204      	movs	r2, #4
 800439c:	2184      	movs	r1, #132	@ 0x84
 800439e:	69b8      	ldr	r0, [r7, #24]
 80043a0:	f7ff fec2 	bl	8004128 <ifx_i2c_pl_read_register>
            break;
 80043a4:	e0e7      	b.n	8004576 <ifx_i2c_pl_negotiation_event_handler+0x2da>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 80043ac:	021b      	lsls	r3, r3, #8
 80043ae:	b21a      	sxth	r2, r3
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
 80043b6:	b21b      	sxth	r3, r3
 80043b8:	4313      	orrs	r3, r2
 80043ba:	b21b      	sxth	r3, r3
 80043bc:	82bb      	strh	r3, [r7, #20]
                i2c_mode_value[0] = PL_REG_I2C_MODE_PERSISTANT;
 80043be:	2380      	movs	r3, #128	@ 0x80
 80043c0:	743b      	strb	r3, [r7, #16]
                if ((p_ctx->frequency > PL_SM_FM_MAX_FREQUENCY) && (slave_frequency <= PL_SM_FM_MAX_FREQUENCY))
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	f8b3 3194 	ldrh.w	r3, [r3, #404]	@ 0x194
 80043c8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80043cc:	d911      	bls.n	80043f2 <ifx_i2c_pl_negotiation_event_handler+0x156>
 80043ce:	8abb      	ldrh	r3, [r7, #20]
 80043d0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80043d4:	d80d      	bhi.n	80043f2 <ifx_i2c_pl_negotiation_event_handler+0x156>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_FM_PLUS;
 80043d6:	2304      	movs	r3, #4
 80043d8:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	2255      	movs	r2, #85	@ 0x55
 80043de:	f883 2172 	strb.w	r2, [r3, #370]	@ 0x172
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 80043e2:	f107 0310 	add.w	r3, r7, #16
 80043e6:	2202      	movs	r2, #2
 80043e8:	2189      	movs	r1, #137	@ 0x89
 80043ea:	69b8      	ldr	r0, [r7, #24]
 80043ec:	f7ff fecc 	bl	8004188 <ifx_i2c_pl_write_register>
 80043f0:	e01f      	b.n	8004432 <ifx_i2c_pl_negotiation_event_handler+0x196>
                else if ((p_ctx->frequency <= PL_SM_FM_MAX_FREQUENCY) && (slave_frequency > PL_SM_FM_MAX_FREQUENCY))
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	f8b3 3194 	ldrh.w	r3, [r3, #404]	@ 0x194
 80043f8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80043fc:	d811      	bhi.n	8004422 <ifx_i2c_pl_negotiation_event_handler+0x186>
 80043fe:	8abb      	ldrh	r3, [r7, #20]
 8004400:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8004404:	d90d      	bls.n	8004422 <ifx_i2c_pl_negotiation_event_handler+0x186>
                    i2c_mode_value[1] = PL_REG_I2C_MODE_SM_FM;
 8004406:	2303      	movs	r3, #3
 8004408:	747b      	strb	r3, [r7, #17]
                    p_ctx->pl.negotiate_state = PL_INIT_READ_FREQ;
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	2255      	movs	r2, #85	@ 0x55
 800440e:	f883 2172 	strb.w	r2, [r3, #370]	@ 0x172
                    ifx_i2c_pl_write_register(p_ctx, PL_REG_I2C_MODE, PL_REG_LEN_I2C_MODE, i2c_mode_value);
 8004412:	f107 0310 	add.w	r3, r7, #16
 8004416:	2202      	movs	r2, #2
 8004418:	2189      	movs	r1, #137	@ 0x89
 800441a:	69b8      	ldr	r0, [r7, #24]
 800441c:	f7ff feb4 	bl	8004188 <ifx_i2c_pl_write_register>
 8004420:	e007      	b.n	8004432 <ifx_i2c_pl_negotiation_event_handler+0x196>
                    p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2266      	movs	r2, #102	@ 0x66
 8004426:	f883 2172 	strb.w	r2, [r3, #370]	@ 0x172
                    continue_negotiation = TRUE;
 800442a:	2301      	movs	r3, #1
 800442c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8004430:	e0a1      	b.n	8004576 <ifx_i2c_pl_negotiation_event_handler+0x2da>
 8004432:	e0a0      	b.n	8004576 <ifx_i2c_pl_negotiation_event_handler+0x2da>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_FREQ;
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	2266      	movs	r2, #102	@ 0x66
 8004438:	f883 2172 	strb.w	r2, [r3, #370]	@ 0x172
                ifx_i2c_pl_read_register(p_ctx, PL_REG_MAX_SCL_FREQU, PL_REG_LEN_MAX_SCL_FREQU);
 800443c:	2204      	movs	r2, #4
 800443e:	2184      	movs	r1, #132	@ 0x84
 8004440:	69b8      	ldr	r0, [r7, #24]
 8004442:	f7ff fe71 	bl	8004128 <ifx_i2c_pl_read_register>
            break;
 8004446:	e096      	b.n	8004576 <ifx_i2c_pl_negotiation_event_handler+0x2da>
                slave_frequency = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 800444e:	021b      	lsls	r3, r3, #8
 8004450:	b21a      	sxth	r2, r3
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
 8004458:	b21b      	sxth	r3, r3
 800445a:	4313      	orrs	r3, r2
 800445c:	b21b      	sxth	r3, r3
 800445e:	82bb      	strh	r3, [r7, #20]
                if (p_ctx->frequency > slave_frequency)
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	f8b3 3194 	ldrh.w	r3, [r3, #404]	@ 0x194
 8004466:	8aba      	ldrh	r2, [r7, #20]
 8004468:	429a      	cmp	r2, r3
 800446a:	d208      	bcs.n	800447e <ifx_i2c_pl_negotiation_event_handler+0x1e2>
                    p_buffer = NULL;
 800446c:	2300      	movs	r3, #0
 800446e:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 8004470:	2300      	movs	r3, #0
 8004472:	847b      	strh	r3, [r7, #34]	@ 0x22
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	22aa      	movs	r2, #170	@ 0xaa
 8004478:	f883 2172 	strb.w	r2, [r3, #370]	@ 0x172
 800447c:	e003      	b.n	8004486 <ifx_i2c_pl_negotiation_event_handler+0x1ea>
                    p_ctx->pl.negotiate_state = PL_INIT_AGREE_FREQ;
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	2277      	movs	r2, #119	@ 0x77
 8004482:	f883 2172 	strb.w	r2, [r3, #370]	@ 0x172
                continue_negotiation = TRUE;
 8004486:	2301      	movs	r3, #1
 8004488:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 800448c:	e073      	b.n	8004576 <ifx_i2c_pl_negotiation_event_handler+0x2da>
                event = ifx_i2c_pl_set_bit_rate(p_input_ctx, p_ctx->frequency);
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	f8b3 3194 	ldrh.w	r3, [r3, #404]	@ 0x194
 8004494:	4619      	mov	r1, r3
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff feba 	bl	8004210 <ifx_i2c_pl_set_bit_rate>
 800449c:	4603      	mov	r3, r0
 800449e:	84fb      	strh	r3, [r7, #38]	@ 0x26
                if (IFX_I2C_STACK_SUCCESS == event)
 80044a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d107      	bne.n	80044b6 <ifx_i2c_pl_negotiation_event_handler+0x21a>
                    p_ctx->pl.negotiate_state = PL_INIT_SET_DATA_REG_LEN;
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2211      	movs	r2, #17
 80044aa:	f883 2172 	strb.w	r2, [r3, #370]	@ 0x172
                    continue_negotiation = TRUE;
 80044ae:	2301      	movs	r3, #1
 80044b0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 80044b4:	e05e      	b.n	8004574 <ifx_i2c_pl_negotiation_event_handler+0x2d8>
                else if (IFX_I2C_STACK_ERROR == event)
 80044b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80044b8:	f5b3 7f81 	cmp.w	r3, #258	@ 0x102
 80044bc:	d15a      	bne.n	8004574 <ifx_i2c_pl_negotiation_event_handler+0x2d8>
                    p_ctx->pl.negotiate_state = PL_INIT_DONE;
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	22aa      	movs	r2, #170	@ 0xaa
 80044c2:	f883 2172 	strb.w	r2, [r3, #370]	@ 0x172
                    p_buffer = NULL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	61fb      	str	r3, [r7, #28]
                    buffer_len = 0;
 80044ca:	2300      	movs	r3, #0
 80044cc:	847b      	strh	r3, [r7, #34]	@ 0x22
            break;
 80044ce:	e051      	b.n	8004574 <ifx_i2c_pl_negotiation_event_handler+0x2d8>
                p_ctx->pl.negotiate_state = PL_INIT_GET_DATA_REG_LEN;
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	2222      	movs	r2, #34	@ 0x22
 80044d4:	f883 2172 	strb.w	r2, [r3, #370]	@ 0x172
                ifx_i2c_pl_write_register(p_ctx, PL_REG_DATA_REG_LEN, sizeof(max_frame_size), max_frame_size);
 80044d8:	f107 030c 	add.w	r3, r7, #12
 80044dc:	2202      	movs	r2, #2
 80044de:	2181      	movs	r1, #129	@ 0x81
 80044e0:	69b8      	ldr	r0, [r7, #24]
 80044e2:	f7ff fe51 	bl	8004188 <ifx_i2c_pl_write_register>
            break;
 80044e6:	e046      	b.n	8004576 <ifx_i2c_pl_negotiation_event_handler+0x2da>
                p_ctx->pl.negotiate_state = PL_INIT_VERIFY_DATA_REG;
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	2288      	movs	r2, #136	@ 0x88
 80044ec:	f883 2172 	strb.w	r2, [r3, #370]	@ 0x172
                ifx_i2c_pl_read_register(p_ctx, PL_REG_DATA_REG_LEN, PL_REG_LEN_DATA_REG_LEN);
 80044f0:	2202      	movs	r2, #2
 80044f2:	2181      	movs	r1, #129	@ 0x81
 80044f4:	69b8      	ldr	r0, [r7, #24]
 80044f6:	f7ff fe17 	bl	8004128 <ifx_i2c_pl_read_register>
            break;
 80044fa:	e03c      	b.n	8004576 <ifx_i2c_pl_negotiation_event_handler+0x2da>
                p_ctx->pl.negotiate_state = PL_INIT_DONE;
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	22aa      	movs	r2, #170	@ 0xaa
 8004500:	f883 2172 	strb.w	r2, [r3, #370]	@ 0x172
                slave_frame_len = (p_ctx->pl.buffer[0] << 8) | p_ctx->pl.buffer[1];
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800450a:	021b      	lsls	r3, r3, #8
 800450c:	b21a      	sxth	r2, r3
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004514:	b21b      	sxth	r3, r3
 8004516:	4313      	orrs	r3, r2
 8004518:	b21b      	sxth	r3, r3
 800451a:	82fb      	strh	r3, [r7, #22]
                if (p_ctx->frame_size >= slave_frame_len)
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 8004522:	8afa      	ldrh	r2, [r7, #22]
 8004524:	429a      	cmp	r2, r3
 8004526:	d805      	bhi.n	8004534 <ifx_i2c_pl_negotiation_event_handler+0x298>
                    p_ctx->frame_size = slave_frame_len;
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	8afa      	ldrh	r2, [r7, #22]
 800452c:	f8a3 2196 	strh.w	r2, [r3, #406]	@ 0x196
                    event = IFX_I2C_STACK_SUCCESS;
 8004530:	2300      	movs	r3, #0
 8004532:	84fb      	strh	r3, [r7, #38]	@ 0x26
                p_buffer = NULL;
 8004534:	2300      	movs	r3, #0
 8004536:	61fb      	str	r3, [r7, #28]
                buffer_len = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	847b      	strh	r3, [r7, #34]	@ 0x22
                continue_negotiation = TRUE;
 800453c:	2301      	movs	r3, #1
 800453e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            break;
 8004542:	e018      	b.n	8004576 <ifx_i2c_pl_negotiation_event_handler+0x2da>
                if (IFX_I2C_STACK_SUCCESS == event)
 8004544:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004546:	2b00      	cmp	r3, #0
 8004548:	d104      	bne.n	8004554 <ifx_i2c_pl_negotiation_event_handler+0x2b8>
                    p_ctx->pl.frame_state = PL_STATE_READY;
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	2202      	movs	r2, #2
 800454e:	f883 2171 	strb.w	r2, [r3, #369]	@ 0x171
 8004552:	e003      	b.n	800455c <ifx_i2c_pl_negotiation_event_handler+0x2c0>
                    p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2171 	strb.w	r2, [r3, #369]	@ 0x171
                p_ctx->pl.upper_layer_event_handler(p_ctx,event, p_buffer, buffer_len);
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8004560:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004562:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8004564:	69fa      	ldr	r2, [r7, #28]
 8004566:	69b8      	ldr	r0, [r7, #24]
 8004568:	47a0      	blx	r4
            break;
 800456a:	e004      	b.n	8004576 <ifx_i2c_pl_negotiation_event_handler+0x2da>
                break;
 800456c:	bf00      	nop
 800456e:	e002      	b.n	8004576 <ifx_i2c_pl_negotiation_event_handler+0x2da>
            break;
 8004570:	bf00      	nop
 8004572:	e000      	b.n	8004576 <ifx_i2c_pl_negotiation_event_handler+0x2da>
            break;
 8004574:	bf00      	nop
        }
    } while (FALSE != continue_negotiation);
 8004576:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800457a:	2b00      	cmp	r3, #0
 800457c:	f47f aea7 	bne.w	80042ce <ifx_i2c_pl_negotiation_event_handler+0x32>
}
 8004580:	bf00      	nop
 8004582:	bf00      	nop
 8004584:	372c      	adds	r7, #44	@ 0x2c
 8004586:	46bd      	mov	sp, r7
 8004588:	bd90      	pop	{r4, r7, pc}
 800458a:	bf00      	nop
 800458c:	0800429d 	.word	0x0800429d

08004590 <ifx_i2c_pl_frame_event_handler>:


_STATIC_H void ifx_i2c_pl_frame_event_handler(ifx_i2c_context_t * p_ctx, optiga_lib_status_t event)
{
 8004590:	b590      	push	{r4, r7, lr}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	807b      	strh	r3, [r7, #2]
    uint32_t time_stamp_diff;
    uint32_t current_time;
    uint16_t frame_size;
    if (IFX_I2C_STACK_SUCCESS != event)
 800459c:	887b      	ldrh	r3, [r7, #2]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00b      	beq.n	80045ba <ifx_i2c_pl_frame_event_handler+0x2a>
    {
        p_ctx->pl.frame_state = PL_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2202      	movs	r2, #2
 80045a6:	f883 2171 	strb.w	r2, [r3, #369]	@ 0x171
        // I2C read or write failed, report to upper layer
        p_ctx->pl.upper_layer_event_handler(p_ctx, event, 0, 0);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80045ae:	8879      	ldrh	r1, [r7, #2]
 80045b0:	2300      	movs	r3, #0
 80045b2:	2200      	movs	r2, #0
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	47a0      	blx	r4
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
            }
            break;
        }
    }
}
 80045b8:	e0e4      	b.n	8004784 <ifx_i2c_pl_frame_event_handler+0x1f4>
        switch (p_ctx->pl.frame_state)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 3171 	ldrb.w	r3, [r3, #369]	@ 0x171
 80045c0:	3b01      	subs	r3, #1
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	f200 80d1 	bhi.w	800476a <ifx_i2c_pl_frame_event_handler+0x1da>
 80045c8:	a201      	add	r2, pc, #4	@ (adr r2, 80045d0 <ifx_i2c_pl_frame_event_handler+0x40>)
 80045ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ce:	bf00      	nop
 80045d0:	080045ed 	.word	0x080045ed
 80045d4:	080045f5 	.word	0x080045f5
 80045d8:	08004613 	.word	0x08004613
 80045dc:	0800474b 	.word	0x0800474b
 80045e0:	080045e5 	.word	0x080045e5
                ifx_i2c_pl_soft_reset(p_ctx);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f975 	bl	80048d4 <ifx_i2c_pl_soft_reset>
            break;
 80045ea:	e0cb      	b.n	8004784 <ifx_i2c_pl_frame_event_handler+0x1f4>
                ifx_i2c_pl_negotiation_event_handler(p_ctx);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7ff fe55 	bl	800429c <ifx_i2c_pl_negotiation_event_handler>
            break;
 80045f2:	e0c7      	b.n	8004784 <ifx_i2c_pl_frame_event_handler+0x1f4>
                p_ctx->pl.frame_state            = PL_STATE_DATA_AVAILABLE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2203      	movs	r2, #3
 80045f8:	f883 2171 	strb.w	r2, [r3, #369]	@ 0x171
                if (PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3170 	ldrb.w	r3, [r3, #368]	@ 0x170
 8004602:	2b02      	cmp	r3, #2
 8004604:	d105      	bne.n	8004612 <ifx_i2c_pl_frame_event_handler+0x82>
                    ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8004606:	2204      	movs	r2, #4
 8004608:	2182      	movs	r1, #130	@ 0x82
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7ff fd8c 	bl	8004128 <ifx_i2c_pl_read_register>
                    break;
 8004610:	e0b8      	b.n	8004784 <ifx_i2c_pl_frame_event_handler+0x1f4>
                if ((PL_ACTION_READ_FRAME == p_ctx->pl.frame_action)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 3170 	ldrb.w	r3, [r3, #368]	@ 0x170
 8004618:	2b02      	cmp	r3, #2
 800461a:	d154      	bne.n	80046c6 <ifx_i2c_pl_frame_event_handler+0x136>
                && (0 != (p_ctx->pl.buffer[0] & PL_REG_I2C_STATE_RESPONSE_READY)))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	d04d      	beq.n	80046c6 <ifx_i2c_pl_frame_event_handler+0x136>
                    frame_size = (p_ctx->pl.buffer[2] << 8) | p_ctx->pl.buffer[3];
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	b21a      	sxth	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
 800463a:	b21b      	sxth	r3, r3
 800463c:	4313      	orrs	r3, r2
 800463e:	b21b      	sxth	r3, r3
 8004640:	827b      	strh	r3, [r7, #18]
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8004642:	8a7b      	ldrh	r3, [r7, #18]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d010      	beq.n	800466a <ifx_i2c_pl_frame_event_handler+0xda>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 800464e:	8a7a      	ldrh	r2, [r7, #18]
 8004650:	429a      	cmp	r2, r3
 8004652:	d80a      	bhi.n	800466a <ifx_i2c_pl_frame_event_handler+0xda>
                        p_ctx->pl.frame_state = PL_STATE_RXTX;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2204      	movs	r2, #4
 8004658:	f883 2171 	strb.w	r2, [r3, #369]	@ 0x171
                        ifx_i2c_pl_read_register(p_ctx,PL_REG_DATA, frame_size);
 800465c:	8a7b      	ldrh	r3, [r7, #18]
 800465e:	461a      	mov	r2, r3
 8004660:	2180      	movs	r1, #128	@ 0x80
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7ff fd60 	bl	8004128 <ifx_i2c_pl_read_register>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 8004668:	e06e      	b.n	8004748 <ifx_i2c_pl_frame_event_handler+0x1b8>
                        current_time = pal_os_timer_get_time_in_milliseconds();
 800466a:	f001 fcff 	bl	800606c <pal_os_timer_get_time_in_milliseconds>
 800466e:	60f8      	str	r0, [r7, #12]
                        time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	617b      	str	r3, [r7, #20]
                        if (p_ctx->dl.frame_start_time > current_time)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	429a      	cmp	r2, r3
 8004682:	d204      	bcs.n	800468e <ifx_i2c_pl_frame_event_handler+0xfe>
                                               p_ctx->dl.frame_start_time)) + 0x01;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            time_stamp_diff = (0xFFFFFFFF + (current_time -
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	617b      	str	r3, [r7, #20]
                        if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	429a      	cmp	r2, r3
 8004696:	d209      	bcs.n	80046ac <ifx_i2c_pl_frame_event_handler+0x11c>
                            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 0190 	ldr.w	r0, [r3, #400]	@ 0x190
 800469e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	4939      	ldr	r1, [pc, #228]	@ (800478c <ifx_i2c_pl_frame_event_handler+0x1fc>)
 80046a6:	f001 fc63 	bl	8005f70 <pal_os_event_register_callback_oneshot>
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 80046aa:	e04d      	b.n	8004748 <ifx_i2c_pl_frame_event_handler+0x1b8>
                            p_ctx->pl.frame_state = PL_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 2171 	strb.w	r2, [r3, #369]	@ 0x171
                            p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80046b8:	2300      	movs	r3, #0
 80046ba:	2200      	movs	r2, #0
 80046bc:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	47a0      	blx	r4
                    if ((frame_size > 0) && (frame_size <= p_ctx->frame_size))
 80046c4:	e040      	b.n	8004748 <ifx_i2c_pl_frame_event_handler+0x1b8>
                else if (PL_ACTION_WRITE_FRAME == p_ctx->pl.frame_action)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3170 	ldrb.w	r3, [r3, #368]	@ 0x170
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d10d      	bne.n	80046ec <ifx_i2c_pl_frame_event_handler+0x15c>
                    p_ctx->pl.frame_state = PL_STATE_RXTX;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2204      	movs	r2, #4
 80046d4:	f883 2171 	strb.w	r2, [r3, #369]	@ 0x171
                    ifx_i2c_pl_write_register(p_ctx,
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f8b3 2056 	ldrh.w	r2, [r3, #86]	@ 0x56
                                              (uint8_t * )p_ctx->pl.p_tx_frame);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                    ifx_i2c_pl_write_register(p_ctx,
 80046e2:	2180      	movs	r1, #128	@ 0x80
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff fd4f 	bl	8004188 <ifx_i2c_pl_write_register>
            break;
 80046ea:	e04b      	b.n	8004784 <ifx_i2c_pl_frame_event_handler+0x1f4>
                    current_time = pal_os_timer_get_time_in_milliseconds();
 80046ec:	f001 fcbe 	bl	800606c <pal_os_timer_get_time_in_milliseconds>
 80046f0:	60f8      	str	r0, [r7, #12]
                    time_stamp_diff = (current_time - p_ctx->dl.frame_start_time);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	617b      	str	r3, [r7, #20]
                    if (p_ctx->dl.frame_start_time > current_time)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	429a      	cmp	r2, r3
 8004704:	d204      	bcs.n	8004710 <ifx_i2c_pl_frame_event_handler+0x180>
                                           p_ctx->dl.frame_start_time)) + 0x01;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                        time_stamp_diff = (0xFFFFFFFF + (current_time -
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	617b      	str	r3, [r7, #20]
                    if (time_stamp_diff < p_ctx->dl.data_poll_timeout)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	429a      	cmp	r2, r3
 8004718:	d209      	bcs.n	800472e <ifx_i2c_pl_frame_event_handler+0x19e>
                        pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 0190 	ldr.w	r0, [r3, #400]	@ 0x190
 8004720:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	4919      	ldr	r1, [pc, #100]	@ (800478c <ifx_i2c_pl_frame_event_handler+0x1fc>)
 8004728:	f001 fc22 	bl	8005f70 <pal_os_event_register_callback_oneshot>
            break;
 800472c:	e02a      	b.n	8004784 <ifx_i2c_pl_frame_event_handler+0x1f4>
                        p_ctx->pl.frame_state = PL_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2202      	movs	r2, #2
 8004732:	f883 2171 	strb.w	r2, [r3, #369]	@ 0x171
                        p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800473a:	2300      	movs	r3, #0
 800473c:	2200      	movs	r2, #0
 800473e:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	47a0      	blx	r4
            break;
 8004746:	e01d      	b.n	8004784 <ifx_i2c_pl_frame_event_handler+0x1f4>
 8004748:	e01c      	b.n	8004784 <ifx_i2c_pl_frame_event_handler+0x1f4>
                p_ctx->pl.frame_state = PL_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2202      	movs	r2, #2
 800474e:	f883 2171 	strb.w	r2, [r3, #369]	@ 0x171
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                                                    p_ctx->pl.buffer,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f103 0258 	add.w	r2, r3, #88	@ 0x58
                p_ctx->pl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004762:	2100      	movs	r1, #0
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	47a0      	blx	r4
            break;
 8004768:	e00c      	b.n	8004784 <ifx_i2c_pl_frame_event_handler+0x1f4>
                p_ctx->pl.frame_state = PL_STATE_INIT;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2171 	strb.w	r2, [r3, #369]	@ 0x171
                p_ctx->pl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_ERROR, 0, 0);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8004776:	2300      	movs	r3, #0
 8004778:	2200      	movs	r2, #0
 800477a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	47a0      	blx	r4
            break;
 8004782:	bf00      	nop
}
 8004784:	bf00      	nop
 8004786:	371c      	adds	r7, #28
 8004788:	46bd      	mov	sp, r7
 800478a:	bd90      	pop	{r4, r7, pc}
 800478c:	080041f7 	.word	0x080041f7

08004790 <ifx_i2c_pal_poll_callback>:

_STATIC_H void ifx_i2c_pal_poll_callback(void * p_ctx)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	60fb      	str	r3, [r7, #12]
    if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f893 316f 	ldrb.w	r3, [r3, #367]	@ 0x16f
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d10c      	bne.n	80047c0 <ifx_i2c_pal_poll_callback+0x30>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed -> Restart TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_write(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_tx_len);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f8d3 017c 	ldr.w	r0, [r3, #380]	@ 0x17c
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80047b8:	461a      	mov	r2, r3
 80047ba:	f001 f9b7 	bl	8005b2c <pal_i2c_write>
    {
        LOG_PL("[IFX-PL]: Poll Timer elapsed  -> Restart Read Register -> Start TX\n");
        //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
    }
}
 80047be:	e010      	b.n	80047e2 <ifx_i2c_pal_poll_callback+0x52>
    else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f893 316f 	ldrb.w	r3, [r3, #367]	@ 0x16f
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d10b      	bne.n	80047e2 <ifx_i2c_pal_poll_callback+0x52>
        pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f8d3 017c 	ldr.w	r0, [r3, #380]	@ 0x17c
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80047dc:	461a      	mov	r2, r3
 80047de:	f001 f9eb 	bl	8005bb8 <pal_i2c_read>
}
 80047e2:	bf00      	nop
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <ifx_i2c_pl_guard_time_callback>:


_STATIC_H void ifx_i2c_pl_guard_time_callback(void * p_ctx)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b084      	sub	sp, #16
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	60fb      	str	r3, [r7, #12]
    if (PL_ACTION_READ_REGISTER == p_local_ctx->pl.register_action)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f893 316e 	ldrb.w	r3, [r3, #366]	@ 0x16e
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d11f      	bne.n	8004840 <ifx_i2c_pl_guard_time_callback+0x56>
    {
        if (PL_I2C_CMD_WRITE == p_local_ctx->pl.i2c_cmd)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f893 316f 	ldrb.w	r3, [r3, #367]	@ 0x16f
 8004806:	2b01      	cmp	r3, #1
 8004808:	d110      	bne.n	800482c <ifx_i2c_pl_guard_time_callback+0x42>
        {
            LOG_PL("[IFX-PL]: GT done-> Start RX\n");
            p_local_ctx->pl.i2c_cmd = PL_I2C_CMD_READ;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2202      	movs	r2, #2
 800480e:	f883 216f 	strb.w	r2, [r3, #367]	@ 0x16f
            //lint --e{534} suppress "This is the last statement of asynchronous function hence return value is not checked"
            pal_i2c_read(p_local_ctx->p_pal_i2c_ctx, p_local_ctx->pl.buffer, p_local_ctx->pl.buffer_rx_len);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f8d3 017c 	ldr.w	r0, [r3, #380]	@ 0x17c
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004824:	461a      	mov	r2, r3
 8004826:	f001 f9c7 	bl	8005bb8 <pal_i2c_read>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
    {
        LOG_PL("[IFX-PL]: GT done -> REG written\n");
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
    }
}
 800482a:	e012      	b.n	8004852 <ifx_i2c_pl_guard_time_callback+0x68>
        else if (PL_I2C_CMD_READ == p_local_ctx->pl.i2c_cmd)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f893 316f 	ldrb.w	r3, [r3, #367]	@ 0x16f
 8004832:	2b02      	cmp	r3, #2
 8004834:	d10d      	bne.n	8004852 <ifx_i2c_pl_guard_time_callback+0x68>
            ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 8004836:	2100      	movs	r1, #0
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f7ff fea9 	bl	8004590 <ifx_i2c_pl_frame_event_handler>
}
 800483e:	e008      	b.n	8004852 <ifx_i2c_pl_guard_time_callback+0x68>
    else if (PL_ACTION_WRITE_REGISTER == p_local_ctx->pl.register_action)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f893 316e 	ldrb.w	r3, [r3, #366]	@ 0x16e
 8004846:	2b02      	cmp	r3, #2
 8004848:	d103      	bne.n	8004852 <ifx_i2c_pl_guard_time_callback+0x68>
        ifx_i2c_pl_frame_event_handler(p_local_ctx,IFX_I2C_STACK_SUCCESS);
 800484a:	2100      	movs	r1, #0
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f7ff fe9f 	bl	8004590 <ifx_i2c_pl_frame_event_handler>
}
 8004852:	bf00      	nop
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <ifx_i2c_pl_pal_event_handler>:

_STATIC_H void ifx_i2c_pl_pal_event_handler(void * p_ctx, optiga_lib_status_t event)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	807b      	strh	r3, [r7, #2]
    ifx_i2c_context_t * p_local_ctx = (ifx_i2c_context_t * )p_ctx;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	60fb      	str	r3, [r7, #12]
    switch (event)
 800486c:	887b      	ldrh	r3, [r7, #2]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d01e      	beq.n	80048b0 <ifx_i2c_pl_pal_event_handler+0x54>
 8004872:	2b00      	cmp	r3, #0
 8004874:	db25      	blt.n	80048c2 <ifx_i2c_pl_pal_event_handler+0x66>
 8004876:	3b01      	subs	r3, #1
 8004878:	2b01      	cmp	r3, #1
 800487a:	d822      	bhi.n	80048c2 <ifx_i2c_pl_pal_event_handler+0x66>
    {
        case PAL_I2C_EVENT_ERROR:
        case PAL_I2C_EVENT_BUSY:
            // Error event usually occurs when the device is in sleep mode and needs time to wake up
            if (p_local_ctx->pl.retry_counter--)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004882:	1e5a      	subs	r2, r3, #1
 8004884:	b291      	uxth	r1, r2
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	f8a2 1050 	strh.w	r1, [r2, #80]	@ 0x50
 800488c:	2b00      	cmp	r3, #0
 800488e:	d009      	beq.n	80048a4 <ifx_i2c_pl_pal_event_handler+0x48>
            {
                LOG_PL("[IFX-PL]: PAL Error -> Continue polling\n");
                pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx,
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f8d3 0190 	ldr.w	r0, [r3, #400]	@ 0x190
 8004896:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	490b      	ldr	r1, [pc, #44]	@ (80048cc <ifx_i2c_pl_pal_event_handler+0x70>)
 800489e:	f001 fb67 	bl	8005f70 <pal_os_event_register_callback_oneshot>
            else
            {
                LOG_PL("[IFX-PL]: PAL Error -> Stop\n");
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
            }
            break;
 80048a2:	e00f      	b.n	80048c4 <ifx_i2c_pl_pal_event_handler+0x68>
                ifx_i2c_pl_frame_event_handler(p_local_ctx, IFX_I2C_FATAL_ERROR);
 80048a4:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f7ff fe71 	bl	8004590 <ifx_i2c_pl_frame_event_handler>
            break;
 80048ae:	e009      	b.n	80048c4 <ifx_i2c_pl_pal_event_handler+0x68>

        case PAL_I2C_EVENT_SUCCESS:
            LOG_PL("[IFX-PL]: PAL Success -> Wait Guard Time\n");
            pal_os_event_register_callback_oneshot(p_local_ctx->pal_os_event_ctx, ifx_i2c_pl_guard_time_callback,
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f8d3 0190 	ldr.w	r0, [r3, #400]	@ 0x190
 80048b6:	2332      	movs	r3, #50	@ 0x32
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	4905      	ldr	r1, [pc, #20]	@ (80048d0 <ifx_i2c_pl_pal_event_handler+0x74>)
 80048bc:	f001 fb58 	bl	8005f70 <pal_os_event_register_callback_oneshot>
                                                    p_local_ctx,PL_GUARD_TIME_INTERVAL_US);
            break;
 80048c0:	e000      	b.n	80048c4 <ifx_i2c_pl_pal_event_handler+0x68>
        default:
            break;
 80048c2:	bf00      	nop
    }
}
 80048c4:	bf00      	nop
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	08004791 	.word	0x08004791
 80048d0:	080047eb 	.word	0x080047eb

080048d4 <ifx_i2c_pl_soft_reset>:


_STATIC_H void ifx_i2c_pl_soft_reset(ifx_i2c_context_t * p_ctx)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
    uint8_t i2c_mode_value[2] = {0};
 80048dc:	2300      	movs	r3, #0
 80048de:	81bb      	strh	r3, [r7, #12]
    switch (p_ctx->pl.request_soft_reset)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 3173 	ldrb.w	r3, [r3, #371]	@ 0x173
 80048e6:	3b99      	subs	r3, #153	@ 0x99
 80048e8:	2b0a      	cmp	r3, #10
 80048ea:	d85e      	bhi.n	80049aa <ifx_i2c_pl_soft_reset+0xd6>
 80048ec:	a201      	add	r2, pc, #4	@ (adr r2, 80048f4 <ifx_i2c_pl_soft_reset+0x20>)
 80048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f2:	bf00      	nop
 80048f4:	08004921 	.word	0x08004921
 80048f8:	080049ab 	.word	0x080049ab
 80048fc:	080049ab 	.word	0x080049ab
 8004900:	080049ab 	.word	0x080049ab
 8004904:	080049ab 	.word	0x080049ab
 8004908:	080049ab 	.word	0x080049ab
 800490c:	080049ab 	.word	0x080049ab
 8004910:	080049ab 	.word	0x080049ab
 8004914:	08004999 	.word	0x08004999
 8004918:	08004935 	.word	0x08004935
 800491c:	0800497d 	.word	0x0800497d
    {
        case PL_INIT_GET_STATUS_REG:
        {
            p_ctx->pl.request_soft_reset = PL_RESET_WRITE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	22a2      	movs	r2, #162	@ 0xa2
 8004924:	f883 2173 	strb.w	r2, [r3, #371]	@ 0x173
            //Read the status register to check if soft reset is supported
            ifx_i2c_pl_read_register(p_ctx, PL_REG_I2C_STATE, PL_REG_LEN_I2C_STATE);
 8004928:	2204      	movs	r2, #4
 800492a:	2182      	movs	r1, #130	@ 0x82
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7ff fbfb 	bl	8004128 <ifx_i2c_pl_read_register>
            break;
 8004932:	e03b      	b.n	80049ac <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_WRITE:
        {
            //Mask for soft reset bit(5th bit) from the 1st byte of status register
            p_ctx->pl.buffer[0] &= PL_REG_I2C_STATE_SOFT_RESET;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800493a:	f003 0308 	and.w	r3, r3, #8
 800493e:	b2da      	uxtb	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
            if (PL_REG_I2C_STATE_SOFT_RESET == p_ctx->pl.buffer[0])
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800494c:	2b08      	cmp	r3, #8
 800494e:	d10b      	bne.n	8004968 <ifx_i2c_pl_soft_reset+0x94>
            {
                p_ctx->pl.request_soft_reset = PL_RESET_STARTUP;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	22a3      	movs	r2, #163	@ 0xa3
 8004954:	f883 2173 	strb.w	r2, [r3, #371]	@ 0x173
                //Write 88 register with 0 value
                ifx_i2c_pl_write_register(p_ctx, PL_REG_SOFT_RESET, PL_REG_LEN_SOFT_RESET, i2c_mode_value);
 8004958:	f107 030c 	add.w	r3, r7, #12
 800495c:	2202      	movs	r2, #2
 800495e:	2188      	movs	r1, #136	@ 0x88
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7ff fc11 	bl	8004188 <ifx_i2c_pl_write_register>
            {
                //Soft reset is not supported by the slave
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
            }
            break;
 8004966:	e021      	b.n	80049ac <ifx_i2c_pl_soft_reset+0xd8>
                p_ctx->pl.frame_state = PL_STATE_UNINIT;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2171 	strb.w	r2, [r3, #369]	@ 0x171
                ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_ERROR);
 8004970:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff fe0b 	bl	8004590 <ifx_i2c_pl_frame_event_handler>
            break;
 800497a:	e017      	b.n	80049ac <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_STARTUP:
        {
            p_ctx->pl.request_soft_reset= PL_RESET_INIT;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	22a1      	movs	r2, #161	@ 0xa1
 8004980:	f883 2173 	strb.w	r2, [r3, #371]	@ 0x173
            pal_os_event_register_callback_oneshot(p_ctx->pal_os_event_ctx,(register_callback)ifx_i2c_pl_soft_reset,
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f8d3 0190 	ldr.w	r0, [r3, #400]	@ 0x190
 800498a:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	4908      	ldr	r1, [pc, #32]	@ (80049b4 <ifx_i2c_pl_soft_reset+0xe0>)
 8004992:	f001 faed 	bl	8005f70 <pal_os_event_register_callback_oneshot>
                                                   (void * )p_ctx,
                                                   STARTUP_TIME_MSEC);
            break;
 8004996:	e009      	b.n	80049ac <ifx_i2c_pl_soft_reset+0xd8>
        }
        case PL_RESET_INIT:
        {
            p_ctx->pl.frame_state = PL_STATE_INIT;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2171 	strb.w	r2, [r3, #369]	@ 0x171
            ifx_i2c_pl_frame_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS);
 80049a0:	2100      	movs	r1, #0
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff fdf4 	bl	8004590 <ifx_i2c_pl_frame_event_handler>
            break;
 80049a8:	e000      	b.n	80049ac <ifx_i2c_pl_soft_reset+0xd8>
        }
        default:
            break;
 80049aa:	bf00      	nop
    }
}
 80049ac:	bf00      	nop
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	080048d5 	.word	0x080048d5

080049b8 <ifx_i2c_tl_init>:
_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx);
_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning, uint8_t previous_chaining);
/// @endcond

optiga_lib_status_t ifx_i2c_tl_init(ifx_i2c_context_t * p_ctx, ifx_i2c_event_handler_t handler)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
    LOG_TL("[IFX-TL]: Init\n");

    p_ctx->tl.state = TL_STATE_UNINIT;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	779a      	strb	r2, [r3, #30]

    // Initialize Data Link layer (and register event handler)
    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_dl_init(p_ctx, ifx_i2c_dl_event_handler))
 80049c8:	490f      	ldr	r1, [pc, #60]	@ (8004a08 <ifx_i2c_tl_init+0x50>)
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fe feee 	bl	80037ac <ifx_i2c_dl_init>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <ifx_i2c_tl_init+0x24>
    {
        return (IFX_I2C_STACK_ERROR);
 80049d6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80049da:	e011      	b.n	8004a00 <ifx_i2c_tl_init+0x48>
    }
    p_ctx->tl.initialization_state = TRUE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    p_ctx->tl.upper_layer_event_handler = handler;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	60da      	str	r2, [r3, #12]
    p_ctx->tl.state = TL_STATE_IDLE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	779a      	strb	r2, [r3, #30]
    p_ctx->tl.max_packet_length = p_ctx->frame_size - (DL_HEADER_SIZE + TL_HEADER_SIZE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 80049f6:	3b06      	subs	r3, #6
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	835a      	strh	r2, [r3, #26]

    return (IFX_I2C_STACK_SUCCESS);
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	08004c99 	.word	0x08004c99

08004a0c <ifx_i2c_tl_transceive>:
optiga_lib_status_t ifx_i2c_tl_transceive(ifx_i2c_context_t * p_ctx,
                                          uint8_t * p_packet,
                                          uint16_t packet_len,
                                          uint8_t * p_recv_packet,
                                          uint16_t * p_recv_packet_len)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 8004a1c:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8004a20:	82fb      	strh	r3, [r7, #22]
    LOG_TL("[IFX-TL]: Transceive txlen %d\n", packet_len);

    do
    {
        // Check function arguments
        if ((NULL == p_packet) || (0 == packet_len))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d036      	beq.n	8004a96 <ifx_i2c_tl_transceive+0x8a>
 8004a28:	88fb      	ldrh	r3, [r7, #6]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d033      	beq.n	8004a96 <ifx_i2c_tl_transceive+0x8a>
        {
            break;
        }
        // Transport Layer must be idle
        if (TL_STATE_IDLE != p_ctx->tl.state)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	7f9b      	ldrb	r3, [r3, #30]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d12e      	bne.n	8004a94 <ifx_i2c_tl_transceive+0x88>
        {
            break;
        }
        p_ctx->tl.state = TL_STATE_TX;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	779a      	strb	r2, [r3, #30]
        p_ctx->tl.api_start_time = pal_os_timer_get_time_in_milliseconds();
 8004a3c:	f001 fb16 	bl	800606c <pal_os_timer_get_time_in_milliseconds>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	611a      	str	r2, [r3, #16]
        p_ctx->tl.p_actual_packet = p_packet;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	601a      	str	r2, [r3, #0]
        p_ctx->tl.actual_packet_length = packet_len;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	88fa      	ldrh	r2, [r7, #6]
 8004a50:	82da      	strh	r2, [r3, #22]
        p_ctx->tl.packet_offset = 0;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	831a      	strh	r2, [r3, #24]
        p_ctx->tl.p_recv_packet_buffer = p_recv_packet;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	605a      	str	r2, [r3, #4]
        p_ctx->tl.p_recv_packet_buffer_length = p_recv_packet_len;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a3a      	ldr	r2, [r7, #32]
 8004a62:	609a      	str	r2, [r3, #8]
        p_ctx->tl.total_recv_length = 0;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	829a      	strh	r2, [r3, #20]
        p_ctx->tl.chaining_error_count = 0;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	77da      	strb	r2, [r3, #31]
        p_ctx->tl.master_chaining_error_count = 0;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 2020 	strb.w	r2, [r3, #32]
        p_ctx->tl.transmission_completed = 0;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
        p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8004a86:	839a      	strh	r2, [r3, #28]
        status = ifx_i2c_tl_send_next_fragment(p_ctx);
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 f85c 	bl	8004b46 <ifx_i2c_tl_send_next_fragment>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	82fb      	strh	r3, [r7, #22]
 8004a92:	e000      	b.n	8004a96 <ifx_i2c_tl_transceive+0x8a>
            break;
 8004a94:	bf00      	nop
    } while (FALSE);
    return (status);
 8004a96:	8afb      	ldrh	r3, [r7, #22]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <ifx_i2c_tl_resend_packets>:


_STATIC_H optiga_lib_status_t ifx_i2c_tl_resend_packets(ifx_i2c_context_t * p_ctx)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
    // Transport Layer must be idle
    if (TL_STATE_IDLE != p_ctx->tl.state)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	7f9b      	ldrb	r3, [r3, #30]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d002      	beq.n	8004ab6 <ifx_i2c_tl_resend_packets+0x16>
    {
        return (IFX_I2C_STACK_ERROR);
 8004ab0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8004ab4:	e00c      	b.n	8004ad0 <ifx_i2c_tl_resend_packets+0x30>
    }

    p_ctx->tl.packet_offset = 0;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	831a      	strh	r2, [r3, #24]
    p_ctx->tl.total_recv_length = 0;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	829a      	strh	r2, [r3, #20]
    p_ctx->tl.state = TL_STATE_TX;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2202      	movs	r2, #2
 8004ac6:	779a      	strb	r2, [r3, #30]
    return (ifx_i2c_tl_send_next_fragment(p_ctx));
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f83c 	bl	8004b46 <ifx_i2c_tl_send_next_fragment>
 8004ace:	4603      	mov	r3, r0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <ifx_i2c_tl_calculate_pctr>:

_STATIC_H uint8_t ifx_i2c_tl_calculate_pctr(const ifx_i2c_context_t * p_ctx)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    uint16_t fragment_size = p_ctx->tl.max_packet_length;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	8b5b      	ldrh	r3, [r3, #26]
 8004ae4:	81bb      	strh	r3, [r7, #12]
    uint16_t remaining_data = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8ada      	ldrh	r2, [r3, #22]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	8b1b      	ldrh	r3, [r3, #24]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	817b      	strh	r3, [r7, #10]
    // No chain
    if ((0 == p_ctx->tl.packet_offset) && (remaining_data <= fragment_size))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	8b1b      	ldrh	r3, [r3, #24]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d106      	bne.n	8004b08 <ifx_i2c_tl_calculate_pctr+0x30>
 8004afa:	897a      	ldrh	r2, [r7, #10]
 8004afc:	89bb      	ldrh	r3, [r7, #12]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d802      	bhi.n	8004b08 <ifx_i2c_tl_calculate_pctr+0x30>
    {
        pctr = TL_CHAINING_NO;
 8004b02:	2300      	movs	r3, #0
 8004b04:	73fb      	strb	r3, [r7, #15]
 8004b06:	e017      	b.n	8004b38 <ifx_i2c_tl_calculate_pctr+0x60>
    }
    // First chain
    else if ((0 == p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8b1b      	ldrh	r3, [r3, #24]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d106      	bne.n	8004b1e <ifx_i2c_tl_calculate_pctr+0x46>
 8004b10:	897a      	ldrh	r2, [r7, #10]
 8004b12:	89bb      	ldrh	r3, [r7, #12]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d902      	bls.n	8004b1e <ifx_i2c_tl_calculate_pctr+0x46>
    {
        pctr = TL_CHAINING_FIRST;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
 8004b1c:	e00c      	b.n	8004b38 <ifx_i2c_tl_calculate_pctr+0x60>
    }
    // Intermediate chain
    else if ((0 != p_ctx->tl.packet_offset) && (remaining_data > fragment_size))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	8b1b      	ldrh	r3, [r3, #24]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d006      	beq.n	8004b34 <ifx_i2c_tl_calculate_pctr+0x5c>
 8004b26:	897a      	ldrh	r2, [r7, #10]
 8004b28:	89bb      	ldrh	r3, [r7, #12]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d902      	bls.n	8004b34 <ifx_i2c_tl_calculate_pctr+0x5c>
    {
        pctr = TL_CHAINING_INTERMEDIATE;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	73fb      	strb	r3, [r7, #15]
 8004b32:	e001      	b.n	8004b38 <ifx_i2c_tl_calculate_pctr+0x60>
    }
    // Last chain
    else
    {
        pctr = TL_CHAINING_LAST;
 8004b34:	2304      	movs	r3, #4
 8004b36:	73fb      	strb	r3, [r7, #15]
    }

    return (pctr);
 8004b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <ifx_i2c_tl_send_next_fragment>:
_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_next_fragment(ifx_i2c_context_t * p_ctx)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
    uint8_t pctr;
    // Calculate size of fragment (last one might be shorter)
    uint16_t tl_fragment_size = p_ctx->tl.max_packet_length;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	8b5b      	ldrh	r3, [r3, #26]
 8004b52:	81fb      	strh	r3, [r7, #14]
    pctr = ifx_i2c_tl_calculate_pctr(p_ctx);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff ffbf 	bl	8004ad8 <ifx_i2c_tl_calculate_pctr>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	737b      	strb	r3, [r7, #13]
    if ((p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset) < tl_fragment_size)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	8adb      	ldrh	r3, [r3, #22]
 8004b62:	461a      	mov	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	8b1b      	ldrh	r3, [r3, #24]
 8004b68:	1ad2      	subs	r2, r2, r3
 8004b6a:	89fb      	ldrh	r3, [r7, #14]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	da05      	bge.n	8004b7c <ifx_i2c_tl_send_next_fragment+0x36>
    {
        tl_fragment_size = p_ctx->tl.actual_packet_length - p_ctx->tl.packet_offset;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	8ada      	ldrh	r2, [r3, #22]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	8b1b      	ldrh	r3, [r3, #24]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	81fb      	strh	r3, [r7, #14]
    }
    // Assign the pctr
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = (pctr | IFX_I2C_PRESENCE_BIT);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	7b7a      	ldrb	r2, [r7, #13]
 8004b80:	f883 219d 	strb.w	r2, [r3, #413]	@ 0x19d
    //copy the data
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f503 73cd 	add.w	r3, r3, #410	@ 0x19a
 8004b8a:	1d18      	adds	r0, r3, #4
           p_ctx->tl.p_actual_packet + p_ctx->tl.packet_offset,
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	8b12      	ldrh	r2, [r2, #24]
 8004b94:	4413      	add	r3, r2
    memcpy(p_ctx->tx_frame_buffer+IFX_I2C_TL_HEADER_OFFSET + 1,
 8004b96:	89fa      	ldrh	r2, [r7, #14]
 8004b98:	4619      	mov	r1, r3
 8004b9a:	f004 f849 	bl	8008c30 <memcpy>
           tl_fragment_size);
    p_ctx->tl.packet_offset += tl_fragment_size;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	8b1a      	ldrh	r2, [r3, #24]
 8004ba2:	89fb      	ldrh	r3, [r7, #14]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	831a      	strh	r2, [r3, #24]
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size + 1));
 8004bac:	89fb      	ldrh	r3, [r7, #14]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7fe fe35 	bl	8003824 <ifx_i2c_dl_send_frame>
 8004bba:	4603      	mov	r3, r0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <ifx_i2c_tl_send_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_send_chaining_error(ifx_i2c_context_t * p_ctx)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
    uint16_t tl_fragment_size = 1;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	81fb      	strh	r3, [r7, #14]
    //lint --e{835} suppress "IFX_I2C_DL_HEADER_OFFSET macro is defined as 0x00 and is kept for future enhancements"
    p_ctx->tx_frame_buffer[IFX_I2C_TL_HEADER_OFFSET] = 0x07;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2207      	movs	r2, #7
 8004bd4:	f883 219d 	strb.w	r2, [r3, #413]	@ 0x19d
    p_ctx->tl.total_recv_length = 0;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	829a      	strh	r2, [r3, #20]
    //send the fragment to dl layer
    return (ifx_i2c_dl_send_frame(p_ctx,tl_fragment_size));
 8004bde:	89fb      	ldrh	r3, [r7, #14]
 8004be0:	4619      	mov	r1, r3
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fe fe1e 	bl	8003824 <ifx_i2c_dl_send_frame>
 8004be8:	4603      	mov	r3, r0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <ifx_i2c_tl_check_chaining_error>:

_STATIC_H optiga_lib_status_t ifx_i2c_tl_check_chaining_error(uint8_t current_chaning,
                                                              uint8_t previous_chaining)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	460a      	mov	r2, r1
 8004bfe:	71fb      	strb	r3, [r7, #7]
 8004c00:	4613      	mov	r3, r2
 8004c02:	71bb      	strb	r3, [r7, #6]
    optiga_lib_status_t status = IFX_I2C_STACK_ERROR;
 8004c04:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8004c08:	81fb      	strh	r3, [r7, #14]
    if (((TL_CHAINING_ERROR == current_chaning) || (TL_CHAINING_NO == current_chaning) ||
 8004c0a:	79fb      	ldrb	r3, [r7, #7]
 8004c0c:	2b07      	cmp	r3, #7
 8004c0e:	d00b      	beq.n	8004c28 <ifx_i2c_tl_check_chaining_error+0x34>
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d008      	beq.n	8004c28 <ifx_i2c_tl_check_chaining_error+0x34>
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d005      	beq.n	8004c28 <ifx_i2c_tl_check_chaining_error+0x34>
        (TL_CHAINING_LAST == current_chaning) || (TL_CHAINING_INTERMEDIATE == current_chaning) ||
 8004c1c:	79fb      	ldrb	r3, [r7, #7]
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d002      	beq.n	8004c28 <ifx_i2c_tl_check_chaining_error+0x34>
 8004c22:	79fb      	ldrb	r3, [r7, #7]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d110      	bne.n	8004c4a <ifx_i2c_tl_check_chaining_error+0x56>
        (TL_CHAINING_FIRST == current_chaning)))
    {
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 8004c28:	79fb      	ldrb	r3, [r7, #7]
 8004c2a:	4a0b      	ldr	r2, [pc, #44]	@ (8004c58 <ifx_i2c_tl_check_chaining_error+0x64>)
 8004c2c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8004c30:	79ba      	ldrb	r2, [r7, #6]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d007      	beq.n	8004c46 <ifx_i2c_tl_check_chaining_error+0x52>
            (g_pctr_states_table[current_chaning][1] == previous_chaining))
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	4a07      	ldr	r2, [pc, #28]	@ (8004c58 <ifx_i2c_tl_check_chaining_error+0x64>)
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	4413      	add	r3, r2
 8004c3e:	785b      	ldrb	r3, [r3, #1]
        if ((g_pctr_states_table[current_chaning][0] == previous_chaining) ||
 8004c40:	79ba      	ldrb	r2, [r7, #6]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d101      	bne.n	8004c4a <ifx_i2c_tl_check_chaining_error+0x56>
        {
            status =  IFX_I2C_STACK_SUCCESS;
 8004c46:	2300      	movs	r3, #0
 8004c48:	81fb      	strh	r3, [r7, #14]
        }
    }

    return (status);
 8004c4a:	89fb      	ldrh	r3, [r7, #14]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	08008d28 	.word	0x08008d28

08004c5c <presence_bit_check>:
// This functionality checks for the present bit in the pctr register
_STATIC_H  optiga_lib_status_t presence_bit_check(const ifx_i2c_context_t * p_ctx,
                                                  uint8_t pctr)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	460b      	mov	r3, r1
 8004c66:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_status= IFX_I2C_STACK_SUCCESS;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	81bb      	strh	r3, [r7, #12]
    uint8_t pctr_value;

    pctr_value = (pctr & TL_PCTR_CHANNEL_MASK);
 8004c6c:	78fb      	ldrb	r3, [r7, #3]
 8004c6e:	f023 0307 	bic.w	r3, r3, #7
 8004c72:	73fb      	strb	r3, [r7, #15]
            }
        }
    }
    else 
    {
        if ((FALSE == p_ctx->tl.initialization_state))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d105      	bne.n	8004c8a <presence_bit_check+0x2e>
        {
            if (IFX_I2C_PRESENCE_BIT_CHECK != pctr_value)
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <presence_bit_check+0x2e>
            {
                return_status = IFX_I2C_STACK_ERROR;
 8004c84:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8004c88:	81bb      	strh	r3, [r7, #12]
            }
        }
    }
    return (return_status);
 8004c8a:	89bb      	ldrh	r3, [r7, #12]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <ifx_i2c_dl_event_handler>:
_STATIC_H void ifx_i2c_dl_event_handler(ifx_i2c_context_t * p_ctx,
                                        optiga_lib_status_t event,
                                        const uint8_t * p_data,
                                        uint16_t data_len)
{
 8004c98:	b590      	push	{r4, r7, lr}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	607a      	str	r2, [r7, #4]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	817b      	strh	r3, [r7, #10]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	813b      	strh	r3, [r7, #8]
    uint8_t pctr = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	75fb      	strb	r3, [r7, #23]
    uint8_t chaining = 0;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	75bb      	strb	r3, [r7, #22]
    uint8_t exit_machine = TRUE;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	757b      	strb	r3, [r7, #21]
    do
    {
        if (NULL != p_data)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d006      	beq.n	8004ccc <ifx_i2c_dl_event_handler+0x34>
        {
            pctr = p_data[0];
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	75fb      	strb	r3, [r7, #23]
            chaining = pctr & TL_PCTR_CHAIN_MASK;
 8004cc4:	7dfb      	ldrb	r3, [r7, #23]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	75bb      	strb	r3, [r7, #22]
        }
        // Propagate errors to upper layer
        if (0 != (event & IFX_I2C_DL_EVENT_ERROR))
 8004ccc:	897b      	ldrh	r3, [r7, #10]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d006      	beq.n	8004ce4 <ifx_i2c_dl_event_handler+0x4c>
        {
            p_ctx->tl.state = TL_STATE_ERROR;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2206      	movs	r2, #6
 8004cda:	779a      	strb	r2, [r3, #30]
            p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8004ce2:	839a      	strh	r2, [r3, #28]
        }
        if (0 != data_len)
 8004ce4:	893b      	ldrh	r3, [r7, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00e      	beq.n	8004d08 <ifx_i2c_dl_event_handler+0x70>
        {
            if (0 != (presence_bit_check(p_ctx,pctr)))
 8004cea:	7dfb      	ldrb	r3, [r7, #23]
 8004cec:	4619      	mov	r1, r3
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f7ff ffb4 	bl	8004c5c <presence_bit_check>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d006      	beq.n	8004d08 <ifx_i2c_dl_event_handler+0x70>
            {
                p_ctx->tl.state = TL_STATE_ERROR;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2206      	movs	r2, #6
 8004cfe:	779a      	strb	r2, [r3, #30]
                p_ctx->tl.error_event = IFX_I2C_STACK_ERROR;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8004d06:	839a      	strh	r2, [r3, #28]
            }
        }
        p_ctx->tl.initialization_state = FALSE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        switch (p_ctx->tl.state)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	7f9b      	ldrb	r3, [r3, #30]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	2b07      	cmp	r3, #7
 8004d18:	f200 8199 	bhi.w	800504e <ifx_i2c_dl_event_handler+0x3b6>
 8004d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d24 <ifx_i2c_dl_event_handler+0x8c>)
 8004d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d22:	bf00      	nop
 8004d24:	08004d45 	.word	0x08004d45
 8004d28:	08004d59 	.word	0x08004d59
 8004d2c:	0800504f 	.word	0x0800504f
 8004d30:	08004ddf 	.word	0x08004ddf
 8004d34:	08004ef9 	.word	0x08004ef9
 8004d38:	08005023 	.word	0x08005023
 8004d3c:	08004fe7 	.word	0x08004fe7
 8004d40:	08004f97 	.word	0x08004f97
        {
            case TL_STATE_IDLE:
            {
                exit_machine = FALSE;
 8004d44:	2300      	movs	r3, #0
 8004d46:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, IFX_I2C_STACK_SUCCESS, 0, 0);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	68dc      	ldr	r4, [r3, #12]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2100      	movs	r1, #0
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	47a0      	blx	r4
            }
            break;
 8004d56:	e189      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
            case TL_STATE_TX:
            {
                // Frame transmission in Data Link layer complete, start receiving frames
                if (0 != (event & IFX_I2C_DL_EVENT_TX_SUCCESS))
 8004d58:	897b      	ldrh	r3, [r7, #10]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d039      	beq.n	8004dd6 <ifx_i2c_dl_event_handler+0x13e>
                {
                    if (p_ctx->tl.packet_offset < p_ctx->tl.actual_packet_length)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8b1a      	ldrh	r2, [r3, #24]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8adb      	ldrh	r3, [r3, #22]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d213      	bcs.n	8004d96 <ifx_i2c_dl_event_handler+0xfe>
                    {
                        // Transmission of one fragment complete, send next fragment
                        LOG_TL("[IFX-TL]: Tx:Fragment sent,now send next\n");
                        // Chaining error from slave
                        if (TL_CHAINING_ERROR == chaining)
 8004d6e:	7dbb      	ldrb	r3, [r7, #22]
 8004d70:	2b07      	cmp	r3, #7
 8004d72:	d103      	bne.n	8004d7c <ifx_i2c_dl_event_handler+0xe4>
                        {
                            LOG_TL("[IFX-TL]: Tx:Chaining error received while Tx\n");
                            p_ctx->tl.state = TL_STATE_RESEND;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2208      	movs	r2, #8
 8004d78:	779a      	strb	r2, [r3, #30]
                            break;
 8004d7a:	e177      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
                        }
                        // Any fragment received before complete transmission is error
                        if (0 != data_len)
 8004d7c:	893b      	ldrh	r3, [r7, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <ifx_i2c_dl_event_handler+0xf2>
                        {
                            LOG_TL("[IFX-TL]: Tx:Data received while Tx\n");
                            p_ctx->tl.state = TL_STATE_ERROR;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2206      	movs	r2, #6
 8004d86:	779a      	strb	r2, [r3, #30]
                            break;
 8004d88:	e170      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
                        }
                        exit_machine = FALSE;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	757b      	strb	r3, [r7, #21]
                        //lint --e{534} suppress "Error handling is not required so return value is not checked"
                        ifx_i2c_tl_send_next_fragment(p_ctx);
 8004d8e:	68f8      	ldr	r0, [r7, #12]
 8004d90:	f7ff fed9 	bl	8004b46 <ifx_i2c_tl_send_next_fragment>
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 8004d94:	e169      	b.n	800506a <ifx_i2c_dl_event_handler+0x3d2>
                        p_ctx->tl.state = TL_STATE_RX;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2204      	movs	r2, #4
 8004d9a:	779a      	strb	r2, [r3, #30]
                        p_ctx->tl.total_recv_length = 0;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	829a      	strh	r2, [r3, #20]
                        p_ctx->tl.previous_chaining = TL_CHAINING_NO;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
                        p_ctx->tl.transmission_completed = 1;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
                        if (!(event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 8004db2:	897b      	ldrh	r3, [r7, #10]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f040 8156 	bne.w	800506a <ifx_i2c_dl_event_handler+0x3d2>
                            if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f7fe fd5e 	bl	8003880 <ifx_i2c_dl_receive_frame>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <ifx_i2c_dl_event_handler+0x138>
                                p_ctx->tl.state = TL_STATE_ERROR;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2206      	movs	r2, #6
 8004dce:	779a      	strb	r2, [r3, #30]
                            exit_machine = FALSE;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	757b      	strb	r3, [r7, #21]
            break;
 8004dd4:	e149      	b.n	800506a <ifx_i2c_dl_event_handler+0x3d2>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2206      	movs	r2, #6
 8004dda:	779a      	strb	r2, [r3, #30]
                    break;
 8004ddc:	e146      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
            case TL_STATE_RX:
            {
                // Reception of frame from Data Link layer
                if (0 != (event & IFX_I2C_DL_EVENT_RX_SUCCESS))
 8004dde:	897b      	ldrh	r3, [r7, #10]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f000 8083 	beq.w	8004ef0 <ifx_i2c_dl_event_handler+0x258>
                {
                    // Message must contain at least the transport layer header
                    if (data_len < TL_HEADER_SIZE)
 8004dea:	893b      	ldrh	r3, [r7, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d103      	bne.n	8004df8 <ifx_i2c_dl_event_handler+0x160>
                    {
                        LOG_TL("[IFX-TL]: Rx : Data received is more than header len\n");
                        p_ctx->tl.state = TL_STATE_ERROR;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2206      	movs	r2, #6
 8004df4:	779a      	strb	r2, [r3, #30]
                        break;
 8004df6:	e139      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
                    }

                    if (IFX_I2C_STACK_MEM_ERROR == p_ctx->tl.error_event)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8b9b      	ldrh	r3, [r3, #28]
 8004dfc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e00:	d112      	bne.n	8004e28 <ifx_i2c_dl_event_handler+0x190>
                    {
                        if ((TL_CHAINING_LAST == chaining) || (0 != ifx_i2c_dl_receive_frame(p_ctx)))
 8004e02:	7dbb      	ldrb	r3, [r7, #22]
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d005      	beq.n	8004e14 <ifx_i2c_dl_event_handler+0x17c>
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f7fe fd39 	bl	8003880 <ifx_i2c_dl_receive_frame>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <ifx_i2c_dl_event_handler+0x184>
                        {
                            p_ctx->tl.state = TL_STATE_ERROR;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2206      	movs	r2, #6
 8004e18:	779a      	strb	r2, [r3, #30]
                            break;
 8004e1a:	e127      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
                        }
                        p_ctx->tl.state = TL_STATE_RX;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2204      	movs	r2, #4
 8004e20:	779a      	strb	r2, [r3, #30]
                        exit_machine = FALSE;
 8004e22:	2300      	movs	r3, #0
 8004e24:	757b      	strb	r3, [r7, #21]
                        break;
 8004e26:	e121      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
                    }

                    // If chaining error detected
                    if (IFX_I2C_STACK_SUCCESS != ifx_i2c_tl_check_chaining_error(chaining,p_ctx->tl.previous_chaining))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8004e2e:	7dbb      	ldrb	r3, [r7, #22]
 8004e30:	4611      	mov	r1, r2
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7ff fede 	bl	8004bf4 <ifx_i2c_tl_check_chaining_error>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <ifx_i2c_dl_event_handler+0x1ae>
                    {
                        LOG_TL("[IFX-TL]: Rx : Chaining state is not correct\n");
                        p_ctx->tl.state = TL_STATE_RESEND;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2208      	movs	r2, #8
 8004e42:	779a      	strb	r2, [r3, #30]
                        break;
 8004e44:	e112      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
                    }

                    p_ctx->tl.previous_chaining = chaining & 0x07;
 8004e46:	7dbb      	ldrb	r3, [r7, #22]
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
                    if (NULL == p_data)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d103      	bne.n	8004e62 <ifx_i2c_dl_event_handler+0x1ca>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2206      	movs	r2, #6
 8004e5e:	779a      	strb	r2, [r3, #30]
                        break;
 8004e60:	e104      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
                    }

                    // No chaining and Last
                    if ((TL_CHAINING_NO == chaining) || (TL_CHAINING_LAST == chaining))
 8004e62:	7dbb      	ldrb	r3, [r7, #22]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <ifx_i2c_dl_event_handler+0x1d6>
 8004e68:	7dbb      	ldrb	r3, [r7, #22]
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d13c      	bne.n	8004ee8 <ifx_i2c_dl_event_handler+0x250>
                    {
                        LOG_TL("[IFX-TL]: Rx : No chain/Last chain received, Inform UL\n");
                        // Check for possible receive buffer overflow
                        if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8a9b      	ldrh	r3, [r3, #20]
 8004e72:	461a      	mov	r2, r3
 8004e74:	893b      	ldrh	r3, [r7, #8]
 8004e76:	4413      	add	r3, r2
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	6892      	ldr	r2, [r2, #8]
 8004e7e:	8812      	ldrh	r2, [r2, #0]
 8004e80:	4293      	cmp	r3, r2
 8004e82:	dd07      	ble.n	8004e94 <ifx_i2c_dl_event_handler+0x1fc>
                        {
                            LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                            p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004e8a:	839a      	strh	r2, [r3, #28]
                            p_ctx->tl.state = TL_STATE_ERROR;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2206      	movs	r2, #6
 8004e90:	779a      	strb	r2, [r3, #30]
                            break;
 8004e92:	e0eb      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
                        }
                        exit_machine = FALSE;
 8004e94:	2300      	movs	r3, #0
 8004e96:	757b      	strb	r3, [r7, #21]
                        // Copy frame payload to transport layer receive buffer
                        memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	8a92      	ldrh	r2, [r2, #20]
 8004ea0:	1898      	adds	r0, r3, r2
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	1c59      	adds	r1, r3, #1
 8004ea6:	893b      	ldrh	r3, [r7, #8]
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f003 fec0 	bl	8008c30 <memcpy>
                        p_ctx->tl.total_recv_length += (data_len - 1);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8a9a      	ldrh	r2, [r3, #20]
 8004eb4:	893b      	ldrh	r3, [r7, #8]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	829a      	strh	r2, [r3, #20]
                        // Inform upper layer that a packet has arrived
                        p_ctx->tl.state = TL_STATE_IDLE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	779a      	strb	r2, [r3, #30]
                        *p_ctx->tl.p_recv_packet_buffer_length = p_ctx->tl.total_recv_length;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	8a92      	ldrh	r2, [r2, #20]
 8004ed0:	801a      	strh	r2, [r3, #0]
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	68dc      	ldr	r4, [r3, #12]
                                                            p_ctx->tl.p_recv_packet_buffer,
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685a      	ldr	r2, [r3, #4]
                                                            *p_ctx->tl.p_recv_packet_buffer_length);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	689b      	ldr	r3, [r3, #8]
                        p_ctx->tl.upper_layer_event_handler(p_ctx,IFX_I2C_STACK_SUCCESS,
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	68f8      	ldr	r0, [r7, #12]
 8004ee4:	47a0      	blx	r4
                    LOG_TL("[IFX-TL]: Tx:IFX_I2C_DL_EVENT_TX_SUCCESS is not satisfied Tx\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                    break;
                }
            }
            break;
 8004ee6:	e0c1      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
                        p_ctx->tl.state = TL_STATE_CHAINING;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2205      	movs	r2, #5
 8004eec:	779a      	strb	r2, [r3, #30]
            break;
 8004eee:	e0bd      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2206      	movs	r2, #6
 8004ef4:	779a      	strb	r2, [r3, #30]
                    break;
 8004ef6:	e0b9      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
            case TL_STATE_CHAINING:
            {
                LOG_TL("[IFX-TL]: Chain : Chaining mode entered\n");
                // When receiving a starting fragment, fragment length must be max frame size for intermediate and last 
                // frame the buffer should not be empty
                if (data_len != (p_ctx->tl.max_packet_length + 1))
 8004ef8:	893a      	ldrh	r2, [r7, #8]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8b5b      	ldrh	r3, [r3, #26]
 8004efe:	3301      	adds	r3, #1
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d003      	beq.n	8004f0c <ifx_i2c_dl_event_handler+0x274>
                {
                    LOG_TL("[IFX-TL]: Chain : Data len not equal to max frame size\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2207      	movs	r2, #7
 8004f08:	779a      	strb	r2, [r3, #30]
                    break;
 8004f0a:	e0af      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
                }
                // Check for possible receive buffer overflow
                if ((p_ctx->tl.total_recv_length + data_len - 1) > (*p_ctx->tl.p_recv_packet_buffer_length))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8a9b      	ldrh	r3, [r3, #20]
 8004f10:	461a      	mov	r2, r3
 8004f12:	893b      	ldrh	r3, [r7, #8]
 8004f14:	4413      	add	r3, r2
 8004f16:	3b01      	subs	r3, #1
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	6892      	ldr	r2, [r2, #8]
 8004f1c:	8812      	ldrh	r2, [r2, #0]
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	dd07      	ble.n	8004f32 <ifx_i2c_dl_event_handler+0x29a>
                {
                    LOG_TL("[IFX-TL]: Chain : Buffer overflow\n");
                    p_ctx->tl.error_event = IFX_I2C_STACK_MEM_ERROR;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004f28:	839a      	strh	r2, [r3, #28]
                    p_ctx->tl.state = TL_STATE_RX;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2204      	movs	r2, #4
 8004f2e:	779a      	strb	r2, [r3, #30]
                    break;
 8004f30:	e09c      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
                }
                if (NULL == p_data)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d103      	bne.n	8004f40 <ifx_i2c_dl_event_handler+0x2a8>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2206      	movs	r2, #6
 8004f3c:	779a      	strb	r2, [r3, #30]
                    break;
 8004f3e:	e095      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
                }
                // Copy frame payload to transport layer receive buffer
                memcpy(p_ctx->tl.p_recv_packet_buffer + p_ctx->tl.total_recv_length, p_data + 1, data_len - 1);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	8a92      	ldrh	r2, [r2, #20]
 8004f48:	1898      	adds	r0, r3, r2
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	1c59      	adds	r1, r3, #1
 8004f4e:	893b      	ldrh	r3, [r7, #8]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	461a      	mov	r2, r3
 8004f54:	f003 fe6c 	bl	8008c30 <memcpy>
                p_ctx->tl.total_recv_length += (data_len - 1);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8a9a      	ldrh	r2, [r3, #20]
 8004f5c:	893b      	ldrh	r3, [r7, #8]
 8004f5e:	4413      	add	r3, r2
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	829a      	strh	r2, [r3, #20]

                p_ctx->tl.previous_chaining = pctr & 0x07;
 8004f6a:	7dfb      	ldrb	r3, [r7, #23]
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
                LOG_TL("[IFX-TL]: Chain : Continue  in receive mode\n");
                p_ctx->tl.state = TL_STATE_RX;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	779a      	strb	r2, [r3, #30]
                // Continue receiving frames until packet is complete
                if (0 != ifx_i2c_dl_receive_frame(p_ctx))
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f7fe fc7e 	bl	8003880 <ifx_i2c_dl_receive_frame>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <ifx_i2c_dl_event_handler+0x2f8>
                {
                    p_ctx->tl.state = TL_STATE_ERROR;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2206      	movs	r2, #6
 8004f8e:	779a      	strb	r2, [r3, #30]
                }
                exit_machine = FALSE;
 8004f90:	2300      	movs	r3, #0
 8004f92:	757b      	strb	r3, [r7, #21]
            }
            break;
 8004f94:	e06a      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
            case TL_STATE_RESEND:
            {
                LOG_TL("[IFX-TL]: Resend Enter\n");
                // In received mode , for wrong pctr with data
                if ((data_len > 1) && (p_ctx->tl.transmission_completed == 1))
 8004f96:	893b      	ldrh	r3, [r7, #8]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d908      	bls.n	8004fae <ifx_i2c_dl_event_handler+0x316>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d103      	bne.n	8004fae <ifx_i2c_dl_event_handler+0x316>
                {
                    LOG_TL("[IFX-TL]: Resend : Send chaining error\n");
                    p_ctx->tl.state = TL_STATE_CHAINING_ERROR;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2207      	movs	r2, #7
 8004faa:	779a      	strb	r2, [r3, #30]
                    break;
 8004fac:	e05e      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
                }
                // Master Resend the packets,Resend only once, otherwise exit with error
                if (0 == (p_ctx->tl.chaining_error_count++))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	7fdb      	ldrb	r3, [r3, #31]
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	b2d1      	uxtb	r1, r2
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	77d1      	strb	r1, [r2, #31]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10f      	bne.n	8004fde <ifx_i2c_dl_event_handler+0x346>
                {
                    LOG_TL("[IFX-TL]: Resend : Resending\n");
                    p_ctx->tl.state = TL_STATE_IDLE;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	779a      	strb	r2, [r3, #30]
                    if (0 != ifx_i2c_tl_resend_packets(p_ctx))
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f7ff fd6b 	bl	8004aa0 <ifx_i2c_tl_resend_packets>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <ifx_i2c_dl_event_handler+0x340>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2206      	movs	r2, #6
 8004fd4:	779a      	strb	r2, [r3, #30]
                {
                    LOG_TL("[IFX-TL]: Resend : chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 8004fd6:	e049      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
                        exit_machine = FALSE;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	757b      	strb	r3, [r7, #21]
            break;
 8004fdc:	e046      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
                    p_ctx->tl.state = TL_STATE_ERROR;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2206      	movs	r2, #6
 8004fe2:	779a      	strb	r2, [r3, #30]
            break;
 8004fe4:	e042      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
            case TL_STATE_CHAINING_ERROR:
            {
                // Send chaining error to slave
                p_ctx->tl.state = TL_STATE_TX;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	779a      	strb	r2, [r3, #30]
                if (0 == (p_ctx->tl.master_chaining_error_count++))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	b2d1      	uxtb	r1, r2
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	f882 1020 	strb.w	r1, [r2, #32]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10c      	bne.n	800501a <ifx_i2c_dl_event_handler+0x382>
                {
                    LOG_TL("[IFX-TL]: Chain error : Sending chain error\n");
                    // Send chaining error only once
                    if (0 != ifx_i2c_tl_send_chaining_error(p_ctx))
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f7ff fddf 	bl	8004bc4 <ifx_i2c_tl_send_chaining_error>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <ifx_i2c_dl_event_handler+0x37c>
                    {
                        p_ctx->tl.state = TL_STATE_ERROR;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2206      	movs	r2, #6
 8005010:	779a      	strb	r2, [r3, #30]
                {
                    LOG_TL("[IFX-TL]: Chain error : master_chaining_error_count exceeded\n");
                    p_ctx->tl.state = TL_STATE_ERROR;
                }
            }
            break;
 8005012:	e02b      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
                        exit_machine = FALSE;
 8005014:	2300      	movs	r3, #0
 8005016:	757b      	strb	r3, [r7, #21]
            break;
 8005018:	e028      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
                    p_ctx->tl.state = TL_STATE_ERROR;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2206      	movs	r2, #6
 800501e:	779a      	strb	r2, [r3, #30]
            break;
 8005020:	e024      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
            case TL_STATE_ERROR:
            {
                LOG_TL("[IFX-TL]: Error\n");
                exit_machine = FALSE;
 8005022:	2300      	movs	r3, #0
 8005024:	757b      	strb	r3, [r7, #21]
                if ((0 != (event & IFX_I2C_DL_EVENT_ERROR)) || (0 != data_len))
 8005026:	897b      	ldrh	r3, [r7, #10]
 8005028:	f003 0301 	and.w	r3, r3, #1
 800502c:	2b00      	cmp	r3, #0
 800502e:	d102      	bne.n	8005036 <ifx_i2c_dl_event_handler+0x39e>
 8005030:	893b      	ldrh	r3, [r7, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <ifx_i2c_dl_event_handler+0x3a4>
                {
                    p_ctx->tl.state = TL_STATE_IDLE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2201      	movs	r2, #1
 800503a:	779a      	strb	r2, [r3, #30]
                }
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	68dc      	ldr	r4, [r3, #12]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8b99      	ldrh	r1, [r3, #28]
 8005044:	2300      	movs	r3, #0
 8005046:	2200      	movs	r2, #0
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	47a0      	blx	r4
            }
            break;
 800504c:	e00e      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
            default:
            {
                LOG_TL("[IFX-TL]: Exit from default case\n");
                p_ctx->tl.state = TL_STATE_IDLE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	779a      	strb	r2, [r3, #30]
                exit_machine = FALSE;
 8005054:	2300      	movs	r3, #0
 8005056:	757b      	strb	r3, [r7, #21]
                p_ctx->tl.upper_layer_event_handler(p_ctx, p_ctx->tl.error_event, 0u, 0u);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	68dc      	ldr	r4, [r3, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8b99      	ldrh	r1, [r3, #28]
 8005060:	2300      	movs	r3, #0
 8005062:	2200      	movs	r2, #0
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	47a0      	blx	r4
            }
            break;
 8005068:	e000      	b.n	800506c <ifx_i2c_dl_event_handler+0x3d4>
            break;
 800506a:	bf00      	nop
        }
    } while (TRUE == exit_machine);
 800506c:	7d7b      	ldrb	r3, [r7, #21]
 800506e:	2b01      	cmp	r3, #1
 8005070:	f43f ae22 	beq.w	8004cb8 <ifx_i2c_dl_event_handler+0x20>
}
 8005074:	bf00      	nop
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	bd90      	pop	{r4, r7, pc}
 800507e:	bf00      	nop

08005080 <optiga_comms_create>:

_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t *p_ctx);
_STATIC_H void ifx_i2c_event_handler(void* p_ctx, optiga_lib_status_t event);

optiga_comms_t * optiga_comms_create(callback_handler_t callback, void * context)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
    optiga_comms_t * p_optiga_comms = NULL;
 800508a:	2300      	movs	r3, #0
 800508c:	60fb      	str	r3, [r7, #12]

    do
    {
        p_optiga_comms = &optiga_comms;
 800508e:	4b0e      	ldr	r3, [pc, #56]	@ (80050c8 <optiga_comms_create+0x48>)
 8005090:	60fb      	str	r3, [r7, #12]

        if (FALSE == p_optiga_comms->instance_init_state)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	7c1b      	ldrb	r3, [r3, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d110      	bne.n	80050bc <optiga_comms_create+0x3c>
        {
#ifdef OPTIGA_PAL_INIT_ENABLED
            if (PAL_STATUS_SUCCESS != pal_init())
 800509a:	f000 fcb3 	bl	8005a04 <pal_init>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <optiga_comms_create+0x2a>
            {
                p_optiga_comms = NULL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]
                break;
 80050a8:	e008      	b.n	80050bc <optiga_comms_create+0x3c>
            }
#endif
            p_optiga_comms->upper_layer_handler = callback;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	60da      	str	r2, [r3, #12]
            p_optiga_comms->p_upper_layer_ctx = context;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	609a      	str	r2, [r3, #8]
            p_optiga_comms->instance_init_state = TRUE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2201      	movs	r2, #1
 80050ba:	741a      	strb	r2, [r3, #16]
        }
    } while (FALSE);
    return (p_optiga_comms);
 80050bc:	68fb      	ldr	r3, [r7, #12]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	200003dc 	.word	0x200003dc

080050cc <optiga_comms_set_callback_context>:
    p_optiga_comms->upper_layer_handler = handler;
    return (0);
}

optiga_lib_status_t optiga_comms_set_callback_context(optiga_comms_t * p_optiga_comms, void * context)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
    p_optiga_comms->p_upper_layer_ctx = context;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	609a      	str	r2, [r3, #8]
    return (0);
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
	...

080050ec <optiga_comms_open>:


/// @endcond

optiga_lib_status_t optiga_comms_open(optiga_comms_t * p_ctx)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 80050f4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80050f8:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f888 	bl	8005210 <check_optiga_comms_state>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d11c      	bne.n	8005140 <optiga_comms_open+0x54>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	4a0d      	ldr	r2, [pc, #52]	@ (800514c <optiga_comms_open+0x60>)
 8005116:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
#endif
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->pal_os_event_ctx = p_ctx->p_pal_os_event_ctx;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6812      	ldr	r2, [r2, #0]
 8005122:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190

        status = ifx_i2c_open((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	4618      	mov	r0, r3
 800512c:	f7fe f9da 	bl	80034e4 <ifx_i2c_open>
 8005130:	4603      	mov	r3, r0
 8005132:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 8005134:	89fb      	ldrh	r3, [r7, #14]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <optiga_comms_open+0x54>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005140:	89fb      	ldrh	r3, [r7, #14]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	08005245 	.word	0x08005245

08005150 <optiga_comms_transceive>:
optiga_lib_status_t optiga_comms_transceive(optiga_comms_t * p_ctx,
                                            const uint8_t * p_tx_data,
                                            uint16_t tx_data_length,
                                            uint8_t * p_rx_data,
                                            uint16_t * p_rx_data_len)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b088      	sub	sp, #32
 8005154:	af02      	add	r7, sp, #8
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	4613      	mov	r3, r2
 800515e:	80fb      	strh	r3, [r7, #6]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005160:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005164:	82fb      	strh	r3, [r7, #22]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 f852 	bl	8005210 <check_optiga_comms_state>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d11a      	bne.n	80051a8 <optiga_comms_transceive+0x58>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	4a0c      	ldr	r2, [pc, #48]	@ (80051b4 <optiga_comms_transceive+0x64>)
 8005182:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protection_level = p_ctx->protection_level;
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->protocol_version = p_ctx->protocol_version;
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
#endif
        status = (ifx_i2c_transceive((ifx_i2c_context_t * )(p_ctx->p_comms_ctx),
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6858      	ldr	r0, [r3, #4]
 800518a:	88fa      	ldrh	r2, [r7, #6]
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	f7fe f9df 	bl	8003556 <ifx_i2c_transceive>
 8005198:	4603      	mov	r3, r0
 800519a:	82fb      	strh	r3, [r7, #22]
                                     p_tx_data,
                                     tx_data_length,
                                     p_rx_data,
                                     p_rx_data_len));
        if (IFX_I2C_STACK_SUCCESS != status)
 800519c:	8afb      	ldrh	r3, [r7, #22]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <optiga_comms_transceive+0x58>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 80051a8:	8afb      	ldrh	r3, [r7, #22]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	08005245 	.word	0x08005245

080051b8 <optiga_comms_close>:


optiga_lib_status_t optiga_comms_close(optiga_comms_t * p_ctx)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 80051c0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80051c4:	81fb      	strh	r3, [r7, #14]
    if (OPTIGA_COMMS_SUCCESS == check_optiga_comms_state(p_ctx))
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f822 	bl	8005210 <check_optiga_comms_state>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d116      	bne.n	8005200 <optiga_comms_close+0x48>
    {
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->p_upper_layer_ctx = (void * )p_ctx;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	f8c3 2184 	str.w	r2, [r3, #388]	@ 0x184
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->upper_layer_event_handler = ifx_i2c_event_handler;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	4a0a      	ldr	r2, [pc, #40]	@ (800520c <optiga_comms_close+0x54>)
 80051e2:	f8c3 2180 	str.w	r2, [r3, #384]	@ 0x180
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        ((ifx_i2c_context_t * )(p_ctx->p_comms_ctx))->manage_context_operation = p_ctx->manage_context_operation;
#endif
        status = ifx_i2c_close((ifx_i2c_context_t * )(p_ctx->p_comms_ctx));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fe f9f2 	bl	80035d4 <ifx_i2c_close>
 80051f0:	4603      	mov	r3, r0
 80051f2:	81fb      	strh	r3, [r7, #14]
        if (IFX_I2C_STACK_SUCCESS != status)
 80051f4:	89fb      	ldrh	r3, [r7, #14]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d002      	beq.n	8005200 <optiga_comms_close+0x48>
        {
            p_ctx->state = OPTIGA_COMMS_FREE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	745a      	strb	r2, [r3, #17]
        }
    }
    return (status);
 8005200:	89fb      	ldrh	r3, [r7, #14]
}
 8005202:	4618      	mov	r0, r3
 8005204:	3710      	adds	r7, #16
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	08005245 	.word	0x08005245

08005210 <check_optiga_comms_state>:

/// @cond hidden
_STATIC_H optiga_lib_status_t check_optiga_comms_state(optiga_comms_t * p_ctx)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
    optiga_lib_status_t status = OPTIGA_COMMS_ERROR;
 8005218:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800521c:	81fb      	strh	r3, [r7, #14]
    if ((NULL != p_ctx) && (OPTIGA_COMMS_INUSE != p_ctx->state))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <check_optiga_comms_state+0x26>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	7c5b      	ldrb	r3, [r3, #17]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d004      	beq.n	8005236 <check_optiga_comms_state+0x26>
    {
        p_ctx->state = OPTIGA_COMMS_INUSE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	745a      	strb	r2, [r3, #17]
        status = OPTIGA_COMMS_SUCCESS;
 8005232:	2300      	movs	r3, #0
 8005234:	81fb      	strh	r3, [r7, #14]
    }
    return (status);
 8005236:	89fb      	ldrh	r3, [r7, #14]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <ifx_i2c_event_handler>:

//lint --e{818} suppress "This is ignored as upper layer handler function prototype requires this argument"
_STATIC_H void ifx_i2c_event_handler(void * p_upper_layer_ctx, optiga_lib_status_t event)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	807b      	strh	r3, [r7, #2]
    void * ctx = ((optiga_comms_t * )p_upper_layer_ctx)->p_upper_layer_ctx;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	60fb      	str	r3, [r7, #12]
    ((optiga_comms_t * )p_upper_layer_ctx)->upper_layer_handler(ctx, event);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	887a      	ldrh	r2, [r7, #2]
 800525c:	4611      	mov	r1, r2
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	4798      	blx	r3
    ((optiga_comms_t * )p_upper_layer_ctx)->state = OPTIGA_COMMS_FREE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	745a      	strb	r2, [r3, #17]
}
 8005268:	bf00      	nop
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <optiga_crypt_generic_event_handler>:

#endif

_STATIC_H void optiga_crypt_generic_event_handler(void * p_ctx,
                                                  optiga_lib_status_t event)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	807b      	strh	r3, [r7, #2]
    optiga_crypt_t * me = (optiga_crypt_t *)p_ctx;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	60fb      	str	r3, [r7, #12]

    me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	851a      	strh	r2, [r3, #40]	@ 0x28
    me->handler(me->caller_context, event);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	6a12      	ldr	r2, [r2, #32]
 800528e:	8879      	ldrh	r1, [r7, #2]
 8005290:	4610      	mov	r0, r2
 8005292:	4798      	blx	r3
}
 8005294:	bf00      	nop
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <optiga_crypt_reset_protection_level>:

_STATIC_H void optiga_crypt_reset_protection_level(optiga_crypt_t * me)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
    if (NULL != me)
#endif
    {
        OPTIGA_CRYPT_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
    }
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <optiga_crypt_generate_keypair>:
                                                            uint8_t key_usage,
                                                            bool_t export_private_key,
                                                            void * p_private_key,
                                                            uint8_t * p_public_key,
                                                            uint16_t * p_public_key_length)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	4608      	mov	r0, r1
 80052ba:	4611      	mov	r1, r2
 80052bc:	461a      	mov	r2, r3
 80052be:	4603      	mov	r3, r0
 80052c0:	70fb      	strb	r3, [r7, #3]
 80052c2:	460b      	mov	r3, r1
 80052c4:	70bb      	strb	r3, [r7, #2]
 80052c6:	4613      	mov	r3, r2
 80052c8:	707b      	strb	r3, [r7, #1]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 80052ca:	f240 4302 	movw	r3, #1026	@ 0x402
 80052ce:	81fb      	strh	r3, [r7, #14]
    optiga_gen_keypair_params_t * p_params;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00c      	beq.n	80052f0 <optiga_crypt_generate_keypair+0x40>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d008      	beq.n	80052f0 <optiga_crypt_generate_keypair+0x40>
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <optiga_crypt_generate_keypair+0x40>
            (NULL == p_public_key) || (NULL == p_private_key) || (NULL == p_public_key_length))
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <optiga_crypt_generate_keypair+0x40>
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d103      	bne.n	80052f8 <optiga_crypt_generate_keypair+0x48>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 80052f0:	f240 4303 	movw	r3, #1027	@ 0x403
 80052f4:	81fb      	strh	r3, [r7, #14]
            break;
 80052f6:	e035      	b.n	8005364 <optiga_crypt_generate_keypair+0xb4>
        }
#endif
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d103      	bne.n	8005308 <optiga_crypt_generate_keypair+0x58>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8005300:	f240 4305 	movw	r3, #1029	@ 0x405
 8005304:	81fb      	strh	r3, [r7, #14]
            break;
 8005306:	e02d      	b.n	8005364 <optiga_crypt_generate_keypair+0xb4>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	851a      	strh	r2, [r3, #40]	@ 0x28
        p_params = (optiga_gen_keypair_params_t *)&(me->params.optiga_gen_keypair_params);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	60bb      	str	r3, [r7, #8]
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	221c      	movs	r2, #28
 8005316:	2100      	movs	r1, #0
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fe88 	bl	800602e <pal_os_memset>

        p_params->key_usage = key_usage;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	78ba      	ldrb	r2, [r7, #2]
 8005322:	749a      	strb	r2, [r3, #18]
        p_params->export_private_key = export_private_key;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	787a      	ldrb	r2, [r7, #1]
 8005328:	74da      	strb	r2, [r3, #19]
        p_params->public_key_length = p_public_key_length;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	6a3a      	ldr	r2, [r7, #32]
 800532e:	60da      	str	r2, [r3, #12]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);

        if (export_private_key)
 8005330:	787b      	ldrb	r3, [r7, #1]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <optiga_crypt_generate_keypair+0x8e>
        {
            p_params->private_key = (uint8_t *)p_private_key;
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	69ba      	ldr	r2, [r7, #24]
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	e003      	b.n	8005346 <optiga_crypt_generate_keypair+0x96>
        }
        else
        {
            p_params->private_key_oid = (optiga_key_id_t)(* ((uint16_t* )p_private_key));
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	881a      	ldrh	r2, [r3, #0]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	821a      	strh	r2, [r3, #16]
        }

        p_params->public_key = p_public_key;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	69fa      	ldr	r2, [r7, #28]
 800534a:	609a      	str	r2, [r3, #8]
        p_params->public_key_length = p_public_key_length;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	6a3a      	ldr	r2, [r7, #32]
 8005350:	60da      	str	r2, [r3, #12]

        return_value = optiga_cmd_gen_keypair(me->my_cmd,
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69db      	ldr	r3, [r3, #28]
 8005356:	78f9      	ldrb	r1, [r7, #3]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	4618      	mov	r0, r3
 800535c:	f7fd fbce 	bl	8002afc <optiga_cmd_gen_keypair>
 8005360:	4603      	mov	r3, r0
 8005362:	81fb      	strh	r3, [r7, #14]
                                              (uint8_t )cmd_param,
                                              (optiga_gen_keypair_params_t *)p_params);
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff ff99 	bl	800529c <optiga_crypt_reset_protection_level>

    return (return_value);
 800536a:	89fb      	ldrh	r3, [r7, #14]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <optiga_crypt_sign>:
                                                uint8_t digest_length,
                                                optiga_key_id_t private_key,
                                                uint8_t * p_signature,
                                                uint16_t * p_signature_length,
                                                uint16_t salt_length)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	607a      	str	r2, [r7, #4]
 800537e:	461a      	mov	r2, r3
 8005380:	460b      	mov	r3, r1
 8005382:	72fb      	strb	r3, [r7, #11]
 8005384:	4613      	mov	r3, r2
 8005386:	72bb      	strb	r3, [r7, #10]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 8005388:	f240 4302 	movw	r3, #1026	@ 0x402
 800538c:	82fb      	strh	r3, [r7, #22]
    optiga_calc_sign_params_t * p_params;

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == p_digest) ||
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00c      	beq.n	80053ae <optiga_crypt_sign+0x3a>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d008      	beq.n	80053ae <optiga_crypt_sign+0x3a>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <optiga_crypt_sign+0x3a>
 80053a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <optiga_crypt_sign+0x3a>
            (NULL == p_signature) || (NULL == p_signature_length))
 80053a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d103      	bne.n	80053b6 <optiga_crypt_sign+0x42>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 80053ae:	f240 4303 	movw	r3, #1027	@ 0x403
 80053b2:	82fb      	strh	r3, [r7, #22]
            break;
 80053b4:	e030      	b.n	8005418 <optiga_crypt_sign+0xa4>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d103      	bne.n	80053c6 <optiga_crypt_sign+0x52>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 80053be:	f240 4305 	movw	r3, #1029	@ 0x405
 80053c2:	82fb      	strh	r3, [r7, #22]
            break;
 80053c4:	e028      	b.n	8005418 <optiga_crypt_sign+0xa4>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2201      	movs	r2, #1
 80053ca:	851a      	strh	r2, [r3, #40]	@ 0x28

        p_params = (optiga_calc_sign_params_t *)&(me->params.optiga_calc_sign_params);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	221c      	movs	r2, #28
 80053d4:	2100      	movs	r1, #0
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fe29 	bl	800602e <pal_os_memset>

        p_params->p_digest = p_digest;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	601a      	str	r2, [r3, #0]
        p_params->digest_length = digest_length;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	7aba      	ldrb	r2, [r7, #10]
 80053e6:	739a      	strb	r2, [r3, #14]
        p_params->private_key_oid = private_key;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	8c3a      	ldrh	r2, [r7, #32]
 80053ec:	819a      	strh	r2, [r3, #12]
        p_params->p_signature = p_signature;
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053f2:	605a      	str	r2, [r3, #4]
        p_params->p_signature_length = p_signature_length;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053f8:	609a      	str	r2, [r3, #8]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);

        return_value = optiga_cmd_calc_sign(me->my_cmd,
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	7af9      	ldrb	r1, [r7, #11]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4618      	mov	r0, r3
 8005404:	f7fd f8ec 	bl	80025e0 <optiga_cmd_calc_sign>
 8005408:	4603      	mov	r3, r0
 800540a:	82fb      	strh	r3, [r7, #22]
                                            signature_scheme,
                                            (optiga_calc_sign_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 800540c:	8afb      	ldrh	r3, [r7, #22]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <optiga_crypt_sign+0xa4>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f7ff ff3f 	bl	800529c <optiga_crypt_reset_protection_level>

    return (return_value);
 800541e:	8afb      	ldrh	r3, [r7, #22]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <optiga_crypt_verify>:
                                                  const uint8_t * p_signature,
                                                  uint16_t signature_length,
                                                  uint8_t public_key_source_type,
                                                  const void * p_public_key,
                                                  uint16_t salt_length)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	607a      	str	r2, [r7, #4]
 8005432:	461a      	mov	r2, r3
 8005434:	460b      	mov	r3, r1
 8005436:	72fb      	strb	r3, [r7, #11]
 8005438:	4613      	mov	r3, r2
 800543a:	72bb      	strb	r3, [r7, #10]
    optiga_verify_sign_params_t * p_params;
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 800543c:	f240 4302 	movw	r3, #1026	@ 0x402
 8005440:	82fb      	strh	r3, [r7, #22]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) ||
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00c      	beq.n	8005462 <optiga_crypt_verify+0x3a>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d008      	beq.n	8005462 <optiga_crypt_verify+0x3a>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d005      	beq.n	8005462 <optiga_crypt_verify+0x3a>
            (NULL == p_digest) || (NULL == p_signature) || (NULL == p_public_key))
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d002      	beq.n	8005462 <optiga_crypt_verify+0x3a>
 800545c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800545e:	2b00      	cmp	r3, #0
 8005460:	d103      	bne.n	800546a <optiga_crypt_verify+0x42>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8005462:	f240 4303 	movw	r3, #1027	@ 0x403
 8005466:	82fb      	strh	r3, [r7, #22]
            break;
 8005468:	e03d      	b.n	80054e6 <optiga_crypt_verify+0xbe>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800546e:	2b01      	cmp	r3, #1
 8005470:	d103      	bne.n	800547a <optiga_crypt_verify+0x52>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8005472:	f240 4305 	movw	r3, #1029	@ 0x405
 8005476:	82fb      	strh	r3, [r7, #22]
            break;
 8005478:	e035      	b.n	80054e6 <optiga_crypt_verify+0xbe>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2201      	movs	r2, #1
 800547e:	851a      	strh	r2, [r3, #40]	@ 0x28
        p_params = (optiga_verify_sign_params_t *)&(me->params.optiga_verify_sign_params);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	221c      	movs	r2, #28
 8005488:	2100      	movs	r1, #0
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fdcf 	bl	800602e <pal_os_memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->p_digest = p_digest;
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	601a      	str	r2, [r3, #0]
        p_params->digest_length = digest_length;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	7aba      	ldrb	r2, [r7, #10]
 800549a:	741a      	strb	r2, [r3, #16]
        p_params->p_signature = p_signature;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	6a3a      	ldr	r2, [r7, #32]
 80054a0:	605a      	str	r2, [r3, #4]
        p_params->signature_length = signature_length;
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80054a6:	819a      	strh	r2, [r3, #12]
        p_params->public_key_source_type = public_key_source_type;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80054ae:	745a      	strb	r2, [r3, #17]

        if (OPTIGA_CRYPT_OID_DATA == public_key_source_type)
 80054b0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d104      	bne.n	80054c2 <optiga_crypt_verify+0x9a>
        {
            p_params->certificate_oid = *((uint16_t *)p_public_key);
 80054b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ba:	881a      	ldrh	r2, [r3, #0]
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	81da      	strh	r2, [r3, #14]
 80054c0:	e002      	b.n	80054c8 <optiga_crypt_verify+0xa0>
        }
        else
        {
            p_params->public_key = (public_key_from_host_t *)p_public_key;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054c6:	609a      	str	r2, [r3, #8]
        }

        return_value = optiga_cmd_verify_sign(me->my_cmd,
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	7af9      	ldrb	r1, [r7, #11]
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7fd f9a5 	bl	8002820 <optiga_cmd_verify_sign>
 80054d6:	4603      	mov	r3, r0
 80054d8:	82fb      	strh	r3, [r7, #22]
                                             (uint8_t)cmd_param,
                                             (optiga_verify_sign_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 80054da:	8afb      	ldrh	r3, [r7, #22]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <optiga_crypt_verify+0xbe>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f7ff fed8 	bl	800529c <optiga_crypt_reset_protection_level>

    return (return_value);
 80054ec:	8afb      	ldrh	r3, [r7, #22]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <optiga_crypt_rsa_enc_dec>:
                                                       uint8_t public_key_source_type,
                                                       const void * p_key,
                                                       uint8_t * p_processed_message,
                                                       uint16_t * p_processed_message_length,
                                                       bool_t is_enc)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b086      	sub	sp, #24
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	607a      	str	r2, [r7, #4]
 8005500:	461a      	mov	r2, r3
 8005502:	460b      	mov	r3, r1
 8005504:	72fb      	strb	r3, [r7, #11]
 8005506:	4613      	mov	r3, r2
 8005508:	813b      	strh	r3, [r7, #8]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 800550a:	f240 4302 	movw	r3, #1026	@ 0x402
 800550e:	82fb      	strh	r3, [r7, #22]
    optiga_encrypt_asym_params_t * p_params;

    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005514:	2b01      	cmp	r3, #1
 8005516:	d103      	bne.n	8005520 <optiga_crypt_rsa_enc_dec+0x2a>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8005518:	f240 4305 	movw	r3, #1029	@ 0x405
 800551c:	82fb      	strh	r3, [r7, #22]
            break;
 800551e:	e046      	b.n	80055ae <optiga_crypt_rsa_enc_dec+0xb8>
        }
        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2201      	movs	r2, #1
 8005524:	851a      	strh	r2, [r3, #40]	@ 0x28

        p_params = (optiga_encrypt_asym_params_t *)&(me->params.optiga_encrypt_asym_params);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	221c      	movs	r2, #28
 800552e:	2100      	movs	r1, #0
 8005530:	4618      	mov	r0, r3
 8005532:	f000 fd7c 	bl	800602e <pal_os_memset>

        p_params->message = p_message;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	60da      	str	r2, [r3, #12]
        p_params->message_length = message_length;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	893a      	ldrh	r2, [r7, #8]
 8005540:	821a      	strh	r2, [r3, #16]
        p_params->processed_message = p_processed_message;
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005546:	609a      	str	r2, [r3, #8]
        p_params->processed_message_length = p_processed_message_length;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800554c:	601a      	str	r2, [r3, #0]

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);


        if (is_enc)
 800554e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8005552:	2b00      	cmp	r3, #0
 8005554:	d010      	beq.n	8005578 <optiga_crypt_rsa_enc_dec+0x82>
        {
            p_params->key = p_key;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800555a:	605a      	str	r2, [r3, #4]
            p_params->public_key_source_type = public_key_source_type;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005562:	751a      	strb	r2, [r3, #20]
#ifdef OPTIGA_CRYPT_RSA_ENCRYPT_ENABLED
            return_value = optiga_cmd_encrypt_asym(me->my_cmd, (uint8_t)encryption_scheme,
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	7af9      	ldrb	r1, [r7, #11]
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	4618      	mov	r0, r3
 800556e:	f7fd fc1d 	bl	8002dac <optiga_cmd_encrypt_asym>
 8005572:	4603      	mov	r3, r0
 8005574:	82fb      	strh	r3, [r7, #22]
 8005576:	e014      	b.n	80055a2 <optiga_crypt_rsa_enc_dec+0xac>
                                                   (optiga_encrypt_asym_params_t *)p_params);
#endif
        }
        else
        {
            p_params->private_key_id = (optiga_key_id_t)*(optiga_key_id_t *)p_key;
 8005578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800557a:	881a      	ldrh	r2, [r3, #0]
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	825a      	strh	r2, [r3, #18]
            p_params->key = &p_params->private_key_id;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f103 0212 	add.w	r2, r3, #18
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	605a      	str	r2, [r3, #4]
            p_params->public_key_source_type = 0;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2200      	movs	r2, #0
 800558e:	751a      	strb	r2, [r3, #20]
#ifdef OPTIGA_CRYPT_RSA_DECRYPT_ENABLED
            return_value = optiga_cmd_decrypt_asym(me->my_cmd, (uint8_t)encryption_scheme,
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	7af9      	ldrb	r1, [r7, #11]
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	4618      	mov	r0, r3
 800559a:	f7fd fd27 	bl	8002fec <optiga_cmd_decrypt_asym>
 800559e:	4603      	mov	r3, r0
 80055a0:	82fb      	strh	r3, [r7, #22]
                                                   (optiga_encrypt_asym_params_t *)p_params);
#endif
        }
        if (OPTIGA_LIB_SUCCESS != return_value)
 80055a2:	8afb      	ldrh	r3, [r7, #22]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <optiga_crypt_rsa_enc_dec+0xb8>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f7ff fe74 	bl	800529c <optiga_crypt_reset_protection_level>

    return (return_value);
 80055b4:	8afb      	ldrh	r3, [r7, #22]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3718      	adds	r7, #24
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <optiga_crypt_get_random>:
                                                      uint8_t * p_random_data,
                                                      uint16_t random_data_length,
                                                      const uint8_t * p_optional_data,
                                                      uint16_t optional_data_length,
                                                      bool_t store_in_session)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b086      	sub	sp, #24
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	461a      	mov	r2, r3
 80055ca:	460b      	mov	r3, r1
 80055cc:	72fb      	strb	r3, [r7, #11]
 80055ce:	4613      	mov	r3, r2
 80055d0:	813b      	strh	r3, [r7, #8]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 80055d2:	f240 4302 	movw	r3, #1026	@ 0x402
 80055d6:	82fb      	strh	r3, [r7, #22]
    optiga_get_random_params_t * p_params;
    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d103      	bne.n	80055e8 <optiga_crypt_get_random+0x2a>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 80055e0:	f240 4305 	movw	r3, #1029	@ 0x405
 80055e4:	82fb      	strh	r3, [r7, #22]
            break;
 80055e6:	e029      	b.n	800563c <optiga_crypt_get_random+0x7e>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        p_params = (optiga_get_random_params_t *)&(me->params.optiga_get_random_params);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	221c      	movs	r2, #28
 80055f6:	2100      	movs	r1, #0
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 fd18 	bl	800602e <pal_os_memset>

        p_params->optional_data = p_optional_data;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	6a3a      	ldr	r2, [r7, #32]
 8005602:	605a      	str	r2, [r3, #4]
        p_params->optional_data_length = optional_data_length;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005608:	815a      	strh	r2, [r3, #10]
        p_params->random_data = p_random_data;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	601a      	str	r2, [r3, #0]
        p_params->random_data_length = random_data_length;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	893a      	ldrh	r2, [r7, #8]
 8005614:	811a      	strh	r2, [r3, #8]
        p_params->store_in_session = store_in_session;
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800561c:	731a      	strb	r2, [r3, #12]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);

        return_value = optiga_cmd_get_random(me->my_cmd,
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	7af9      	ldrb	r1, [r7, #11]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4618      	mov	r0, r3
 8005628:	f7fc fefc 	bl	8002424 <optiga_cmd_get_random>
 800562c:	4603      	mov	r3, r0
 800562e:	82fb      	strh	r3, [r7, #22]
                                             cmd_param,
                                             (optiga_get_random_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 8005630:	8afb      	ldrh	r3, [r7, #22]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <optiga_crypt_get_random+0x7e>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f7ff fe2d 	bl	800529c <optiga_crypt_reset_protection_level>

    return (return_value);
 8005642:	8afb      	ldrh	r3, [r7, #22]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3718      	adds	r7, #24
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <optiga_crypt_hash_generic>:
                                                        optiga_hash_context_t * hash_ctx,
                                                        uint32_t context_length,                                                        
                                                        const void * data_to_hash,
                                                        bool_t export_intermediate_ctx,
                                                        uint8_t * hash_output)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	4608      	mov	r0, r1
 8005656:	4611      	mov	r1, r2
 8005658:	461a      	mov	r2, r3
 800565a:	4603      	mov	r3, r0
 800565c:	70fb      	strb	r3, [r7, #3]
 800565e:	460b      	mov	r3, r1
 8005660:	70bb      	strb	r3, [r7, #2]
 8005662:	4613      	mov	r3, r2
 8005664:	707b      	strb	r3, [r7, #1]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 8005666:	f240 4302 	movw	r3, #1026	@ 0x402
 800566a:	81fb      	strh	r3, [r7, #14]
    optiga_calc_hash_params_t * p_params;
    do
    {
        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005670:	2b01      	cmp	r3, #1
 8005672:	d103      	bne.n	800567c <optiga_crypt_hash_generic+0x30>
        {
            return_value = OPTIGA_CRYPT_ERROR_INSTANCE_IN_USE;
 8005674:	f240 4305 	movw	r3, #1029	@ 0x405
 8005678:	81fb      	strh	r3, [r7, #14]
            break;
 800567a:	e046      	b.n	800570a <optiga_crypt_hash_generic+0xbe>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	851a      	strh	r2, [r3, #40]	@ 0x28
        p_params = (optiga_calc_hash_params_t *)&(me->params.optiga_calc_hash_params);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	60bb      	str	r3, [r7, #8]
        pal_os_memset(&me->params,0x00,sizeof(optiga_crypt_params_t));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	221c      	movs	r2, #28
 800568a:	2100      	movs	r1, #0
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fcce 	bl	800602e <pal_os_memset>

        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);
        p_params->hash_sequence = hash_sequence;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	78ba      	ldrb	r2, [r7, #2]
 8005696:	761a      	strb	r2, [r3, #24]
        p_params->p_hash_context = hash_ctx;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	609a      	str	r2, [r3, #8]
        p_params->apparent_context_size = context_length;
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	69fa      	ldr	r2, [r7, #28]
 80056a2:	615a      	str	r2, [r3, #20]
        p_params->p_hash_data = NULL;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2200      	movs	r2, #0
 80056a8:	605a      	str	r2, [r3, #4]
        p_params->p_hash_oid = NULL;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2200      	movs	r2, #0
 80056ae:	601a      	str	r2, [r3, #0]
        p_params->p_out_digest = hash_output;
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056b4:	60da      	str	r2, [r3, #12]
        p_params->export_hash_ctx = export_intermediate_ctx;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80056bc:	769a      	strb	r2, [r3, #26]
        
        if ((OPTIGA_CRYPT_HASH_CONTINUE == hash_sequence) || (OPTIGA_CRYPT_HASH_START_FINAL == hash_sequence))
 80056be:	78bb      	ldrb	r3, [r7, #2]
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d002      	beq.n	80056ca <optiga_crypt_hash_generic+0x7e>
 80056c4:	78bb      	ldrb	r3, [r7, #2]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d110      	bne.n	80056ec <optiga_crypt_hash_generic+0xa0>
        {
            if (source_of_data_to_hash)
 80056ca:	787b      	ldrb	r3, [r7, #1]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <optiga_crypt_hash_generic+0x8c>
            {
                p_params->p_hash_data = (hash_data_from_host_t *)data_to_hash;
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	6a3a      	ldr	r2, [r7, #32]
 80056d4:	605a      	str	r2, [r3, #4]
 80056d6:	e009      	b.n	80056ec <optiga_crypt_hash_generic+0xa0>
            }
            else
            {
                p_params->hash_sequence |= OPTIGA_CRYPT_HASH_FOR_OID;
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	7e1b      	ldrb	r3, [r3, #24]
 80056dc:	f043 0310 	orr.w	r3, r3, #16
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	761a      	strb	r2, [r3, #24]
                p_params->p_hash_oid = (hash_data_in_optiga_t *)data_to_hash;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	6a3a      	ldr	r2, [r7, #32]
 80056ea:	601a      	str	r2, [r3, #0]
            }
        }

        return_value = optiga_cmd_calc_hash(me->my_cmd,
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	78f9      	ldrb	r1, [r7, #3]
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fd fe87 	bl	8003408 <optiga_cmd_calc_hash>
 80056fa:	4603      	mov	r3, r0
 80056fc:	81fb      	strh	r3, [r7, #14]
                                            hash_algorithm,
                                            (optiga_calc_hash_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 80056fe:	89fb      	ldrh	r3, [r7, #14]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <optiga_crypt_hash_generic+0xbe>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
    } while (FALSE);
    optiga_crypt_reset_protection_level(me);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff fdc6 	bl	800529c <optiga_crypt_reset_protection_level>

    return (return_value);
 8005710:	89fb      	ldrh	r3, [r7, #14]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <optiga_crypt_create>:
#endif

optiga_crypt_t * optiga_crypt_create(uint8_t optiga_instance_id,
                                     callback_handler_t handler,
                                     void * caller_context)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
 8005722:	4603      	mov	r3, r0
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	73fb      	strb	r3, [r7, #15]
    optiga_crypt_t * me = NULL;
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d023      	beq.n	800577c <optiga_crypt_create+0x60>
        {
            break;
        }
#endif
        me = (optiga_crypt_t *)pal_os_calloc(1, sizeof(optiga_crypt_t));
 8005734:	212c      	movs	r1, #44	@ 0x2c
 8005736:	2001      	movs	r0, #1
 8005738:	f000 fc4e 	bl	8005fd8 <pal_os_calloc>
 800573c:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d01d      	beq.n	8005780 <optiga_crypt_create+0x64>
        {
            break;
        }

        me->handler = handler;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	625a      	str	r2, [r3, #36]	@ 0x24
        me->caller_context = caller_context;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	621a      	str	r2, [r3, #32]
        me->instance_state = OPTIGA_LIB_SUCCESS;
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2200      	movs	r2, #0
 8005754:	851a      	strh	r2, [r3, #40]	@ 0x28
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id,
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	490c      	ldr	r1, [pc, #48]	@ (800578c <optiga_crypt_create+0x70>)
 800575c:	4618      	mov	r0, r3
 800575e:	f7fc fae9 	bl	8001d34 <optiga_cmd_create>
 8005762:	4602      	mov	r2, r0
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	61da      	str	r2, [r3, #28]
                                       optiga_crypt_generic_event_handler,
                                       me);
        if (NULL == me->my_cmd)
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d108      	bne.n	8005782 <optiga_crypt_create+0x66>
        {
            pal_os_free(me);
 8005770:	6978      	ldr	r0, [r7, #20]
 8005772:	f000 fc42 	bl	8005ffa <pal_os_free>
            me = NULL;
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	e002      	b.n	8005782 <optiga_crypt_create+0x66>
            break;
 800577c:	bf00      	nop
 800577e:	e000      	b.n	8005782 <optiga_crypt_create+0x66>
            break;
 8005780:	bf00      	nop
        }

    } while (FALSE);

    return (me);
 8005782:	697b      	ldr	r3, [r7, #20]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3718      	adds	r7, #24
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	08005271 	.word	0x08005271

08005790 <optiga_crypt_random>:
#ifdef OPTIGA_CRYPT_RANDOM_ENABLED
optiga_lib_status_t optiga_crypt_random(optiga_crypt_t * me,
                                        optiga_rng_type_t rng_type,
                                        uint8_t * random_data,
                                        uint16_t random_data_length)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b08a      	sub	sp, #40	@ 0x28
 8005794:	af04      	add	r7, sp, #16
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	607a      	str	r2, [r7, #4]
 800579a:	461a      	mov	r2, r3
 800579c:	460b      	mov	r3, r1
 800579e:	72fb      	strb	r3, [r7, #11]
 80057a0:	4613      	mov	r3, r2
 80057a2:	813b      	strh	r3, [r7, #8]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 80057a4:	f240 4302 	movw	r3, #1026	@ 0x402
 80057a8:	82fb      	strh	r3, [r7, #22]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == random_data))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d006      	beq.n	80057be <optiga_crypt_random+0x2e>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d002      	beq.n	80057be <optiga_crypt_random+0x2e>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d103      	bne.n	80057c6 <optiga_crypt_random+0x36>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 80057be:	f240 4303 	movw	r3, #1027	@ 0x403
 80057c2:	82fb      	strh	r3, [r7, #22]
            break;
 80057c4:	e00d      	b.n	80057e2 <optiga_crypt_random+0x52>
        }
#endif
        return_value = optiga_crypt_get_random(me,
 80057c6:	893b      	ldrh	r3, [r7, #8]
 80057c8:	7af9      	ldrb	r1, [r7, #11]
 80057ca:	2200      	movs	r2, #0
 80057cc:	9202      	str	r2, [sp, #8]
 80057ce:	2200      	movs	r2, #0
 80057d0:	9201      	str	r2, [sp, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	9200      	str	r2, [sp, #0]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f7ff fef0 	bl	80055be <optiga_crypt_get_random>
 80057de:	4603      	mov	r3, r0
 80057e0:	82fb      	strh	r3, [r7, #22]
                                               NULL,
                                               0x00,
                                               FALSE);
    } while (FALSE);

    return (return_value);
 80057e2:	8afb      	ldrh	r3, [r7, #22]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <optiga_crypt_hash>:
optiga_lib_status_t optiga_crypt_hash(optiga_crypt_t * me,
                                      optiga_hash_type_t hash_algorithm,
                                      uint8_t source_of_data_to_hash,
                                      const void * data_to_hash, 
                                      uint8_t * hash_output)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08c      	sub	sp, #48	@ 0x30
 80057f0:	af06      	add	r7, sp, #24
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	607b      	str	r3, [r7, #4]
 80057f6:	460b      	mov	r3, r1
 80057f8:	72fb      	strb	r3, [r7, #11]
 80057fa:	4613      	mov	r3, r2
 80057fc:	72bb      	strb	r3, [r7, #10]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR;
 80057fe:	f240 4302 	movw	r3, #1026	@ 0x402
 8005802:	82fb      	strh	r3, [r7, #22]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == data_to_hash) || (NULL == hash_output))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d009      	beq.n	800581e <optiga_crypt_hash+0x32>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d005      	beq.n	800581e <optiga_crypt_hash+0x32>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <optiga_crypt_hash+0x32>
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d103      	bne.n	8005826 <optiga_crypt_hash+0x3a>
        {
            return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 800581e:	f240 4303 	movw	r3, #1027	@ 0x403
 8005822:	82fb      	strh	r3, [r7, #22]
            break;
 8005824:	e012      	b.n	800584c <optiga_crypt_hash+0x60>
        }
#endif
        return_value = optiga_crypt_hash_generic(me,
 8005826:	7aba      	ldrb	r2, [r7, #10]
 8005828:	7af9      	ldrb	r1, [r7, #11]
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	9304      	str	r3, [sp, #16]
 800582e:	2300      	movs	r3, #0
 8005830:	9303      	str	r3, [sp, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	9302      	str	r3, [sp, #8]
 8005836:	2300      	movs	r3, #0
 8005838:	9301      	str	r3, [sp, #4]
 800583a:	2300      	movs	r3, #0
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	4613      	mov	r3, r2
 8005840:	2201      	movs	r2, #1
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f7ff ff02 	bl	800564c <optiga_crypt_hash_generic>
 8005848:	4603      	mov	r3, r0
 800584a:	82fb      	strh	r3, [r7, #22]
                                                 data_to_hash,
                                                 FALSE,
                                                 hash_output);
    } while (FALSE);

    return (return_value);
 800584c:	8afb      	ldrh	r3, [r7, #22]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3718      	adds	r7, #24
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <optiga_crypt_rsa_generate_keypair>:
                                                      uint8_t key_usage,
                                                      bool_t export_private_key,
                                                      void * private_key,
                                                      uint8_t * public_key,
                                                      uint16_t * public_key_length)
{
 8005856:	b580      	push	{r7, lr}
 8005858:	b086      	sub	sp, #24
 800585a:	af04      	add	r7, sp, #16
 800585c:	6078      	str	r0, [r7, #4]
 800585e:	4608      	mov	r0, r1
 8005860:	4611      	mov	r1, r2
 8005862:	461a      	mov	r2, r3
 8005864:	4603      	mov	r3, r0
 8005866:	70fb      	strb	r3, [r7, #3]
 8005868:	460b      	mov	r3, r1
 800586a:	70bb      	strb	r3, [r7, #2]
 800586c:	4613      	mov	r3, r2
 800586e:	707b      	strb	r3, [r7, #1]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    return (optiga_crypt_generate_keypair(me,
 8005870:	7878      	ldrb	r0, [r7, #1]
 8005872:	78ba      	ldrb	r2, [r7, #2]
 8005874:	78f9      	ldrb	r1, [r7, #3]
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	9302      	str	r3, [sp, #8]
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	9301      	str	r3, [sp, #4]
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	4603      	mov	r3, r0
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff fd13 	bl	80052b0 <optiga_crypt_generate_keypair>
 800588a:	4603      	mov	r3, r0
                                         key_usage,
                                         export_private_key,
                                         private_key,
                                         public_key,
                                         public_key_length));
}
 800588c:	4618      	mov	r0, r3
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <optiga_crypt_rsa_sign>:
                                          uint8_t digest_length,
                                          optiga_key_id_t private_key,
                                          uint8_t * signature,
                                          uint16_t * signature_length,
                                          uint16_t salt_length)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af04      	add	r7, sp, #16
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	607a      	str	r2, [r7, #4]
 800589e:	461a      	mov	r2, r3
 80058a0:	460b      	mov	r3, r1
 80058a2:	72fb      	strb	r3, [r7, #11]
 80058a4:	4613      	mov	r3, r2
 80058a6:	72bb      	strb	r3, [r7, #10]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    return (optiga_crypt_sign(me,
 80058a8:	7aba      	ldrb	r2, [r7, #10]
 80058aa:	7af9      	ldrb	r1, [r7, #11]
 80058ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058ae:	9303      	str	r3, [sp, #12]
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	9302      	str	r3, [sp, #8]
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	9301      	str	r3, [sp, #4]
 80058b8:	8b3b      	ldrh	r3, [r7, #24]
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	4613      	mov	r3, r2
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f7ff fd57 	bl	8005374 <optiga_crypt_sign>
 80058c6:	4603      	mov	r3, r0
                             digest_length,
                             private_key,
                             signature,
                             signature_length,
                             salt_length));
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <optiga_crypt_rsa_verify>:
                                            const uint8_t * signature,
                                            uint16_t signature_length,
                                            uint8_t public_key_source_type,
                                            const void * public_key,
                                            uint16_t salt_length)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08a      	sub	sp, #40	@ 0x28
 80058d4:	af06      	add	r7, sp, #24
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	607a      	str	r2, [r7, #4]
 80058da:	461a      	mov	r2, r3
 80058dc:	460b      	mov	r3, r1
 80058de:	72fb      	strb	r3, [r7, #11]
 80058e0:	4613      	mov	r3, r2
 80058e2:	72bb      	strb	r3, [r7, #10]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    return (optiga_crypt_verify(me,
 80058e4:	7aba      	ldrb	r2, [r7, #10]
 80058e6:	7af9      	ldrb	r1, [r7, #11]
 80058e8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80058ea:	9304      	str	r3, [sp, #16]
 80058ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ee:	9303      	str	r3, [sp, #12]
 80058f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058f4:	9302      	str	r3, [sp, #8]
 80058f6:	8bbb      	ldrh	r3, [r7, #28]
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	4613      	mov	r3, r2
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f7ff fd90 	bl	8005428 <optiga_crypt_verify>
 8005908:	4603      	mov	r3, r0
                                signature,
                                signature_length,
                                public_key_source_type,
                                public_key,
                                salt_length));
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <optiga_crypt_rsa_encrypt_message>:
                                                     uint16_t label_length,
                                                     uint8_t public_key_source_type,
                                                     const void * public_key,
                                                     uint8_t * encrypted_message,
                                                     uint16_t * encrypted_message_length)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b08e      	sub	sp, #56	@ 0x38
 8005916:	af08      	add	r7, sp, #32
 8005918:	60f8      	str	r0, [r7, #12]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	461a      	mov	r2, r3
 800591e:	460b      	mov	r3, r1
 8005920:	72fb      	strb	r3, [r7, #11]
 8005922:	4613      	mov	r3, r2
 8005924:	813b      	strh	r3, [r7, #8]

    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 8005926:	f240 4303 	movw	r3, #1027	@ 0x403
 800592a:	82fb      	strh	r3, [r7, #22]
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == message)||
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d027      	beq.n	8005982 <optiga_crypt_rsa_encrypt_message+0x70>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d023      	beq.n	8005982 <optiga_crypt_rsa_encrypt_message+0x70>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d020      	beq.n	8005982 <optiga_crypt_rsa_encrypt_message+0x70>
 8005940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005942:	2b00      	cmp	r3, #0
 8005944:	d01d      	beq.n	8005982 <optiga_crypt_rsa_encrypt_message+0x70>
            (NULL == public_key) || (NULL == encrypted_message) || (NULL == encrypted_message_length))
 8005946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005948:	2b00      	cmp	r3, #0
 800594a:	d01a      	beq.n	8005982 <optiga_crypt_rsa_encrypt_message+0x70>
 800594c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800594e:	2b00      	cmp	r3, #0
 8005950:	d017      	beq.n	8005982 <optiga_crypt_rsa_encrypt_message+0x70>
        {
            break;
        }
#endif
        return_value =  optiga_crypt_rsa_enc_dec(me,
 8005952:	893a      	ldrh	r2, [r7, #8]
 8005954:	7af9      	ldrb	r1, [r7, #11]
 8005956:	2301      	movs	r3, #1
 8005958:	9306      	str	r3, [sp, #24]
 800595a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800595c:	9305      	str	r3, [sp, #20]
 800595e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005960:	9304      	str	r3, [sp, #16]
 8005962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005964:	9303      	str	r3, [sp, #12]
 8005966:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800596a:	9302      	str	r3, [sp, #8]
 800596c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800596e:	9301      	str	r3, [sp, #4]
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	4613      	mov	r3, r2
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f7ff fdbc 	bl	80054f6 <optiga_crypt_rsa_enc_dec>
 800597e:	4603      	mov	r3, r0
 8005980:	82fb      	strh	r3, [r7, #22]
                                                 public_key,
                                                 encrypted_message,
                                                 encrypted_message_length,
                                                 TRUE);
    } while (FALSE);
    return (return_value);
 8005982:	8afb      	ldrh	r3, [r7, #22]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <optiga_crypt_rsa_decrypt_and_export>:
                                                        const uint8_t * label,
                                                        uint16_t label_length,
                                                        optiga_key_id_t private_key,
                                                        uint8_t * message,
                                                        uint16_t * message_length)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08e      	sub	sp, #56	@ 0x38
 8005990:	af08      	add	r7, sp, #32
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	607a      	str	r2, [r7, #4]
 8005996:	461a      	mov	r2, r3
 8005998:	460b      	mov	r3, r1
 800599a:	72fb      	strb	r3, [r7, #11]
 800599c:	4613      	mov	r3, r2
 800599e:	813b      	strh	r3, [r7, #8]
    optiga_lib_status_t return_value = OPTIGA_CRYPT_ERROR_INVALID_INPUT;
 80059a0:	f240 4303 	movw	r3, #1027	@ 0x403
 80059a4:	82fb      	strh	r3, [r7, #22]
    optiga_key_id_t private_key_id;
    OPTIGA_CRYPT_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == message) || (NULL == message_length)||
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d026      	beq.n	80059fa <optiga_crypt_rsa_decrypt_and_export+0x6e>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d022      	beq.n	80059fa <optiga_crypt_rsa_decrypt_and_export+0x6e>
 80059b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d01f      	beq.n	80059fa <optiga_crypt_rsa_decrypt_and_export+0x6e>
 80059ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01c      	beq.n	80059fa <optiga_crypt_rsa_decrypt_and_export+0x6e>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d019      	beq.n	80059fa <optiga_crypt_rsa_decrypt_and_export+0x6e>
        }
#endif
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protection_level |= OPTIGA_COMMS_RESPONSE_PROTECTION;
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION
        private_key_id = private_key;
 80059c6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80059c8:	82bb      	strh	r3, [r7, #20]
        return_value = optiga_crypt_rsa_enc_dec(me,
 80059ca:	893a      	ldrh	r2, [r7, #8]
 80059cc:	7af9      	ldrb	r1, [r7, #11]
 80059ce:	2300      	movs	r3, #0
 80059d0:	9306      	str	r3, [sp, #24]
 80059d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d4:	9305      	str	r3, [sp, #20]
 80059d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d8:	9304      	str	r3, [sp, #16]
 80059da:	f107 0314 	add.w	r3, r7, #20
 80059de:	9303      	str	r3, [sp, #12]
 80059e0:	2300      	movs	r3, #0
 80059e2:	9302      	str	r3, [sp, #8]
 80059e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80059e6:	9301      	str	r3, [sp, #4]
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	4613      	mov	r3, r2
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f7ff fd80 	bl	80054f6 <optiga_crypt_rsa_enc_dec>
 80059f6:	4603      	mov	r3, r0
 80059f8:	82fb      	strh	r3, [r7, #22]
                                                message,
                                                message_length,
                                                FALSE);
    } while (FALSE);

    return (return_value);
 80059fa:	8afb      	ldrh	r3, [r7, #22]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <pal_init>:

#include "optiga/pal/pal.h"


pal_status_t pal_init(void)
{
 8005a04:	b480      	push	{r7}
 8005a06:	af00      	add	r7, sp, #0
    return PAL_STATUS_SUCCESS;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <pal_gpio_set_high>:
    }
    return PAL_STATUS_SUCCESS;
}

void pal_gpio_set_high(const pal_gpio_t * p_gpio_context)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
    if ((p_gpio_context != NULL) && (p_gpio_context->p_gpio_hw != NULL))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00d      	beq.n	8005a3e <pal_gpio_set_high+0x2a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d009      	beq.n	8005a3e <pal_gpio_set_high+0x2a>
    {
        // !!!OPTIGA_LIB_PORTING_REQUIRED
        // Your function to set the pin high
    	HAL_GPIO_WritePin(p_gpio_context->p_gpio_hw->port, p_gpio_context->p_gpio_hw->pin, GPIO_PIN_SET);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6818      	ldr	r0, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	889b      	ldrh	r3, [r3, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	4619      	mov	r1, r3
 8005a3a:	f000 ff2f 	bl	800689c <HAL_GPIO_WritePin>
    }
}
 8005a3e:	bf00      	nop
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <pal_gpio_set_low>:

void pal_gpio_set_low(const pal_gpio_t * p_gpio_context)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b082      	sub	sp, #8
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
    if ((p_gpio_context != NULL) && (p_gpio_context->p_gpio_hw != NULL))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00d      	beq.n	8005a70 <pal_gpio_set_low+0x2a>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d009      	beq.n	8005a70 <pal_gpio_set_low+0x2a>
    {
        // !!!OPTIGA_LIB_PORTING_REQUIRED
        // Your function to set the pin low
    	HAL_GPIO_WritePin(p_gpio_context->p_gpio_hw->port, p_gpio_context->p_gpio_hw->pin, GPIO_PIN_RESET);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6818      	ldr	r0, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	889b      	ldrh	r3, [r3, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	f000 ff16 	bl	800689c <HAL_GPIO_WritePin>
    }
}
 8005a70:	bf00      	nop
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <pal_i2c_acquire>:

static volatile uint32_t g_entry_count = 0;
static pal_i2c_t * gp_pal_i2c_current_ctx;

static pal_status_t pal_i2c_acquire(const void * p_i2c_context)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
    // To avoid compiler errors/warnings. This context might be used by a target 
    // system to implement a proper mutex handling
    (void)p_i2c_context;
    
    if (0 == g_entry_count)
 8005a80:	4b0a      	ldr	r3, [pc, #40]	@ (8005aac <pal_i2c_acquire+0x34>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10a      	bne.n	8005a9e <pal_i2c_acquire+0x26>
    {
        g_entry_count++;
 8005a88:	4b08      	ldr	r3, [pc, #32]	@ (8005aac <pal_i2c_acquire+0x34>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	4a07      	ldr	r2, [pc, #28]	@ (8005aac <pal_i2c_acquire+0x34>)
 8005a90:	6013      	str	r3, [r2, #0]
        if (1 == g_entry_count)
 8005a92:	4b06      	ldr	r3, [pc, #24]	@ (8005aac <pal_i2c_acquire+0x34>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <pal_i2c_acquire+0x26>
        {
            return PAL_STATUS_SUCCESS;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	e000      	b.n	8005aa0 <pal_i2c_acquire+0x28>
        }
    }
    return PAL_STATUS_FAILURE;
 8005a9e:	2301      	movs	r3, #1
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	20002144 	.word	0x20002144

08005ab0 <pal_i2c_release>:

static void pal_i2c_release(const void * p_i2c_context)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
    // To avoid compiler errors/warnings. This context might be used by a target 
    // system to implement a proper mutex handling
    (void)p_i2c_context;
    
    g_entry_count = 0;
 8005ab8:	4b04      	ldr	r3, [pc, #16]	@ (8005acc <pal_i2c_release+0x1c>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]
}
 8005abe:	bf00      	nop
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	20002144 	.word	0x20002144

08005ad0 <invoke_upper_layer_callback>:

void invoke_upper_layer_callback (const pal_i2c_t * p_pal_i2c_ctx, optiga_lib_status_t event)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	807b      	strh	r3, [r7, #2]
    upper_layer_callback_t upper_layer_handler;

    upper_layer_handler = (upper_layer_callback_t)p_pal_i2c_ctx->upper_layer_event_handler;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	60fb      	str	r3, [r7, #12]

    upper_layer_handler(p_pal_i2c_ctx->p_upper_layer_ctx, event);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	8879      	ldrh	r1, [r7, #2]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4610      	mov	r0, r2
 8005aec:	4798      	blx	r3

    //Release I2C Bus
    pal_i2c_release(p_pal_i2c_ctx->p_upper_layer_ctx);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff ffdc 	bl	8005ab0 <pal_i2c_release>
}
 8005af8:	bf00      	nop
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <pal_i2c_init>:
    i2c_master_error_detected_callback();
}


pal_status_t pal_i2c_init(const pal_i2c_t * p_i2c_context)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <pal_i2c_deinit>:

pal_status_t pal_i2c_deinit(const pal_i2c_t * p_i2c_context)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
    (void)p_i2c_context;
    return PAL_STATUS_SUCCESS;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <pal_i2c_write>:

pal_status_t pal_i2c_write(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	4613      	mov	r3, r2
 8005b38:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	82fb      	strh	r3, [r7, #22]

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f7ff ff9a 	bl	8005a78 <pal_i2c_acquire>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d122      	bne.n	8005b90 <pal_i2c_write+0x64>
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
 8005b4a:	4a19      	ldr	r2, [pc, #100]	@ (8005bb0 <pal_i2c_write+0x84>)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6013      	str	r3, [r2, #0]

        //Invoke the low level i2c master driver API to write to the bus
        // !!!OPTIGA_LIB_PORTING_REQUIRED
        if (HAL_OK != HAL_I2C_Master_Transmit(&hi2c1, 0x30 << 1, p_data, length, 200) )
 8005b50:	88fb      	ldrh	r3, [r7, #6]
 8005b52:	22c8      	movs	r2, #200	@ 0xc8
 8005b54:	9200      	str	r2, [sp, #0]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	2160      	movs	r1, #96	@ 0x60
 8005b5a:	4816      	ldr	r0, [pc, #88]	@ (8005bb4 <pal_i2c_write+0x88>)
 8005b5c:	f001 f816 	bl	8006b8c <HAL_I2C_Master_Transmit>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00b      	beq.n	8005b7e <pal_i2c_write+0x52>
        {
            //If I2C Master fails to invoke the write operation, invoke upper layer event handler with error.

            ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	461a      	mov	r2, r3
                                                       (p_i2c_context->p_upper_layer_ctx , PAL_I2C_EVENT_ERROR);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	685b      	ldr	r3, [r3, #4]
            ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 8005b70:	2101      	movs	r1, #1
 8005b72:	4618      	mov	r0, r3
 8005b74:	4790      	blx	r2
            
            //Release I2C Bus
            pal_i2c_release((void * )p_i2c_context);
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f7ff ff9a 	bl	8005ab0 <pal_i2c_release>
 8005b7c:	e012      	b.n	8005ba4 <pal_i2c_write+0x78>
            * 2. If foo_i2c_write() is a blocking function which will return either ok or failure after transmitting data
            *    you can handle this case directly here and call 
            *    invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
            *    
            */
        	invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
 8005b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb0 <pal_i2c_write+0x84>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2100      	movs	r1, #0
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7ff ffa3 	bl	8005ad0 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	82fb      	strh	r3, [r7, #22]
 8005b8e:	e009      	b.n	8005ba4 <pal_i2c_write+0x78>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8005b90:	2302      	movs	r3, #2
 8005b92:	82fb      	strh	r3, [r7, #22]
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	461a      	mov	r2, r3
                                                        (p_i2c_context->p_upper_layer_ctx , PAL_I2C_EVENT_BUSY);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	685b      	ldr	r3, [r3, #4]
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 8005b9e:	2102      	movs	r1, #2
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	4790      	blx	r2
    }
    return status;
 8005ba4:	8afb      	ldrh	r3, [r7, #22]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20002148 	.word	0x20002148
 8005bb4:	200004d0 	.word	0x200004d0

08005bb8 <pal_i2c_read>:

pal_status_t pal_i2c_read(const pal_i2c_t * p_i2c_context, uint8_t * p_data, uint16_t length)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	80fb      	strh	r3, [r7, #6]
    pal_status_t status = PAL_STATUS_FAILURE;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	82fb      	strh	r3, [r7, #22]

    //Acquire the I2C bus before read/write
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f7ff ff54 	bl	8005a78 <pal_i2c_acquire>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d122      	bne.n	8005c1c <pal_i2c_read+0x64>
    {
        gp_pal_i2c_current_ctx = p_i2c_context;
 8005bd6:	4a19      	ldr	r2, [pc, #100]	@ (8005c3c <pal_i2c_read+0x84>)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6013      	str	r3, [r2, #0]

        //Invoke the low level i2c master driver API to read from the bus
        if (HAL_OK != HAL_I2C_Master_Receive(&hi2c1, 0x30 << 1, p_data, length, 200) )
 8005bdc:	88fb      	ldrh	r3, [r7, #6]
 8005bde:	22c8      	movs	r2, #200	@ 0xc8
 8005be0:	9200      	str	r2, [sp, #0]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	2160      	movs	r1, #96	@ 0x60
 8005be6:	4816      	ldr	r0, [pc, #88]	@ (8005c40 <pal_i2c_read+0x88>)
 8005be8:	f001 f8ce 	bl	8006d88 <HAL_I2C_Master_Receive>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00b      	beq.n	8005c0a <pal_i2c_read+0x52>
        {
            //If I2C Master fails to invoke the read operation, invoke upper layer event handler with error.
            ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	461a      	mov	r2, r3
                                                       (p_i2c_context->p_upper_layer_ctx , PAL_I2C_EVENT_ERROR);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	685b      	ldr	r3, [r3, #4]
            ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	4618      	mov	r0, r3
 8005c00:	4790      	blx	r2

            //Release I2C Bus
            pal_i2c_release((void * )p_i2c_context);
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f7ff ff54 	bl	8005ab0 <pal_i2c_release>
 8005c08:	e012      	b.n	8005c30 <pal_i2c_read+0x78>
            /**
            * Similar to the foo_i2c_write() case you can directly call 
            * invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
            * if you have blocking (non-interrupt) i2c calls
            */
        	invoke_upper_layer_callback(gp_pal_i2c_current_ctx, PAL_I2C_EVENT_SUCCESS);
 8005c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c3c <pal_i2c_read+0x84>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2100      	movs	r1, #0
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7ff ff5d 	bl	8005ad0 <invoke_upper_layer_callback>
            status = PAL_STATUS_SUCCESS;
 8005c16:	2300      	movs	r3, #0
 8005c18:	82fb      	strh	r3, [r7, #22]
 8005c1a:	e009      	b.n	8005c30 <pal_i2c_read+0x78>
        }
    }
    else
    {
        status = PAL_STATUS_I2C_BUSY;
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	82fb      	strh	r3, [r7, #22]
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	461a      	mov	r2, r3
                                                        (p_i2c_context->p_upper_layer_ctx , PAL_I2C_EVENT_BUSY);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	685b      	ldr	r3, [r3, #4]
        ((upper_layer_callback_t)(p_i2c_context->upper_layer_event_handler))
 8005c2a:	2102      	movs	r1, #2
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	4790      	blx	r2
    }
    return status;
 8005c30:	8afb      	ldrh	r3, [r7, #22]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20002148 	.word	0x20002148
 8005c40:	200004d0 	.word	0x200004d0

08005c44 <pal_i2c_set_bitrate>:

pal_status_t pal_i2c_set_bitrate(const pal_i2c_t * p_i2c_context, uint16_t bitrate)
{
 8005c44:	b590      	push	{r4, r7, lr}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	807b      	strh	r3, [r7, #2]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8005c50:	2301      	movs	r3, #1
 8005c52:	81fb      	strh	r3, [r7, #14]
    optiga_lib_status_t event = PAL_I2C_EVENT_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	81bb      	strh	r3, [r7, #12]

    //Acquire the I2C bus before setting the bitrate
    if (PAL_STATUS_SUCCESS == pal_i2c_acquire(p_i2c_context))
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff ff0d 	bl	8005a78 <pal_i2c_acquire>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10b      	bne.n	8005c7c <pal_i2c_set_bitrate+0x38>
    {
        // If the user provided bitrate is greater than the I2C master hardware maximum supported value,
        // set the I2C master to its maximum supported value.
        if (bitrate > PAL_I2C_MASTER_MAX_BITRATE)
 8005c64:	887b      	ldrh	r3, [r7, #2]
 8005c66:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8005c6a:	d902      	bls.n	8005c72 <pal_i2c_set_bitrate+0x2e>
        {
            bitrate = PAL_I2C_MASTER_MAX_BITRATE;
 8005c6c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8005c70:	807b      	strh	r3, [r7, #2]
        {
            return_status = PAL_STATUS_FAILURE;
        }
        else
        {
            return_status = PAL_STATUS_SUCCESS;
 8005c72:	2300      	movs	r3, #0
 8005c74:	81fb      	strh	r3, [r7, #14]
            event = PAL_I2C_EVENT_SUCCESS;
 8005c76:	2300      	movs	r3, #0
 8005c78:	81bb      	strh	r3, [r7, #12]
 8005c7a:	e003      	b.n	8005c84 <pal_i2c_set_bitrate+0x40>
        }
    }
    else
    {
        return_status = PAL_STATUS_I2C_BUSY;
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	81fb      	strh	r3, [r7, #14]
        event = PAL_I2C_EVENT_BUSY;
 8005c80:	2302      	movs	r3, #2
 8005c82:	81bb      	strh	r3, [r7, #12]
    }
    if (0 != p_i2c_context->upper_layer_event_handler)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d008      	beq.n	8005c9e <pal_i2c_set_bitrate+0x5a>
    {
        ((callback_handler_t)(p_i2c_context->upper_layer_event_handler))(p_i2c_context->p_upper_layer_ctx , event);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	461c      	mov	r4, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	89ba      	ldrh	r2, [r7, #12]
 8005c98:	4611      	mov	r1, r2
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	47a0      	blx	r4
    }
    //Release I2C Bus if its acquired 
    if (PAL_STATUS_I2C_BUSY != return_status)
 8005c9e:	89fb      	ldrh	r3, [r7, #14]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d002      	beq.n	8005caa <pal_i2c_set_bitrate+0x66>
    {
        pal_i2c_release((void * )p_i2c_context);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff ff03 	bl	8005ab0 <pal_i2c_release>
    }
    return return_status;
 8005caa:	89fb      	ldrh	r3, [r7, #14]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd90      	pop	{r4, r7, pc}

08005cb4 <pal_os_datastore_write>:


pal_status_t pal_os_datastore_write(uint16_t datastore_id,
                                    const uint8_t * p_buffer,
                                    uint16_t length)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	4603      	mov	r3, r0
 8005cbc:	6039      	str	r1, [r7, #0]
 8005cbe:	80fb      	strh	r3, [r7, #6]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	80bb      	strh	r3, [r7, #4]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	81fb      	strh	r3, [r7, #14]
    uint8_t offset = 0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	737b      	strb	r3, [r7, #13]

    switch(datastore_id)
 8005ccc:	88fb      	ldrh	r3, [r7, #6]
 8005cce:	2b33      	cmp	r3, #51	@ 0x33
 8005cd0:	d043      	beq.n	8005d5a <pal_os_datastore_write+0xa6>
 8005cd2:	2b33      	cmp	r3, #51	@ 0x33
 8005cd4:	dc5e      	bgt.n	8005d94 <pal_os_datastore_write+0xe0>
 8005cd6:	2b11      	cmp	r3, #17
 8005cd8:	d002      	beq.n	8005ce0 <pal_os_datastore_write+0x2c>
 8005cda:	2b22      	cmp	r3, #34	@ 0x22
 8005cdc:	d020      	beq.n	8005d20 <pal_os_datastore_write+0x6c>
            return_status = PAL_STATUS_SUCCESS;
            break;
        }
        default:
        {
            break;
 8005cde:	e059      	b.n	8005d94 <pal_os_datastore_write+0xe0>
            if (length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 8005ce0:	88bb      	ldrh	r3, [r7, #4]
 8005ce2:	2b40      	cmp	r3, #64	@ 0x40
 8005ce4:	d858      	bhi.n	8005d98 <pal_os_datastore_write+0xe4>
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length>>8);
 8005ce6:	88bb      	ldrh	r3, [r7, #4]
 8005ce8:	0a1b      	lsrs	r3, r3, #8
 8005cea:	b299      	uxth	r1, r3
 8005cec:	7b7b      	ldrb	r3, [r7, #13]
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	737a      	strb	r2, [r7, #13]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	b2c9      	uxtb	r1, r1
 8005cf6:	4b2b      	ldr	r3, [pc, #172]	@ (8005da4 <pal_os_datastore_write+0xf0>)
 8005cf8:	5499      	strb	r1, [r3, r2]
                optiga_platform_binding_shared_secret[offset++] = (uint8_t)(length);
 8005cfa:	7b7b      	ldrb	r3, [r7, #13]
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	737a      	strb	r2, [r7, #13]
 8005d00:	461a      	mov	r2, r3
 8005d02:	88bb      	ldrh	r3, [r7, #4]
 8005d04:	b2d9      	uxtb	r1, r3
 8005d06:	4b27      	ldr	r3, [pc, #156]	@ (8005da4 <pal_os_datastore_write+0xf0>)
 8005d08:	5499      	strb	r1, [r3, r2]
                memcpy(&optiga_platform_binding_shared_secret[offset], p_buffer, length);
 8005d0a:	7b7b      	ldrb	r3, [r7, #13]
 8005d0c:	4a25      	ldr	r2, [pc, #148]	@ (8005da4 <pal_os_datastore_write+0xf0>)
 8005d0e:	4413      	add	r3, r2
 8005d10:	88ba      	ldrh	r2, [r7, #4]
 8005d12:	6839      	ldr	r1, [r7, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f002 ff8b 	bl	8008c30 <memcpy>
                return_status = PAL_STATUS_SUCCESS;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	81fb      	strh	r3, [r7, #14]
            break;
 8005d1e:	e03b      	b.n	8005d98 <pal_os_datastore_write+0xe4>
            data_store_manage_context_buffer[offset++] = (uint8_t)(length>>8);
 8005d20:	88bb      	ldrh	r3, [r7, #4]
 8005d22:	0a1b      	lsrs	r3, r3, #8
 8005d24:	b299      	uxth	r1, r3
 8005d26:	7b7b      	ldrb	r3, [r7, #13]
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	737a      	strb	r2, [r7, #13]
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	b2c9      	uxtb	r1, r1
 8005d30:	4b1d      	ldr	r3, [pc, #116]	@ (8005da8 <pal_os_datastore_write+0xf4>)
 8005d32:	5499      	strb	r1, [r3, r2]
            data_store_manage_context_buffer[offset++] = (uint8_t)(length);
 8005d34:	7b7b      	ldrb	r3, [r7, #13]
 8005d36:	1c5a      	adds	r2, r3, #1
 8005d38:	737a      	strb	r2, [r7, #13]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	88bb      	ldrh	r3, [r7, #4]
 8005d3e:	b2d9      	uxtb	r1, r3
 8005d40:	4b19      	ldr	r3, [pc, #100]	@ (8005da8 <pal_os_datastore_write+0xf4>)
 8005d42:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_manage_context_buffer[offset],p_buffer,length);
 8005d44:	7b7b      	ldrb	r3, [r7, #13]
 8005d46:	4a18      	ldr	r2, [pc, #96]	@ (8005da8 <pal_os_datastore_write+0xf4>)
 8005d48:	4413      	add	r3, r2
 8005d4a:	88ba      	ldrh	r2, [r7, #4]
 8005d4c:	6839      	ldr	r1, [r7, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f002 ff6e 	bl	8008c30 <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 8005d54:	2300      	movs	r3, #0
 8005d56:	81fb      	strh	r3, [r7, #14]
            break;
 8005d58:	e01f      	b.n	8005d9a <pal_os_datastore_write+0xe6>
            data_store_app_context_buffer[offset++] = (uint8_t)(length>>8);
 8005d5a:	88bb      	ldrh	r3, [r7, #4]
 8005d5c:	0a1b      	lsrs	r3, r3, #8
 8005d5e:	b299      	uxth	r1, r3
 8005d60:	7b7b      	ldrb	r3, [r7, #13]
 8005d62:	1c5a      	adds	r2, r3, #1
 8005d64:	737a      	strb	r2, [r7, #13]
 8005d66:	461a      	mov	r2, r3
 8005d68:	b2c9      	uxtb	r1, r1
 8005d6a:	4b10      	ldr	r3, [pc, #64]	@ (8005dac <pal_os_datastore_write+0xf8>)
 8005d6c:	5499      	strb	r1, [r3, r2]
            data_store_app_context_buffer[offset++] = (uint8_t)(length);
 8005d6e:	7b7b      	ldrb	r3, [r7, #13]
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	737a      	strb	r2, [r7, #13]
 8005d74:	461a      	mov	r2, r3
 8005d76:	88bb      	ldrh	r3, [r7, #4]
 8005d78:	b2d9      	uxtb	r1, r3
 8005d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8005dac <pal_os_datastore_write+0xf8>)
 8005d7c:	5499      	strb	r1, [r3, r2]
            memcpy(&data_store_app_context_buffer[offset],p_buffer,length);
 8005d7e:	7b7b      	ldrb	r3, [r7, #13]
 8005d80:	4a0a      	ldr	r2, [pc, #40]	@ (8005dac <pal_os_datastore_write+0xf8>)
 8005d82:	4413      	add	r3, r2
 8005d84:	88ba      	ldrh	r2, [r7, #4]
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f002 ff51 	bl	8008c30 <memcpy>
            return_status = PAL_STATUS_SUCCESS;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	81fb      	strh	r3, [r7, #14]
            break;
 8005d92:	e002      	b.n	8005d9a <pal_os_datastore_write+0xe6>
            break;
 8005d94:	bf00      	nop
 8005d96:	e000      	b.n	8005d9a <pal_os_datastore_write+0xe6>
            break;
 8005d98:	bf00      	nop
        }
    }
    return return_status;
 8005d9a:	89fb      	ldrh	r3, [r7, #14]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	20000418 	.word	0x20000418
 8005da8:	2000214c 	.word	0x2000214c
 8005dac:	20002190 	.word	0x20002190

08005db0 <pal_os_datastore_read>:


pal_status_t pal_os_datastore_read(uint16_t datastore_id, 
                                   uint8_t * p_buffer, 
                                   uint16_t * p_buffer_length)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	4603      	mov	r3, r0
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	81fb      	strh	r3, [r7, #14]
    pal_status_t return_status = PAL_STATUS_FAILURE;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	82fb      	strh	r3, [r7, #22]
    uint16_t data_length;
    uint8_t offset = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	757b      	strb	r3, [r7, #21]

    switch(datastore_id)
 8005dc6:	89fb      	ldrh	r3, [r7, #14]
 8005dc8:	2b33      	cmp	r3, #51	@ 0x33
 8005dca:	d049      	beq.n	8005e60 <pal_os_datastore_read+0xb0>
 8005dcc:	2b33      	cmp	r3, #51	@ 0x33
 8005dce:	dc67      	bgt.n	8005ea0 <pal_os_datastore_read+0xf0>
 8005dd0:	2b11      	cmp	r3, #17
 8005dd2:	d002      	beq.n	8005dda <pal_os_datastore_read+0x2a>
 8005dd4:	2b22      	cmp	r3, #34	@ 0x22
 8005dd6:	d023      	beq.n	8005e20 <pal_os_datastore_read+0x70>
 8005dd8:	e062      	b.n	8005ea0 <pal_os_datastore_read+0xf0>
            // This has to be enhanced by user only,
            // if the platform binding shared secret is stored in non-volatile 
            // memory with a specific location and not as a context segment 
            // else updating the share secret content is good enough.

            data_length = (uint16_t) (optiga_platform_binding_shared_secret[offset++] << 8);
 8005dda:	7d7b      	ldrb	r3, [r7, #21]
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	757a      	strb	r2, [r7, #21]
 8005de0:	461a      	mov	r2, r3
 8005de2:	4b34      	ldr	r3, [pc, #208]	@ (8005eb4 <pal_os_datastore_read+0x104>)
 8005de4:	5c9b      	ldrb	r3, [r3, r2]
 8005de6:	021b      	lsls	r3, r3, #8
 8005de8:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(optiga_platform_binding_shared_secret[offset++]);
 8005dea:	7d7b      	ldrb	r3, [r7, #21]
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	757a      	strb	r2, [r7, #21]
 8005df0:	461a      	mov	r2, r3
 8005df2:	4b30      	ldr	r3, [pc, #192]	@ (8005eb4 <pal_os_datastore_read+0x104>)
 8005df4:	5c9b      	ldrb	r3, [r3, r2]
 8005df6:	461a      	mov	r2, r3
 8005df8:	8a7b      	ldrh	r3, [r7, #18]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	827b      	strh	r3, [r7, #18]
            if (data_length <= OPTIGA_SHARED_SECRET_MAX_LENGTH)
 8005dfe:	8a7b      	ldrh	r3, [r7, #18]
 8005e00:	2b40      	cmp	r3, #64	@ 0x40
 8005e02:	d851      	bhi.n	8005ea8 <pal_os_datastore_read+0xf8>
            {
                memcpy(p_buffer,&optiga_platform_binding_shared_secret[offset], data_length);
 8005e04:	7d7b      	ldrb	r3, [r7, #21]
 8005e06:	4a2b      	ldr	r2, [pc, #172]	@ (8005eb4 <pal_os_datastore_read+0x104>)
 8005e08:	4413      	add	r3, r2
 8005e0a:	8a7a      	ldrh	r2, [r7, #18]
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	68b8      	ldr	r0, [r7, #8]
 8005e10:	f002 ff0e 	bl	8008c30 <memcpy>
                *p_buffer_length = data_length;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	8a7a      	ldrh	r2, [r7, #18]
 8005e18:	801a      	strh	r2, [r3, #0]
                return_status = PAL_STATUS_SUCCESS;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	82fb      	strh	r3, [r7, #22]
            }
            break;
 8005e1e:	e043      	b.n	8005ea8 <pal_os_datastore_read+0xf8>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if manage context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_manage_context_buffer[offset++] << 8);
 8005e20:	7d7b      	ldrb	r3, [r7, #21]
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	757a      	strb	r2, [r7, #21]
 8005e26:	461a      	mov	r2, r3
 8005e28:	4b23      	ldr	r3, [pc, #140]	@ (8005eb8 <pal_os_datastore_read+0x108>)
 8005e2a:	5c9b      	ldrb	r3, [r3, r2]
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_manage_context_buffer[offset++]);
 8005e30:	7d7b      	ldrb	r3, [r7, #21]
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	757a      	strb	r2, [r7, #21]
 8005e36:	461a      	mov	r2, r3
 8005e38:	4b1f      	ldr	r3, [pc, #124]	@ (8005eb8 <pal_os_datastore_read+0x108>)
 8005e3a:	5c9b      	ldrb	r3, [r3, r2]
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	8a7b      	ldrh	r3, [r7, #18]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_manage_context_buffer[offset], data_length);
 8005e44:	7d7b      	ldrb	r3, [r7, #21]
 8005e46:	4a1c      	ldr	r2, [pc, #112]	@ (8005eb8 <pal_os_datastore_read+0x108>)
 8005e48:	4413      	add	r3, r2
 8005e4a:	8a7a      	ldrh	r2, [r7, #18]
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	68b8      	ldr	r0, [r7, #8]
 8005e50:	f002 feee 	bl	8008c30 <memcpy>
            *p_buffer_length = data_length;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	8a7a      	ldrh	r2, [r7, #18]
 8005e58:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	82fb      	strh	r3, [r7, #22]
            break;
 8005e5e:	e024      	b.n	8005eaa <pal_os_datastore_read+0xfa>
        {
            // !!!OPTIGA_LIB_PORTING_REQUIRED
            // This has to be enhanced by user only,
            // if application context information is stored in NVM during the hibernate, 
            // else this is not required to be enhanced.
            data_length = (uint16_t) (data_store_app_context_buffer[offset++] << 8);
 8005e60:	7d7b      	ldrb	r3, [r7, #21]
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	757a      	strb	r2, [r7, #21]
 8005e66:	461a      	mov	r2, r3
 8005e68:	4b14      	ldr	r3, [pc, #80]	@ (8005ebc <pal_os_datastore_read+0x10c>)
 8005e6a:	5c9b      	ldrb	r3, [r3, r2]
 8005e6c:	021b      	lsls	r3, r3, #8
 8005e6e:	827b      	strh	r3, [r7, #18]
            data_length |= (uint16_t)(data_store_app_context_buffer[offset++]);
 8005e70:	7d7b      	ldrb	r3, [r7, #21]
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	757a      	strb	r2, [r7, #21]
 8005e76:	461a      	mov	r2, r3
 8005e78:	4b10      	ldr	r3, [pc, #64]	@ (8005ebc <pal_os_datastore_read+0x10c>)
 8005e7a:	5c9b      	ldrb	r3, [r3, r2]
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	8a7b      	ldrh	r3, [r7, #18]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	827b      	strh	r3, [r7, #18]
            memcpy(p_buffer, &data_store_app_context_buffer[offset], data_length);
 8005e84:	7d7b      	ldrb	r3, [r7, #21]
 8005e86:	4a0d      	ldr	r2, [pc, #52]	@ (8005ebc <pal_os_datastore_read+0x10c>)
 8005e88:	4413      	add	r3, r2
 8005e8a:	8a7a      	ldrh	r2, [r7, #18]
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	68b8      	ldr	r0, [r7, #8]
 8005e90:	f002 fece 	bl	8008c30 <memcpy>
            *p_buffer_length = data_length;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	8a7a      	ldrh	r2, [r7, #18]
 8005e98:	801a      	strh	r2, [r3, #0]
            return_status = PAL_STATUS_SUCCESS;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	82fb      	strh	r3, [r7, #22]
            break;
 8005e9e:	e004      	b.n	8005eaa <pal_os_datastore_read+0xfa>
        }
        default:
        {
            *p_buffer_length = 0;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	801a      	strh	r2, [r3, #0]
            break;
 8005ea6:	e000      	b.n	8005eaa <pal_os_datastore_read+0xfa>
            break;
 8005ea8:	bf00      	nop
        }
    }

    return return_status;
 8005eaa:	8afb      	ldrh	r3, [r7, #22]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	20000418 	.word	0x20000418
 8005eb8:	2000214c 	.word	0x2000214c
 8005ebc:	20002190 	.word	0x20002190

08005ec0 <pal_os_event_start>:
extern TIM_HandleTypeDef htim2;

static pal_os_event_t pal_os_event_0 = {0};

void pal_os_event_start(pal_os_event_t * p_pal_os_event, register_callback callback, void * callback_args)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
    if (0 == p_pal_os_event->is_event_triggered)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	7a1b      	ldrb	r3, [r3, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d109      	bne.n	8005ee8 <pal_os_event_start+0x28>
    {
        p_pal_os_event->is_event_triggered = TRUE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	721a      	strb	r2, [r3, #8]
        pal_os_event_register_callback_oneshot(p_pal_os_event,callback,callback_args,1000);
 8005eda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 f844 	bl	8005f70 <pal_os_event_register_callback_oneshot>
    }
}
 8005ee8:	bf00      	nop
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <pal_os_event_stop>:

void pal_os_event_stop(pal_os_event_t * p_pal_os_event)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
    p_pal_os_event->is_event_triggered = 0;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	721a      	strb	r2, [r3, #8]
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
	...

08005f0c <pal_os_event_create>:

pal_os_event_t * pal_os_event_create(register_callback callback, void * callback_args)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
    if (( NULL != callback )&&( NULL != callback_args ))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d007      	beq.n	8005f2c <pal_os_event_create+0x20>
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d004      	beq.n	8005f2c <pal_os_event_create+0x20>
    {
        pal_os_event_start(&pal_os_event_0,callback,callback_args);
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	6879      	ldr	r1, [r7, #4]
 8005f26:	4804      	ldr	r0, [pc, #16]	@ (8005f38 <pal_os_event_create+0x2c>)
 8005f28:	f7ff ffca 	bl	8005ec0 <pal_os_event_start>
    }
    return (&pal_os_event_0);
 8005f2c:	4b02      	ldr	r3, [pc, #8]	@ (8005f38 <pal_os_event_create+0x2c>)
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	2000219c 	.word	0x2000219c

08005f3c <pal_os_event_trigger_registered_callback>:

void pal_os_event_trigger_registered_callback(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // User should take care to stop the timer if it sin't stoped automatically
    // IMPORTANT: Make sure you don't call this callback from the ISR. 
    // It could work, but not recommended.

    HAL_TIM_Base_Stop_IT(&htim2);
 8005f42:	4809      	ldr	r0, [pc, #36]	@ (8005f68 <pal_os_event_trigger_registered_callback+0x2c>)
 8005f44:	f002 f978 	bl	8008238 <HAL_TIM_Base_Stop_IT>

    if (pal_os_event_0.callback_registered)
 8005f48:	4b08      	ldr	r3, [pc, #32]	@ (8005f6c <pal_os_event_trigger_registered_callback+0x30>)
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d007      	beq.n	8005f60 <pal_os_event_trigger_registered_callback+0x24>
    {
        callback = pal_os_event_0.callback_registered;
 8005f50:	4b06      	ldr	r3, [pc, #24]	@ (8005f6c <pal_os_event_trigger_registered_callback+0x30>)
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	607b      	str	r3, [r7, #4]
        callback((void * )pal_os_event_0.callback_ctx);
 8005f56:	4b05      	ldr	r3, [pc, #20]	@ (8005f6c <pal_os_event_trigger_registered_callback+0x30>)
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	4798      	blx	r3
    }
}
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	20000524 	.word	0x20000524
 8005f6c:	2000219c 	.word	0x2000219c

08005f70 <pal_os_event_register_callback_oneshot>:

void pal_os_event_register_callback_oneshot(pal_os_event_t * p_pal_os_event,
                                             register_callback callback,
                                             void * callback_args,
                                             uint32_t time_us)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
    p_pal_os_event->callback_registered = callback;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	615a      	str	r2, [r3, #20]
    p_pal_os_event->callback_ctx = callback_args;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	601a      	str	r2, [r3, #0]

    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // User should start the timer here with the 
    // pal_os_event_trigger_registered_callback() function as a callback

    MX_TIM2_Init();
 8005f8a:	f7fa fd55 	bl	8000a38 <MX_TIM2_Init>
    __HAL_TIM_SET_AUTORELOAD(&htim2, 50 * time_us);
 8005f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005fb8 <pal_os_event_register_callback_oneshot+0x48>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	683a      	ldr	r2, [r7, #0]
 8005f94:	2132      	movs	r1, #50	@ 0x32
 8005f96:	fb01 f202 	mul.w	r2, r1, r2
 8005f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2232      	movs	r2, #50	@ 0x32
 8005fa0:	fb02 f303 	mul.w	r3, r2, r3
 8005fa4:	4a04      	ldr	r2, [pc, #16]	@ (8005fb8 <pal_os_event_register_callback_oneshot+0x48>)
 8005fa6:	60d3      	str	r3, [r2, #12]
    HAL_TIM_Base_Start_IT(&htim2);
 8005fa8:	4803      	ldr	r0, [pc, #12]	@ (8005fb8 <pal_os_event_register_callback_oneshot+0x48>)
 8005faa:	f002 f8d5 	bl	8008158 <HAL_TIM_Base_Start_IT>

}
 8005fae:	bf00      	nop
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20000524 	.word	0x20000524

08005fbc <pal_os_lock_enter_critical_section>:
        p_lock->lock--;
    }
}

void pal_os_lock_enter_critical_section()
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section entry
}
 8005fc0:	bf00      	nop
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <pal_os_lock_exit_critical_section>:

void pal_os_lock_exit_critical_section()
{
 8005fca:	b480      	push	{r7}
 8005fcc:	af00      	add	r7, sp, #0
    // For safety critical systems it is recommended to implement a critical section exit
}
 8005fce:	bf00      	nop
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <pal_os_calloc>:

LIBRARY_EXPORTS void * pal_os_malloc(uint32_t block_size) {
	return malloc(block_size);
}

LIBRARY_EXPORTS void * pal_os_calloc(uint32_t number_of_blocks , uint32_t block_size) {
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
	return malloc(number_of_blocks * block_size);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	fb02 f303 	mul.w	r3, r2, r3
 8005fea:	4618      	mov	r0, r3
 8005fec:	f002 fd1e 	bl	8008a2c <malloc>
 8005ff0:	4603      	mov	r3, r0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <pal_os_free>:

LIBRARY_EXPORTS void pal_os_free(void * block) {
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b082      	sub	sp, #8
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
	free(block);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f002 fd1a 	bl	8008a3c <free>
}
 8006008:	bf00      	nop
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <pal_os_memcpy>:

LIBRARY_EXPORTS void pal_os_memcpy(void * p_destination, const void * p_source, uint32_t size) {
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
	memcpy(p_destination, p_source, size);
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	68b9      	ldr	r1, [r7, #8]
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f002 fe05 	bl	8008c30 <memcpy>
}
 8006026:	bf00      	nop
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <pal_os_memset>:

LIBRARY_EXPORTS void pal_os_memset(void * p_buffer, uint32_t value, uint32_t size) {
 800602e:	b580      	push	{r7, lr}
 8006030:	b084      	sub	sp, #16
 8006032:	af00      	add	r7, sp, #0
 8006034:	60f8      	str	r0, [r7, #12]
 8006036:	60b9      	str	r1, [r7, #8]
 8006038:	607a      	str	r2, [r7, #4]
	memset(p_buffer, value, size);
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	4619      	mov	r1, r3
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f002 fdb1 	bl	8008ba8 <memset>
}
 8006046:	bf00      	nop
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <pal_os_timer_get_time_in_microseconds>:


volatile uint32_t g_tick_count = 0;

uint32_t pal_os_timer_get_time_in_microseconds(void)
{
 8006050:	b480      	push	{r7}
 8006052:	af00      	add	r7, sp, #0
    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // This API is needed to support optiga cmd scheduler. 
    static uint32_t count = 0;
    // The implementation must ensure that every invocation of this API returns a unique value.
    return (count++);
 8006054:	4b04      	ldr	r3, [pc, #16]	@ (8006068 <pal_os_timer_get_time_in_microseconds+0x18>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	4903      	ldr	r1, [pc, #12]	@ (8006068 <pal_os_timer_get_time_in_microseconds+0x18>)
 800605c:	600a      	str	r2, [r1, #0]
}
 800605e:	4618      	mov	r0, r3
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	200021b8 	.word	0x200021b8

0800606c <pal_os_timer_get_time_in_milliseconds>:

uint32_t pal_os_timer_get_time_in_milliseconds(void)
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
    // !!!OPTIGA_LIB_PORTING_REQUIRED
    // You need to return here a unique value corresponding to the real-time
    return (g_tick_count);
 8006070:	4b03      	ldr	r3, [pc, #12]	@ (8006080 <pal_os_timer_get_time_in_milliseconds+0x14>)
 8006072:	681b      	ldr	r3, [r3, #0]
}
 8006074:	4618      	mov	r0, r3
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	200021b4 	.word	0x200021b4

08006084 <optiga_util_generic_event_handler>:



_STATIC_H void optiga_util_generic_event_handler(void * me,
                                                 optiga_lib_status_t event)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	460b      	mov	r3, r1
 800608e:	807b      	strh	r3, [r7, #2]
    optiga_util_t * p_optiga_util = (optiga_util_t *)me;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	60fb      	str	r3, [r7, #12]

    p_optiga_util->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	841a      	strh	r2, [r3, #32]
    p_optiga_util->handler(p_optiga_util->caller_context, event);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	6992      	ldr	r2, [r2, #24]
 80060a2:	8879      	ldrh	r1, [r7, #2]
 80060a4:	4610      	mov	r0, r2
 80060a6:	4798      	blx	r3
}
 80060a8:	bf00      	nop
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <optiga_util_reset_protection_level>:

_STATIC_H void optiga_util_reset_protection_level(optiga_util_t * me)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
    if (NULL != me)
#endif
    {
        OPTIGA_UTIL_SET_COMMS_PROTECTION_LEVEL(me, OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL);
    }
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <optiga_util_create>:
#endif

optiga_util_t * optiga_util_create(uint8_t optiga_instance_id,
                                   callback_handler_t handler,
                                   void * caller_context)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	4603      	mov	r3, r0
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	73fb      	strb	r3, [r7, #15]
    optiga_util_t * me = NULL;
 80060d2:	2300      	movs	r3, #0
 80060d4:	617b      	str	r3, [r7, #20]

    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if (NULL == handler)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d023      	beq.n	8006124 <optiga_util_create+0x60>
        {
            break;
        }
#endif
        me = (optiga_util_t *)pal_os_calloc(1, sizeof(optiga_util_t));
 80060dc:	2124      	movs	r1, #36	@ 0x24
 80060de:	2001      	movs	r0, #1
 80060e0:	f7ff ff7a 	bl	8005fd8 <pal_os_calloc>
 80060e4:	6178      	str	r0, [r7, #20]
        if (NULL == me)
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d01d      	beq.n	8006128 <optiga_util_create+0x64>
        {
            break;
        }

        me->handler = handler;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	61da      	str	r2, [r3, #28]
        me->caller_context = caller_context;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	619a      	str	r2, [r3, #24]
        me->instance_state = OPTIGA_LIB_SUCCESS;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2200      	movs	r2, #0
 80060fc:	841a      	strh	r2, [r3, #32]
#ifdef OPTIGA_COMMS_SHIELDED_CONNECTION
        me->protocol_version = OPTIGA_COMMS_PROTOCOL_VERSION_PRE_SHARED_SECRET;
        me->protection_level = OPTIGA_COMMS_DEFAULT_PROTECTION_LEVEL;
#endif
        me->my_cmd = optiga_cmd_create(optiga_instance_id, optiga_util_generic_event_handler, me);
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	490c      	ldr	r1, [pc, #48]	@ (8006134 <optiga_util_create+0x70>)
 8006104:	4618      	mov	r0, r3
 8006106:	f7fb fe15 	bl	8001d34 <optiga_cmd_create>
 800610a:	4602      	mov	r2, r0
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	615a      	str	r2, [r3, #20]
        if (NULL == me->my_cmd)
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d108      	bne.n	800612a <optiga_util_create+0x66>
        {
            pal_os_free(me);
 8006118:	6978      	ldr	r0, [r7, #20]
 800611a:	f7ff ff6e 	bl	8005ffa <pal_os_free>
            me = NULL;
 800611e:	2300      	movs	r3, #0
 8006120:	617b      	str	r3, [r7, #20]
 8006122:	e002      	b.n	800612a <optiga_util_create+0x66>
            break;
 8006124:	bf00      	nop
 8006126:	e000      	b.n	800612a <optiga_util_create+0x66>
            break;
 8006128:	bf00      	nop
        }
    } while (FALSE);

    return (me);
 800612a:	697b      	ldr	r3, [r7, #20]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	08006085 	.word	0x08006085

08006138 <optiga_util_open_application>:
    return (return_value);
}

optiga_lib_status_t optiga_util_open_application(optiga_util_t * me,
                                                 bool_t perform_restore)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 8006144:	f240 3302 	movw	r3, #770	@ 0x302
 8006148:	81fb      	strh	r3, [r7, #14]

    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <optiga_util_open_application+0x20>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d103      	bne.n	8006160 <optiga_util_open_application+0x28>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 8006158:	f240 3303 	movw	r3, #771	@ 0x303
 800615c:	81fb      	strh	r3, [r7, #14]
            break;
 800615e:	e019      	b.n	8006194 <optiga_util_open_application+0x5c>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	8c1b      	ldrh	r3, [r3, #32]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d103      	bne.n	8006170 <optiga_util_open_application+0x38>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 8006168:	f240 3305 	movw	r3, #773	@ 0x305
 800616c:	81fb      	strh	r3, [r7, #14]
            break;
 800616e:	e011      	b.n	8006194 <optiga_util_open_application+0x5c>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	841a      	strh	r2, [r3, #32]
        {
             OPTIGA_PROTECTION_MANAGE_CONTEXT(me->my_cmd, OPTIGA_COMMS_SESSION_CONTEXT_RESTORE);
        }
#endif //OPTIGA_COMMS_SHIELDED_CONNECTION

        return_value = optiga_cmd_open_application(me->my_cmd, perform_restore, NULL);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	78f9      	ldrb	r1, [r7, #3]
 800617c:	2200      	movs	r2, #0
 800617e:	4618      	mov	r0, r3
 8006180:	f7fb ffbc 	bl	80020fc <optiga_cmd_open_application>
 8006184:	4603      	mov	r3, r0
 8006186:	81fb      	strh	r3, [r7, #14]
        if (OPTIGA_LIB_SUCCESS != return_value)
 8006188:	89fb      	ldrh	r3, [r7, #14]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d002      	beq.n	8006194 <optiga_util_open_application+0x5c>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	841a      	strh	r2, [r3, #32]
        }

    } while (FALSE);
    optiga_util_reset_protection_level(me);
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f7ff ff8b 	bl	80060b0 <optiga_util_reset_protection_level>

    return (return_value);
 800619a:	89fb      	ldrh	r3, [r7, #14]
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <optiga_util_write_metadata>:

optiga_lib_status_t optiga_util_write_metadata(optiga_util_t * me,
                                               uint16_t optiga_oid,
                                               const uint8_t * buffer,
                                               uint8_t length)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	607a      	str	r2, [r7, #4]
 80061ae:	461a      	mov	r2, r3
 80061b0:	460b      	mov	r3, r1
 80061b2:	817b      	strh	r3, [r7, #10]
 80061b4:	4613      	mov	r3, r2
 80061b6:	727b      	strb	r3, [r7, #9]
    optiga_lib_status_t return_value = OPTIGA_UTIL_ERROR;
 80061b8:	f240 3302 	movw	r3, #770	@ 0x302
 80061bc:	82fb      	strh	r3, [r7, #22]
    optiga_set_data_object_params_t * p_params;
    OPTIGA_UTIL_LOG_MESSAGE(__FUNCTION__);
    do
    {
#ifdef OPTIGA_LIB_DEBUG_NULL_CHECK
        if ((NULL == me) || (NULL == me->my_cmd) || (NULL == buffer))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d006      	beq.n	80061d2 <optiga_util_write_metadata+0x2e>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <optiga_util_write_metadata+0x2e>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d103      	bne.n	80061da <optiga_util_write_metadata+0x36>
        {
            return_value = OPTIGA_UTIL_ERROR_INVALID_INPUT;
 80061d2:	f240 3303 	movw	r3, #771	@ 0x303
 80061d6:	82fb      	strh	r3, [r7, #22]
            break;
 80061d8:	e038      	b.n	800624c <optiga_util_write_metadata+0xa8>
        }
#endif

        if (OPTIGA_LIB_INSTANCE_BUSY == me->instance_state)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8c1b      	ldrh	r3, [r3, #32]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d103      	bne.n	80061ea <optiga_util_write_metadata+0x46>
        {
            return_value = OPTIGA_UTIL_ERROR_INSTANCE_IN_USE;
 80061e2:	f240 3305 	movw	r3, #773	@ 0x305
 80061e6:	82fb      	strh	r3, [r7, #22]
            break;
 80061e8:	e030      	b.n	800624c <optiga_util_write_metadata+0xa8>
        }

        me->instance_state = OPTIGA_LIB_INSTANCE_BUSY;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	841a      	strh	r2, [r3, #32]
        p_params = (optiga_set_data_object_params_t *)&(me->params.optiga_set_data_object_params);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	613b      	str	r3, [r7, #16]
        pal_os_memset(&me->params,0x00,sizeof(optiga_util_params_t));
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2214      	movs	r2, #20
 80061f8:	2100      	movs	r1, #0
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7ff ff17 	bl	800602e <pal_os_memset>

        p_params->oid = optiga_oid;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	897a      	ldrh	r2, [r7, #10]
 8006204:	809a      	strh	r2, [r3, #4]
        p_params->offset = 0;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	2200      	movs	r2, #0
 800620a:	80da      	strh	r2, [r3, #6]
        //for Metadata
        p_params->data_or_metadata = 1;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	2201      	movs	r2, #1
 8006210:	731a      	strb	r2, [r3, #12]
        p_params->buffer = buffer;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	601a      	str	r2, [r3, #0]
        p_params->size = length;
 8006218:	7a7b      	ldrb	r3, [r7, #9]
 800621a:	b29a      	uxth	r2, r3
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	811a      	strh	r2, [r3, #8]
        p_params->write_type = 1;
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	2201      	movs	r2, #1
 8006224:	735a      	strb	r2, [r3, #13]
        p_params->written_size = 0;
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	2200      	movs	r2, #0
 800622a:	815a      	strh	r2, [r3, #10]
        OPTIGA_PROTECTION_ENABLE(me->my_cmd, me);
        OPTIGA_PROTECTION_SET_VERSION(me->my_cmd, me);

        return_value = optiga_cmd_set_data_object(me->my_cmd, p_params->write_type,
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6958      	ldr	r0, [r3, #20]
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	7b5b      	ldrb	r3, [r3, #13]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4619      	mov	r1, r3
 8006238:	f7fc f82a 	bl	8002290 <optiga_cmd_set_data_object>
 800623c:	4603      	mov	r3, r0
 800623e:	82fb      	strh	r3, [r7, #22]
                                                  (optiga_set_data_object_params_t *)p_params);
        if (OPTIGA_LIB_SUCCESS != return_value)
 8006240:	8afb      	ldrh	r3, [r7, #22]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <optiga_util_write_metadata+0xa8>
        {
            me->instance_state = OPTIGA_LIB_INSTANCE_FREE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	841a      	strh	r2, [r3, #32]
        }
    } while (FALSE);
    optiga_util_reset_protection_level(me);
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f7ff ff2f 	bl	80060b0 <optiga_util_reset_protection_level>

    return (return_value);
 8006252:	8afb      	ldrh	r3, [r7, #22]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006260:	4b0e      	ldr	r3, [pc, #56]	@ (800629c <HAL_Init+0x40>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a0d      	ldr	r2, [pc, #52]	@ (800629c <HAL_Init+0x40>)
 8006266:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800626a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800626c:	4b0b      	ldr	r3, [pc, #44]	@ (800629c <HAL_Init+0x40>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a0a      	ldr	r2, [pc, #40]	@ (800629c <HAL_Init+0x40>)
 8006272:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006278:	4b08      	ldr	r3, [pc, #32]	@ (800629c <HAL_Init+0x40>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a07      	ldr	r2, [pc, #28]	@ (800629c <HAL_Init+0x40>)
 800627e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006284:	2003      	movs	r0, #3
 8006286:	f000 f92b 	bl	80064e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800628a:	200f      	movs	r0, #15
 800628c:	f000 f808 	bl	80062a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006290:	f7fa fcb0 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	40023c00 	.word	0x40023c00

080062a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80062a8:	4b12      	ldr	r3, [pc, #72]	@ (80062f4 <HAL_InitTick+0x54>)
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	4b12      	ldr	r3, [pc, #72]	@ (80062f8 <HAL_InitTick+0x58>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	4619      	mov	r1, r3
 80062b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80062b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80062ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 f943 	bl	800654a <HAL_SYSTICK_Config>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e00e      	b.n	80062ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b0f      	cmp	r3, #15
 80062d2:	d80a      	bhi.n	80062ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80062d4:	2200      	movs	r2, #0
 80062d6:	6879      	ldr	r1, [r7, #4]
 80062d8:	f04f 30ff 	mov.w	r0, #4294967295
 80062dc:	f000 f90b 	bl	80064f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80062e0:	4a06      	ldr	r2, [pc, #24]	@ (80062fc <HAL_InitTick+0x5c>)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	e000      	b.n	80062ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	20000004 	.word	0x20000004
 80062f8:	20000460 	.word	0x20000460
 80062fc:	2000045c 	.word	0x2000045c

08006300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006300:	b480      	push	{r7}
 8006302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006304:	4b06      	ldr	r3, [pc, #24]	@ (8006320 <HAL_IncTick+0x20>)
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	461a      	mov	r2, r3
 800630a:	4b06      	ldr	r3, [pc, #24]	@ (8006324 <HAL_IncTick+0x24>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4413      	add	r3, r2
 8006310:	4a04      	ldr	r2, [pc, #16]	@ (8006324 <HAL_IncTick+0x24>)
 8006312:	6013      	str	r3, [r2, #0]
}
 8006314:	bf00      	nop
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	20000460 	.word	0x20000460
 8006324:	200021bc 	.word	0x200021bc

08006328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
  return uwTick;
 800632c:	4b03      	ldr	r3, [pc, #12]	@ (800633c <HAL_GetTick+0x14>)
 800632e:	681b      	ldr	r3, [r3, #0]
}
 8006330:	4618      	mov	r0, r3
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	200021bc 	.word	0x200021bc

08006340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006350:	4b0c      	ldr	r3, [pc, #48]	@ (8006384 <__NVIC_SetPriorityGrouping+0x44>)
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800635c:	4013      	ands	r3, r2
 800635e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006368:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800636c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006372:	4a04      	ldr	r2, [pc, #16]	@ (8006384 <__NVIC_SetPriorityGrouping+0x44>)
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	60d3      	str	r3, [r2, #12]
}
 8006378:	bf00      	nop
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	e000ed00 	.word	0xe000ed00

08006388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006388:	b480      	push	{r7}
 800638a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800638c:	4b04      	ldr	r3, [pc, #16]	@ (80063a0 <__NVIC_GetPriorityGrouping+0x18>)
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	0a1b      	lsrs	r3, r3, #8
 8006392:	f003 0307 	and.w	r3, r3, #7
}
 8006396:	4618      	mov	r0, r3
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	e000ed00 	.word	0xe000ed00

080063a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	4603      	mov	r3, r0
 80063ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	db0b      	blt.n	80063ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063b6:	79fb      	ldrb	r3, [r7, #7]
 80063b8:	f003 021f 	and.w	r2, r3, #31
 80063bc:	4907      	ldr	r1, [pc, #28]	@ (80063dc <__NVIC_EnableIRQ+0x38>)
 80063be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	2001      	movs	r0, #1
 80063c6:	fa00 f202 	lsl.w	r2, r0, r2
 80063ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	e000e100 	.word	0xe000e100

080063e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	4603      	mov	r3, r0
 80063e8:	6039      	str	r1, [r7, #0]
 80063ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	db0a      	blt.n	800640a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	490c      	ldr	r1, [pc, #48]	@ (800642c <__NVIC_SetPriority+0x4c>)
 80063fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063fe:	0112      	lsls	r2, r2, #4
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	440b      	add	r3, r1
 8006404:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006408:	e00a      	b.n	8006420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	b2da      	uxtb	r2, r3
 800640e:	4908      	ldr	r1, [pc, #32]	@ (8006430 <__NVIC_SetPriority+0x50>)
 8006410:	79fb      	ldrb	r3, [r7, #7]
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	3b04      	subs	r3, #4
 8006418:	0112      	lsls	r2, r2, #4
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	440b      	add	r3, r1
 800641e:	761a      	strb	r2, [r3, #24]
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	e000e100 	.word	0xe000e100
 8006430:	e000ed00 	.word	0xe000ed00

08006434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006434:	b480      	push	{r7}
 8006436:	b089      	sub	sp, #36	@ 0x24
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	f1c3 0307 	rsb	r3, r3, #7
 800644e:	2b04      	cmp	r3, #4
 8006450:	bf28      	it	cs
 8006452:	2304      	movcs	r3, #4
 8006454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	3304      	adds	r3, #4
 800645a:	2b06      	cmp	r3, #6
 800645c:	d902      	bls.n	8006464 <NVIC_EncodePriority+0x30>
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	3b03      	subs	r3, #3
 8006462:	e000      	b.n	8006466 <NVIC_EncodePriority+0x32>
 8006464:	2300      	movs	r3, #0
 8006466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006468:	f04f 32ff 	mov.w	r2, #4294967295
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	fa02 f303 	lsl.w	r3, r2, r3
 8006472:	43da      	mvns	r2, r3
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	401a      	ands	r2, r3
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800647c:	f04f 31ff 	mov.w	r1, #4294967295
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	fa01 f303 	lsl.w	r3, r1, r3
 8006486:	43d9      	mvns	r1, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800648c:	4313      	orrs	r3, r2
         );
}
 800648e:	4618      	mov	r0, r3
 8006490:	3724      	adds	r7, #36	@ 0x24
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
	...

0800649c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3b01      	subs	r3, #1
 80064a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064ac:	d301      	bcc.n	80064b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80064ae:	2301      	movs	r3, #1
 80064b0:	e00f      	b.n	80064d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80064b2:	4a0a      	ldr	r2, [pc, #40]	@ (80064dc <SysTick_Config+0x40>)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	3b01      	subs	r3, #1
 80064b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80064ba:	210f      	movs	r1, #15
 80064bc:	f04f 30ff 	mov.w	r0, #4294967295
 80064c0:	f7ff ff8e 	bl	80063e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80064c4:	4b05      	ldr	r3, [pc, #20]	@ (80064dc <SysTick_Config+0x40>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064ca:	4b04      	ldr	r3, [pc, #16]	@ (80064dc <SysTick_Config+0x40>)
 80064cc:	2207      	movs	r2, #7
 80064ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	e000e010 	.word	0xe000e010

080064e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7ff ff29 	bl	8006340 <__NVIC_SetPriorityGrouping>
}
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b086      	sub	sp, #24
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	4603      	mov	r3, r0
 80064fe:	60b9      	str	r1, [r7, #8]
 8006500:	607a      	str	r2, [r7, #4]
 8006502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006504:	2300      	movs	r3, #0
 8006506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006508:	f7ff ff3e 	bl	8006388 <__NVIC_GetPriorityGrouping>
 800650c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	68b9      	ldr	r1, [r7, #8]
 8006512:	6978      	ldr	r0, [r7, #20]
 8006514:	f7ff ff8e 	bl	8006434 <NVIC_EncodePriority>
 8006518:	4602      	mov	r2, r0
 800651a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800651e:	4611      	mov	r1, r2
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff ff5d 	bl	80063e0 <__NVIC_SetPriority>
}
 8006526:	bf00      	nop
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	4603      	mov	r3, r0
 8006536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800653c:	4618      	mov	r0, r3
 800653e:	f7ff ff31 	bl	80063a4 <__NVIC_EnableIRQ>
}
 8006542:	bf00      	nop
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b082      	sub	sp, #8
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7ff ffa2 	bl	800649c <SysTick_Config>
 8006558:	4603      	mov	r3, r0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
	...

08006564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006564:	b480      	push	{r7}
 8006566:	b089      	sub	sp, #36	@ 0x24
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800656e:	2300      	movs	r3, #0
 8006570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006572:	2300      	movs	r3, #0
 8006574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006576:	2300      	movs	r3, #0
 8006578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800657a:	2300      	movs	r3, #0
 800657c:	61fb      	str	r3, [r7, #28]
 800657e:	e16b      	b.n	8006858 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006580:	2201      	movs	r2, #1
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	fa02 f303 	lsl.w	r3, r2, r3
 8006588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	4013      	ands	r3, r2
 8006592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	429a      	cmp	r2, r3
 800659a:	f040 815a 	bne.w	8006852 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d005      	beq.n	80065b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d130      	bne.n	8006618 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	005b      	lsls	r3, r3, #1
 80065c0:	2203      	movs	r2, #3
 80065c2:	fa02 f303 	lsl.w	r3, r2, r3
 80065c6:	43db      	mvns	r3, r3
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	4013      	ands	r3, r2
 80065cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	68da      	ldr	r2, [r3, #12]
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	fa02 f303 	lsl.w	r3, r2, r3
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	4313      	orrs	r3, r2
 80065de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065ec:	2201      	movs	r2, #1
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	fa02 f303 	lsl.w	r3, r2, r3
 80065f4:	43db      	mvns	r3, r3
 80065f6:	69ba      	ldr	r2, [r7, #24]
 80065f8:	4013      	ands	r3, r2
 80065fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	091b      	lsrs	r3, r3, #4
 8006602:	f003 0201 	and.w	r2, r3, #1
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	fa02 f303 	lsl.w	r3, r2, r3
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	4313      	orrs	r3, r2
 8006610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f003 0303 	and.w	r3, r3, #3
 8006620:	2b03      	cmp	r3, #3
 8006622:	d017      	beq.n	8006654 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	2203      	movs	r2, #3
 8006630:	fa02 f303 	lsl.w	r3, r2, r3
 8006634:	43db      	mvns	r3, r3
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	4013      	ands	r3, r2
 800663a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	fa02 f303 	lsl.w	r3, r2, r3
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	4313      	orrs	r3, r2
 800664c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f003 0303 	and.w	r3, r3, #3
 800665c:	2b02      	cmp	r3, #2
 800665e:	d123      	bne.n	80066a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	08da      	lsrs	r2, r3, #3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3208      	adds	r2, #8
 8006668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800666c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	f003 0307 	and.w	r3, r3, #7
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	220f      	movs	r2, #15
 8006678:	fa02 f303 	lsl.w	r3, r2, r3
 800667c:	43db      	mvns	r3, r3
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	4013      	ands	r3, r2
 8006682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	691a      	ldr	r2, [r3, #16]
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	f003 0307 	and.w	r3, r3, #7
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	fa02 f303 	lsl.w	r3, r2, r3
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	4313      	orrs	r3, r2
 8006698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	08da      	lsrs	r2, r3, #3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	3208      	adds	r2, #8
 80066a2:	69b9      	ldr	r1, [r7, #24]
 80066a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	2203      	movs	r2, #3
 80066b4:	fa02 f303 	lsl.w	r3, r2, r3
 80066b8:	43db      	mvns	r3, r3
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	4013      	ands	r3, r2
 80066be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f003 0203 	and.w	r2, r3, #3
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	fa02 f303 	lsl.w	r3, r2, r3
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	69ba      	ldr	r2, [r7, #24]
 80066da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	f000 80b4 	beq.w	8006852 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066ea:	2300      	movs	r3, #0
 80066ec:	60fb      	str	r3, [r7, #12]
 80066ee:	4b60      	ldr	r3, [pc, #384]	@ (8006870 <HAL_GPIO_Init+0x30c>)
 80066f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066f2:	4a5f      	ldr	r2, [pc, #380]	@ (8006870 <HAL_GPIO_Init+0x30c>)
 80066f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80066f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80066fa:	4b5d      	ldr	r3, [pc, #372]	@ (8006870 <HAL_GPIO_Init+0x30c>)
 80066fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006702:	60fb      	str	r3, [r7, #12]
 8006704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006706:	4a5b      	ldr	r2, [pc, #364]	@ (8006874 <HAL_GPIO_Init+0x310>)
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	089b      	lsrs	r3, r3, #2
 800670c:	3302      	adds	r3, #2
 800670e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	f003 0303 	and.w	r3, r3, #3
 800671a:	009b      	lsls	r3, r3, #2
 800671c:	220f      	movs	r2, #15
 800671e:	fa02 f303 	lsl.w	r3, r2, r3
 8006722:	43db      	mvns	r3, r3
 8006724:	69ba      	ldr	r2, [r7, #24]
 8006726:	4013      	ands	r3, r2
 8006728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a52      	ldr	r2, [pc, #328]	@ (8006878 <HAL_GPIO_Init+0x314>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d02b      	beq.n	800678a <HAL_GPIO_Init+0x226>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a51      	ldr	r2, [pc, #324]	@ (800687c <HAL_GPIO_Init+0x318>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d025      	beq.n	8006786 <HAL_GPIO_Init+0x222>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a50      	ldr	r2, [pc, #320]	@ (8006880 <HAL_GPIO_Init+0x31c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d01f      	beq.n	8006782 <HAL_GPIO_Init+0x21e>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a4f      	ldr	r2, [pc, #316]	@ (8006884 <HAL_GPIO_Init+0x320>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d019      	beq.n	800677e <HAL_GPIO_Init+0x21a>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a4e      	ldr	r2, [pc, #312]	@ (8006888 <HAL_GPIO_Init+0x324>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d013      	beq.n	800677a <HAL_GPIO_Init+0x216>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a4d      	ldr	r2, [pc, #308]	@ (800688c <HAL_GPIO_Init+0x328>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d00d      	beq.n	8006776 <HAL_GPIO_Init+0x212>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a4c      	ldr	r2, [pc, #304]	@ (8006890 <HAL_GPIO_Init+0x32c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d007      	beq.n	8006772 <HAL_GPIO_Init+0x20e>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a4b      	ldr	r2, [pc, #300]	@ (8006894 <HAL_GPIO_Init+0x330>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d101      	bne.n	800676e <HAL_GPIO_Init+0x20a>
 800676a:	2307      	movs	r3, #7
 800676c:	e00e      	b.n	800678c <HAL_GPIO_Init+0x228>
 800676e:	2308      	movs	r3, #8
 8006770:	e00c      	b.n	800678c <HAL_GPIO_Init+0x228>
 8006772:	2306      	movs	r3, #6
 8006774:	e00a      	b.n	800678c <HAL_GPIO_Init+0x228>
 8006776:	2305      	movs	r3, #5
 8006778:	e008      	b.n	800678c <HAL_GPIO_Init+0x228>
 800677a:	2304      	movs	r3, #4
 800677c:	e006      	b.n	800678c <HAL_GPIO_Init+0x228>
 800677e:	2303      	movs	r3, #3
 8006780:	e004      	b.n	800678c <HAL_GPIO_Init+0x228>
 8006782:	2302      	movs	r3, #2
 8006784:	e002      	b.n	800678c <HAL_GPIO_Init+0x228>
 8006786:	2301      	movs	r3, #1
 8006788:	e000      	b.n	800678c <HAL_GPIO_Init+0x228>
 800678a:	2300      	movs	r3, #0
 800678c:	69fa      	ldr	r2, [r7, #28]
 800678e:	f002 0203 	and.w	r2, r2, #3
 8006792:	0092      	lsls	r2, r2, #2
 8006794:	4093      	lsls	r3, r2
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	4313      	orrs	r3, r2
 800679a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800679c:	4935      	ldr	r1, [pc, #212]	@ (8006874 <HAL_GPIO_Init+0x310>)
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	089b      	lsrs	r3, r3, #2
 80067a2:	3302      	adds	r3, #2
 80067a4:	69ba      	ldr	r2, [r7, #24]
 80067a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80067aa:	4b3b      	ldr	r3, [pc, #236]	@ (8006898 <HAL_GPIO_Init+0x334>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	43db      	mvns	r3, r3
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	4013      	ands	r3, r2
 80067b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80067ce:	4a32      	ldr	r2, [pc, #200]	@ (8006898 <HAL_GPIO_Init+0x334>)
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80067d4:	4b30      	ldr	r3, [pc, #192]	@ (8006898 <HAL_GPIO_Init+0x334>)
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	43db      	mvns	r3, r3
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	4013      	ands	r3, r2
 80067e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d003      	beq.n	80067f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80067f8:	4a27      	ldr	r2, [pc, #156]	@ (8006898 <HAL_GPIO_Init+0x334>)
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80067fe:	4b26      	ldr	r3, [pc, #152]	@ (8006898 <HAL_GPIO_Init+0x334>)
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	43db      	mvns	r3, r3
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	4013      	ands	r3, r2
 800680c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800681a:	69ba      	ldr	r2, [r7, #24]
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	4313      	orrs	r3, r2
 8006820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006822:	4a1d      	ldr	r2, [pc, #116]	@ (8006898 <HAL_GPIO_Init+0x334>)
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006828:	4b1b      	ldr	r3, [pc, #108]	@ (8006898 <HAL_GPIO_Init+0x334>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	43db      	mvns	r3, r3
 8006832:	69ba      	ldr	r2, [r7, #24]
 8006834:	4013      	ands	r3, r2
 8006836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	4313      	orrs	r3, r2
 800684a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800684c:	4a12      	ldr	r2, [pc, #72]	@ (8006898 <HAL_GPIO_Init+0x334>)
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	3301      	adds	r3, #1
 8006856:	61fb      	str	r3, [r7, #28]
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	2b0f      	cmp	r3, #15
 800685c:	f67f ae90 	bls.w	8006580 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006860:	bf00      	nop
 8006862:	bf00      	nop
 8006864:	3724      	adds	r7, #36	@ 0x24
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	40023800 	.word	0x40023800
 8006874:	40013800 	.word	0x40013800
 8006878:	40020000 	.word	0x40020000
 800687c:	40020400 	.word	0x40020400
 8006880:	40020800 	.word	0x40020800
 8006884:	40020c00 	.word	0x40020c00
 8006888:	40021000 	.word	0x40021000
 800688c:	40021400 	.word	0x40021400
 8006890:	40021800 	.word	0x40021800
 8006894:	40021c00 	.word	0x40021c00
 8006898:	40013c00 	.word	0x40013c00

0800689c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	807b      	strh	r3, [r7, #2]
 80068a8:	4613      	mov	r3, r2
 80068aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80068ac:	787b      	ldrb	r3, [r7, #1]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d003      	beq.n	80068ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80068b2:	887a      	ldrh	r2, [r7, #2]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80068b8:	e003      	b.n	80068c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80068ba:	887b      	ldrh	r3, [r7, #2]
 80068bc:	041a      	lsls	r2, r3, #16
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	619a      	str	r2, [r3, #24]
}
 80068c2:	bf00      	nop
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	460b      	mov	r3, r1
 80068d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80068e0:	887a      	ldrh	r2, [r7, #2]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4013      	ands	r3, r2
 80068e6:	041a      	lsls	r2, r3, #16
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	43d9      	mvns	r1, r3
 80068ec:	887b      	ldrh	r3, [r7, #2]
 80068ee:	400b      	ands	r3, r1
 80068f0:	431a      	orrs	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	619a      	str	r2, [r3, #24]
}
 80068f6:	bf00      	nop
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
	...

08006904 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e12b      	b.n	8006b6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d106      	bne.n	8006930 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7fa f98a 	bl	8000c44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2224      	movs	r2, #36	@ 0x24
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0201 	bic.w	r2, r2, #1
 8006946:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006956:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006966:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006968:	f001 fb92 	bl	8008090 <HAL_RCC_GetPCLK1Freq>
 800696c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	4a81      	ldr	r2, [pc, #516]	@ (8006b78 <HAL_I2C_Init+0x274>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d807      	bhi.n	8006988 <HAL_I2C_Init+0x84>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4a80      	ldr	r2, [pc, #512]	@ (8006b7c <HAL_I2C_Init+0x278>)
 800697c:	4293      	cmp	r3, r2
 800697e:	bf94      	ite	ls
 8006980:	2301      	movls	r3, #1
 8006982:	2300      	movhi	r3, #0
 8006984:	b2db      	uxtb	r3, r3
 8006986:	e006      	b.n	8006996 <HAL_I2C_Init+0x92>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4a7d      	ldr	r2, [pc, #500]	@ (8006b80 <HAL_I2C_Init+0x27c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	bf94      	ite	ls
 8006990:	2301      	movls	r3, #1
 8006992:	2300      	movhi	r3, #0
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e0e7      	b.n	8006b6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	4a78      	ldr	r2, [pc, #480]	@ (8006b84 <HAL_I2C_Init+0x280>)
 80069a2:	fba2 2303 	umull	r2, r3, r2, r3
 80069a6:	0c9b      	lsrs	r3, r3, #18
 80069a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	4a6a      	ldr	r2, [pc, #424]	@ (8006b78 <HAL_I2C_Init+0x274>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d802      	bhi.n	80069d8 <HAL_I2C_Init+0xd4>
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	3301      	adds	r3, #1
 80069d6:	e009      	b.n	80069ec <HAL_I2C_Init+0xe8>
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80069de:	fb02 f303 	mul.w	r3, r2, r3
 80069e2:	4a69      	ldr	r2, [pc, #420]	@ (8006b88 <HAL_I2C_Init+0x284>)
 80069e4:	fba2 2303 	umull	r2, r3, r2, r3
 80069e8:	099b      	lsrs	r3, r3, #6
 80069ea:	3301      	adds	r3, #1
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6812      	ldr	r2, [r2, #0]
 80069f0:	430b      	orrs	r3, r1
 80069f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80069fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	495c      	ldr	r1, [pc, #368]	@ (8006b78 <HAL_I2C_Init+0x274>)
 8006a08:	428b      	cmp	r3, r1
 8006a0a:	d819      	bhi.n	8006a40 <HAL_I2C_Init+0x13c>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	1e59      	subs	r1, r3, #1
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	005b      	lsls	r3, r3, #1
 8006a16:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a1a:	1c59      	adds	r1, r3, #1
 8006a1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006a20:	400b      	ands	r3, r1
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00a      	beq.n	8006a3c <HAL_I2C_Init+0x138>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	1e59      	subs	r1, r3, #1
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a34:	3301      	adds	r3, #1
 8006a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a3a:	e051      	b.n	8006ae0 <HAL_I2C_Init+0x1dc>
 8006a3c:	2304      	movs	r3, #4
 8006a3e:	e04f      	b.n	8006ae0 <HAL_I2C_Init+0x1dc>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d111      	bne.n	8006a6c <HAL_I2C_Init+0x168>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	1e58      	subs	r0, r3, #1
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6859      	ldr	r1, [r3, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	440b      	add	r3, r1
 8006a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	bf0c      	ite	eq
 8006a64:	2301      	moveq	r3, #1
 8006a66:	2300      	movne	r3, #0
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	e012      	b.n	8006a92 <HAL_I2C_Init+0x18e>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	1e58      	subs	r0, r3, #1
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6859      	ldr	r1, [r3, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	440b      	add	r3, r1
 8006a7a:	0099      	lsls	r1, r3, #2
 8006a7c:	440b      	add	r3, r1
 8006a7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a82:	3301      	adds	r3, #1
 8006a84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bf0c      	ite	eq
 8006a8c:	2301      	moveq	r3, #1
 8006a8e:	2300      	movne	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d001      	beq.n	8006a9a <HAL_I2C_Init+0x196>
 8006a96:	2301      	movs	r3, #1
 8006a98:	e022      	b.n	8006ae0 <HAL_I2C_Init+0x1dc>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10e      	bne.n	8006ac0 <HAL_I2C_Init+0x1bc>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	1e58      	subs	r0, r3, #1
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6859      	ldr	r1, [r3, #4]
 8006aaa:	460b      	mov	r3, r1
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	440b      	add	r3, r1
 8006ab0:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006abe:	e00f      	b.n	8006ae0 <HAL_I2C_Init+0x1dc>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	1e58      	subs	r0, r3, #1
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6859      	ldr	r1, [r3, #4]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	440b      	add	r3, r1
 8006ace:	0099      	lsls	r1, r3, #2
 8006ad0:	440b      	add	r3, r1
 8006ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006adc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ae0:	6879      	ldr	r1, [r7, #4]
 8006ae2:	6809      	ldr	r1, [r1, #0]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	69da      	ldr	r2, [r3, #28]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	431a      	orrs	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006b0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	6911      	ldr	r1, [r2, #16]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	68d2      	ldr	r2, [r2, #12]
 8006b1a:	4311      	orrs	r1, r2
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	6812      	ldr	r2, [r2, #0]
 8006b20:	430b      	orrs	r3, r1
 8006b22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	695a      	ldr	r2, [r3, #20]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	431a      	orrs	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0201 	orr.w	r2, r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	000186a0 	.word	0x000186a0
 8006b7c:	001e847f 	.word	0x001e847f
 8006b80:	003d08ff 	.word	0x003d08ff
 8006b84:	431bde83 	.word	0x431bde83
 8006b88:	10624dd3 	.word	0x10624dd3

08006b8c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b088      	sub	sp, #32
 8006b90:	af02      	add	r7, sp, #8
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	607a      	str	r2, [r7, #4]
 8006b96:	461a      	mov	r2, r3
 8006b98:	460b      	mov	r3, r1
 8006b9a:	817b      	strh	r3, [r7, #10]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ba0:	f7ff fbc2 	bl	8006328 <HAL_GetTick>
 8006ba4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b20      	cmp	r3, #32
 8006bb0:	f040 80e0 	bne.w	8006d74 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	2319      	movs	r3, #25
 8006bba:	2201      	movs	r2, #1
 8006bbc:	4970      	ldr	r1, [pc, #448]	@ (8006d80 <HAL_I2C_Master_Transmit+0x1f4>)
 8006bbe:	68f8      	ldr	r0, [r7, #12]
 8006bc0:	f000 fc58 	bl	8007474 <I2C_WaitOnFlagUntilTimeout>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e0d3      	b.n	8006d76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d101      	bne.n	8006bdc <HAL_I2C_Master_Transmit+0x50>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	e0cc      	b.n	8006d76 <HAL_I2C_Master_Transmit+0x1ea>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d007      	beq.n	8006c02 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f042 0201 	orr.w	r2, r2, #1
 8006c00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2221      	movs	r2, #33	@ 0x21
 8006c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2210      	movs	r2, #16
 8006c1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	893a      	ldrh	r2, [r7, #8]
 8006c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4a50      	ldr	r2, [pc, #320]	@ (8006d84 <HAL_I2C_Master_Transmit+0x1f8>)
 8006c42:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006c44:	8979      	ldrh	r1, [r7, #10]
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	6a3a      	ldr	r2, [r7, #32]
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 fac2 	bl	80071d4 <I2C_MasterRequestWrite>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e08d      	b.n	8006d76 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	613b      	str	r3, [r7, #16]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	613b      	str	r3, [r7, #16]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	613b      	str	r3, [r7, #16]
 8006c6e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006c70:	e066      	b.n	8006d40 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	6a39      	ldr	r1, [r7, #32]
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 fcd2 	bl	8007620 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00d      	beq.n	8006c9e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	d107      	bne.n	8006c9a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e06b      	b.n	8006d76 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca2:	781a      	ldrb	r2, [r3, #0]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cae:	1c5a      	adds	r2, r3, #1
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	b29a      	uxth	r2, r3
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	d11b      	bne.n	8006d14 <HAL_I2C_Master_Transmit+0x188>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d017      	beq.n	8006d14 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce8:	781a      	ldrb	r2, [r3, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	3b01      	subs	r3, #1
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	6a39      	ldr	r1, [r7, #32]
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 fcc2 	bl	80076a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00d      	beq.n	8006d40 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	d107      	bne.n	8006d3c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d3a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e01a      	b.n	8006d76 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d194      	bne.n	8006c72 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	e000      	b.n	8006d76 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006d74:	2302      	movs	r3, #2
  }
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	00100002 	.word	0x00100002
 8006d84:	ffff0000 	.word	0xffff0000

08006d88 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b08c      	sub	sp, #48	@ 0x30
 8006d8c:	af02      	add	r7, sp, #8
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	607a      	str	r2, [r7, #4]
 8006d92:	461a      	mov	r2, r3
 8006d94:	460b      	mov	r3, r1
 8006d96:	817b      	strh	r3, [r7, #10]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d9c:	f7ff fac4 	bl	8006328 <HAL_GetTick>
 8006da0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b20      	cmp	r3, #32
 8006dac:	f040 820b 	bne.w	80071c6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	2319      	movs	r3, #25
 8006db6:	2201      	movs	r2, #1
 8006db8:	497c      	ldr	r1, [pc, #496]	@ (8006fac <HAL_I2C_Master_Receive+0x224>)
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 fb5a 	bl	8007474 <I2C_WaitOnFlagUntilTimeout>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	e1fe      	b.n	80071c8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d101      	bne.n	8006dd8 <HAL_I2C_Master_Receive+0x50>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	e1f7      	b.n	80071c8 <HAL_I2C_Master_Receive+0x440>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d007      	beq.n	8006dfe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f042 0201 	orr.w	r2, r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2222      	movs	r2, #34	@ 0x22
 8006e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2210      	movs	r2, #16
 8006e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	893a      	ldrh	r2, [r7, #8]
 8006e2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4a5c      	ldr	r2, [pc, #368]	@ (8006fb0 <HAL_I2C_Master_Receive+0x228>)
 8006e3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006e40:	8979      	ldrh	r1, [r7, #10]
 8006e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f000 fa46 	bl	80072d8 <I2C_MasterRequestRead>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e1b8      	b.n	80071c8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d113      	bne.n	8006e86 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e5e:	2300      	movs	r3, #0
 8006e60:	623b      	str	r3, [r7, #32]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	623b      	str	r3, [r7, #32]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	623b      	str	r3, [r7, #32]
 8006e72:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	e18c      	b.n	80071a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d11b      	bne.n	8006ec6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	61fb      	str	r3, [r7, #28]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	61fb      	str	r3, [r7, #28]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	61fb      	str	r3, [r7, #28]
 8006eb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	e16c      	b.n	80071a0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d11b      	bne.n	8006f06 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006edc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006eec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eee:	2300      	movs	r3, #0
 8006ef0:	61bb      	str	r3, [r7, #24]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	61bb      	str	r3, [r7, #24]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	61bb      	str	r3, [r7, #24]
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	e14c      	b.n	80071a0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f14:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f16:	2300      	movs	r3, #0
 8006f18:	617b      	str	r3, [r7, #20]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	617b      	str	r3, [r7, #20]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	617b      	str	r3, [r7, #20]
 8006f2a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006f2c:	e138      	b.n	80071a0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	f200 80f1 	bhi.w	800711a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d123      	bne.n	8006f88 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f42:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 fbed 	bl	8007724 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e139      	b.n	80071c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	691a      	ldr	r2, [r3, #16]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5e:	b2d2      	uxtb	r2, r2
 8006f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f66:	1c5a      	adds	r2, r3, #1
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f70:	3b01      	subs	r3, #1
 8006f72:	b29a      	uxth	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006f86:	e10b      	b.n	80071a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d14e      	bne.n	800702e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f96:	2200      	movs	r2, #0
 8006f98:	4906      	ldr	r1, [pc, #24]	@ (8006fb4 <HAL_I2C_Master_Receive+0x22c>)
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f000 fa6a 	bl	8007474 <I2C_WaitOnFlagUntilTimeout>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d008      	beq.n	8006fb8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e10e      	b.n	80071c8 <HAL_I2C_Master_Receive+0x440>
 8006faa:	bf00      	nop
 8006fac:	00100002 	.word	0x00100002
 8006fb0:	ffff0000 	.word	0xffff0000
 8006fb4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006fc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	691a      	ldr	r2, [r3, #16]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd2:	b2d2      	uxtb	r2, r2
 8006fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fda:	1c5a      	adds	r2, r3, #1
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	691a      	ldr	r2, [r3, #16]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007004:	b2d2      	uxtb	r2, r2
 8007006:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007016:	3b01      	subs	r3, #1
 8007018:	b29a      	uxth	r2, r3
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007022:	b29b      	uxth	r3, r3
 8007024:	3b01      	subs	r3, #1
 8007026:	b29a      	uxth	r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800702c:	e0b8      	b.n	80071a0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800702e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007034:	2200      	movs	r2, #0
 8007036:	4966      	ldr	r1, [pc, #408]	@ (80071d0 <HAL_I2C_Master_Receive+0x448>)
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 fa1b 	bl	8007474 <I2C_WaitOnFlagUntilTimeout>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e0bf      	b.n	80071c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691a      	ldr	r2, [r3, #16]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007062:	b2d2      	uxtb	r2, r2
 8007064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007074:	3b01      	subs	r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007080:	b29b      	uxth	r3, r3
 8007082:	3b01      	subs	r3, #1
 8007084:	b29a      	uxth	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800708a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007090:	2200      	movs	r2, #0
 8007092:	494f      	ldr	r1, [pc, #316]	@ (80071d0 <HAL_I2C_Master_Receive+0x448>)
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 f9ed 	bl	8007474 <I2C_WaitOnFlagUntilTimeout>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e091      	b.n	80071c8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	691a      	ldr	r2, [r3, #16]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070be:	b2d2      	uxtb	r2, r2
 80070c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070d0:	3b01      	subs	r3, #1
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070dc:	b29b      	uxth	r3, r3
 80070de:	3b01      	subs	r3, #1
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	691a      	ldr	r2, [r3, #16]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f0:	b2d2      	uxtb	r2, r2
 80070f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f8:	1c5a      	adds	r2, r3, #1
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007102:	3b01      	subs	r3, #1
 8007104:	b29a      	uxth	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800710e:	b29b      	uxth	r3, r3
 8007110:	3b01      	subs	r3, #1
 8007112:	b29a      	uxth	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007118:	e042      	b.n	80071a0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800711a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800711c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f000 fb00 	bl	8007724 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e04c      	b.n	80071c8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	691a      	ldr	r2, [r3, #16]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007138:	b2d2      	uxtb	r2, r2
 800713a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007140:	1c5a      	adds	r2, r3, #1
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800714a:	3b01      	subs	r3, #1
 800714c:	b29a      	uxth	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007156:	b29b      	uxth	r3, r3
 8007158:	3b01      	subs	r3, #1
 800715a:	b29a      	uxth	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	f003 0304 	and.w	r3, r3, #4
 800716a:	2b04      	cmp	r3, #4
 800716c:	d118      	bne.n	80071a0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	691a      	ldr	r2, [r3, #16]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007178:	b2d2      	uxtb	r2, r2
 800717a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007180:	1c5a      	adds	r2, r3, #1
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800718a:	3b01      	subs	r3, #1
 800718c:	b29a      	uxth	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007196:	b29b      	uxth	r3, r3
 8007198:	3b01      	subs	r3, #1
 800719a:	b29a      	uxth	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f47f aec2 	bne.w	8006f2e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2220      	movs	r2, #32
 80071ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80071c2:	2300      	movs	r3, #0
 80071c4:	e000      	b.n	80071c8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80071c6:	2302      	movs	r3, #2
  }
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3728      	adds	r7, #40	@ 0x28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	00010004 	.word	0x00010004

080071d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b088      	sub	sp, #32
 80071d8:	af02      	add	r7, sp, #8
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	607a      	str	r2, [r7, #4]
 80071de:	603b      	str	r3, [r7, #0]
 80071e0:	460b      	mov	r3, r1
 80071e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	2b08      	cmp	r3, #8
 80071ee:	d006      	beq.n	80071fe <I2C_MasterRequestWrite+0x2a>
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d003      	beq.n	80071fe <I2C_MasterRequestWrite+0x2a>
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80071fc:	d108      	bne.n	8007210 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	e00b      	b.n	8007228 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007214:	2b12      	cmp	r3, #18
 8007216:	d107      	bne.n	8007228 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007226:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f000 f91d 	bl	8007474 <I2C_WaitOnFlagUntilTimeout>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00d      	beq.n	800725c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800724a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800724e:	d103      	bne.n	8007258 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007256:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e035      	b.n	80072c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007264:	d108      	bne.n	8007278 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007266:	897b      	ldrh	r3, [r7, #10]
 8007268:	b2db      	uxtb	r3, r3
 800726a:	461a      	mov	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007274:	611a      	str	r2, [r3, #16]
 8007276:	e01b      	b.n	80072b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007278:	897b      	ldrh	r3, [r7, #10]
 800727a:	11db      	asrs	r3, r3, #7
 800727c:	b2db      	uxtb	r3, r3
 800727e:	f003 0306 	and.w	r3, r3, #6
 8007282:	b2db      	uxtb	r3, r3
 8007284:	f063 030f 	orn	r3, r3, #15
 8007288:	b2da      	uxtb	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	490e      	ldr	r1, [pc, #56]	@ (80072d0 <I2C_MasterRequestWrite+0xfc>)
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f000 f943 	bl	8007522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e010      	b.n	80072c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80072a6:	897b      	ldrh	r3, [r7, #10]
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	4907      	ldr	r1, [pc, #28]	@ (80072d4 <I2C_MasterRequestWrite+0x100>)
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f000 f933 	bl	8007522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e000      	b.n	80072c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	00010008 	.word	0x00010008
 80072d4:	00010002 	.word	0x00010002

080072d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b088      	sub	sp, #32
 80072dc:	af02      	add	r7, sp, #8
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	607a      	str	r2, [r7, #4]
 80072e2:	603b      	str	r3, [r7, #0]
 80072e4:	460b      	mov	r3, r1
 80072e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80072fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2b08      	cmp	r3, #8
 8007302:	d006      	beq.n	8007312 <I2C_MasterRequestRead+0x3a>
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d003      	beq.n	8007312 <I2C_MasterRequestRead+0x3a>
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007310:	d108      	bne.n	8007324 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	e00b      	b.n	800733c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007328:	2b11      	cmp	r3, #17
 800732a:	d107      	bne.n	800733c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800733a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f000 f893 	bl	8007474 <I2C_WaitOnFlagUntilTimeout>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00d      	beq.n	8007370 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800735e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007362:	d103      	bne.n	800736c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800736a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e079      	b.n	8007464 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007378:	d108      	bne.n	800738c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800737a:	897b      	ldrh	r3, [r7, #10]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	f043 0301 	orr.w	r3, r3, #1
 8007382:	b2da      	uxtb	r2, r3
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	611a      	str	r2, [r3, #16]
 800738a:	e05f      	b.n	800744c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800738c:	897b      	ldrh	r3, [r7, #10]
 800738e:	11db      	asrs	r3, r3, #7
 8007390:	b2db      	uxtb	r3, r3
 8007392:	f003 0306 	and.w	r3, r3, #6
 8007396:	b2db      	uxtb	r3, r3
 8007398:	f063 030f 	orn	r3, r3, #15
 800739c:	b2da      	uxtb	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	4930      	ldr	r1, [pc, #192]	@ (800746c <I2C_MasterRequestRead+0x194>)
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f000 f8b9 	bl	8007522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e054      	b.n	8007464 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80073ba:	897b      	ldrh	r3, [r7, #10]
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	4929      	ldr	r1, [pc, #164]	@ (8007470 <I2C_MasterRequestRead+0x198>)
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f000 f8a9 	bl	8007522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d001      	beq.n	80073da <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e044      	b.n	8007464 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073da:	2300      	movs	r3, #0
 80073dc:	613b      	str	r3, [r7, #16]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	613b      	str	r3, [r7, #16]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	699b      	ldr	r3, [r3, #24]
 80073ec:	613b      	str	r3, [r7, #16]
 80073ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80073fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	9300      	str	r3, [sp, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 f831 	bl	8007474 <I2C_WaitOnFlagUntilTimeout>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00d      	beq.n	8007434 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007426:	d103      	bne.n	8007430 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800742e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e017      	b.n	8007464 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007434:	897b      	ldrh	r3, [r7, #10]
 8007436:	11db      	asrs	r3, r3, #7
 8007438:	b2db      	uxtb	r3, r3
 800743a:	f003 0306 	and.w	r3, r3, #6
 800743e:	b2db      	uxtb	r3, r3
 8007440:	f063 030e 	orn	r3, r3, #14
 8007444:	b2da      	uxtb	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	4907      	ldr	r1, [pc, #28]	@ (8007470 <I2C_MasterRequestRead+0x198>)
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 f865 	bl	8007522 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	00010008 	.word	0x00010008
 8007470:	00010002 	.word	0x00010002

08007474 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	603b      	str	r3, [r7, #0]
 8007480:	4613      	mov	r3, r2
 8007482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007484:	e025      	b.n	80074d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748c:	d021      	beq.n	80074d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800748e:	f7fe ff4b 	bl	8006328 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	429a      	cmp	r2, r3
 800749c:	d302      	bcc.n	80074a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d116      	bne.n	80074d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074be:	f043 0220 	orr.w	r2, r3, #32
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e023      	b.n	800751a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	0c1b      	lsrs	r3, r3, #16
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d10d      	bne.n	80074f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	43da      	mvns	r2, r3
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	4013      	ands	r3, r2
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	bf0c      	ite	eq
 80074ee:	2301      	moveq	r3, #1
 80074f0:	2300      	movne	r3, #0
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	461a      	mov	r2, r3
 80074f6:	e00c      	b.n	8007512 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	43da      	mvns	r2, r3
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	4013      	ands	r3, r2
 8007504:	b29b      	uxth	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	bf0c      	ite	eq
 800750a:	2301      	moveq	r3, #1
 800750c:	2300      	movne	r3, #0
 800750e:	b2db      	uxtb	r3, r3
 8007510:	461a      	mov	r2, r3
 8007512:	79fb      	ldrb	r3, [r7, #7]
 8007514:	429a      	cmp	r2, r3
 8007516:	d0b6      	beq.n	8007486 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	60f8      	str	r0, [r7, #12]
 800752a:	60b9      	str	r1, [r7, #8]
 800752c:	607a      	str	r2, [r7, #4]
 800752e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007530:	e051      	b.n	80075d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	695b      	ldr	r3, [r3, #20]
 8007538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800753c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007540:	d123      	bne.n	800758a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007550:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800755a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2200      	movs	r2, #0
 8007560:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2220      	movs	r2, #32
 8007566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007576:	f043 0204 	orr.w	r2, r3, #4
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e046      	b.n	8007618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007590:	d021      	beq.n	80075d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007592:	f7fe fec9 	bl	8006328 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d302      	bcc.n	80075a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d116      	bne.n	80075d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2220      	movs	r2, #32
 80075b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c2:	f043 0220 	orr.w	r2, r3, #32
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e020      	b.n	8007618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	0c1b      	lsrs	r3, r3, #16
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d10c      	bne.n	80075fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	43da      	mvns	r2, r3
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	4013      	ands	r3, r2
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	bf14      	ite	ne
 80075f2:	2301      	movne	r3, #1
 80075f4:	2300      	moveq	r3, #0
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	e00b      	b.n	8007612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	43da      	mvns	r2, r3
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	4013      	ands	r3, r2
 8007606:	b29b      	uxth	r3, r3
 8007608:	2b00      	cmp	r3, #0
 800760a:	bf14      	ite	ne
 800760c:	2301      	movne	r3, #1
 800760e:	2300      	moveq	r3, #0
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d18d      	bne.n	8007532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800762c:	e02d      	b.n	800768a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 f8ce 	bl	80077d0 <I2C_IsAcknowledgeFailed>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d001      	beq.n	800763e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e02d      	b.n	800769a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007644:	d021      	beq.n	800768a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007646:	f7fe fe6f 	bl	8006328 <HAL_GetTick>
 800764a:	4602      	mov	r2, r0
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	429a      	cmp	r2, r3
 8007654:	d302      	bcc.n	800765c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d116      	bne.n	800768a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2220      	movs	r2, #32
 8007666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007676:	f043 0220 	orr.w	r2, r3, #32
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e007      	b.n	800769a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007694:	2b80      	cmp	r3, #128	@ 0x80
 8007696:	d1ca      	bne.n	800762e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	60f8      	str	r0, [r7, #12]
 80076aa:	60b9      	str	r1, [r7, #8]
 80076ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80076ae:	e02d      	b.n	800770c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f000 f88d 	bl	80077d0 <I2C_IsAcknowledgeFailed>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e02d      	b.n	800771c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c6:	d021      	beq.n	800770c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076c8:	f7fe fe2e 	bl	8006328 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d302      	bcc.n	80076de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d116      	bne.n	800770c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2220      	movs	r2, #32
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f8:	f043 0220 	orr.w	r2, r3, #32
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e007      	b.n	800771c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	f003 0304 	and.w	r3, r3, #4
 8007716:	2b04      	cmp	r3, #4
 8007718:	d1ca      	bne.n	80076b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007730:	e042      	b.n	80077b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	f003 0310 	and.w	r3, r3, #16
 800773c:	2b10      	cmp	r3, #16
 800773e:	d119      	bne.n	8007774 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f06f 0210 	mvn.w	r2, #16
 8007748:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2220      	movs	r2, #32
 8007754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e029      	b.n	80077c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007774:	f7fe fdd8 	bl	8006328 <HAL_GetTick>
 8007778:	4602      	mov	r2, r0
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	429a      	cmp	r2, r3
 8007782:	d302      	bcc.n	800778a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d116      	bne.n	80077b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2220      	movs	r2, #32
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077a4:	f043 0220 	orr.w	r2, r3, #32
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e007      	b.n	80077c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077c2:	2b40      	cmp	r3, #64	@ 0x40
 80077c4:	d1b5      	bne.n	8007732 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80077c6:	2300      	movs	r3, #0
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077e6:	d11b      	bne.n	8007820 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80077f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2220      	movs	r2, #32
 80077fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800780c:	f043 0204 	orr.w	r2, r3, #4
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e000      	b.n	8007822 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	370c      	adds	r7, #12
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
	...

08007830 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e267      	b.n	8007d12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b00      	cmp	r3, #0
 800784c:	d075      	beq.n	800793a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800784e:	4b88      	ldr	r3, [pc, #544]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f003 030c 	and.w	r3, r3, #12
 8007856:	2b04      	cmp	r3, #4
 8007858:	d00c      	beq.n	8007874 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800785a:	4b85      	ldr	r3, [pc, #532]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007862:	2b08      	cmp	r3, #8
 8007864:	d112      	bne.n	800788c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007866:	4b82      	ldr	r3, [pc, #520]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800786e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007872:	d10b      	bne.n	800788c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007874:	4b7e      	ldr	r3, [pc, #504]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d05b      	beq.n	8007938 <HAL_RCC_OscConfig+0x108>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d157      	bne.n	8007938 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e242      	b.n	8007d12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007894:	d106      	bne.n	80078a4 <HAL_RCC_OscConfig+0x74>
 8007896:	4b76      	ldr	r3, [pc, #472]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a75      	ldr	r2, [pc, #468]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 800789c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078a0:	6013      	str	r3, [r2, #0]
 80078a2:	e01d      	b.n	80078e0 <HAL_RCC_OscConfig+0xb0>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078ac:	d10c      	bne.n	80078c8 <HAL_RCC_OscConfig+0x98>
 80078ae:	4b70      	ldr	r3, [pc, #448]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a6f      	ldr	r2, [pc, #444]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 80078b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078b8:	6013      	str	r3, [r2, #0]
 80078ba:	4b6d      	ldr	r3, [pc, #436]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a6c      	ldr	r2, [pc, #432]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 80078c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	e00b      	b.n	80078e0 <HAL_RCC_OscConfig+0xb0>
 80078c8:	4b69      	ldr	r3, [pc, #420]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a68      	ldr	r2, [pc, #416]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 80078ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078d2:	6013      	str	r3, [r2, #0]
 80078d4:	4b66      	ldr	r3, [pc, #408]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a65      	ldr	r2, [pc, #404]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 80078da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d013      	beq.n	8007910 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078e8:	f7fe fd1e 	bl	8006328 <HAL_GetTick>
 80078ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078ee:	e008      	b.n	8007902 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078f0:	f7fe fd1a 	bl	8006328 <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	2b64      	cmp	r3, #100	@ 0x64
 80078fc:	d901      	bls.n	8007902 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e207      	b.n	8007d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007902:	4b5b      	ldr	r3, [pc, #364]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d0f0      	beq.n	80078f0 <HAL_RCC_OscConfig+0xc0>
 800790e:	e014      	b.n	800793a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007910:	f7fe fd0a 	bl	8006328 <HAL_GetTick>
 8007914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007916:	e008      	b.n	800792a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007918:	f7fe fd06 	bl	8006328 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	2b64      	cmp	r3, #100	@ 0x64
 8007924:	d901      	bls.n	800792a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e1f3      	b.n	8007d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800792a:	4b51      	ldr	r3, [pc, #324]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1f0      	bne.n	8007918 <HAL_RCC_OscConfig+0xe8>
 8007936:	e000      	b.n	800793a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d063      	beq.n	8007a0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007946:	4b4a      	ldr	r3, [pc, #296]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f003 030c 	and.w	r3, r3, #12
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00b      	beq.n	800796a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007952:	4b47      	ldr	r3, [pc, #284]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800795a:	2b08      	cmp	r3, #8
 800795c:	d11c      	bne.n	8007998 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800795e:	4b44      	ldr	r3, [pc, #272]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d116      	bne.n	8007998 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800796a:	4b41      	ldr	r3, [pc, #260]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d005      	beq.n	8007982 <HAL_RCC_OscConfig+0x152>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d001      	beq.n	8007982 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e1c7      	b.n	8007d12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007982:	4b3b      	ldr	r3, [pc, #236]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	00db      	lsls	r3, r3, #3
 8007990:	4937      	ldr	r1, [pc, #220]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 8007992:	4313      	orrs	r3, r2
 8007994:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007996:	e03a      	b.n	8007a0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d020      	beq.n	80079e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079a0:	4b34      	ldr	r3, [pc, #208]	@ (8007a74 <HAL_RCC_OscConfig+0x244>)
 80079a2:	2201      	movs	r2, #1
 80079a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a6:	f7fe fcbf 	bl	8006328 <HAL_GetTick>
 80079aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079ac:	e008      	b.n	80079c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079ae:	f7fe fcbb 	bl	8006328 <HAL_GetTick>
 80079b2:	4602      	mov	r2, r0
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d901      	bls.n	80079c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e1a8      	b.n	8007d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079c0:	4b2b      	ldr	r3, [pc, #172]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0302 	and.w	r3, r3, #2
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d0f0      	beq.n	80079ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079cc:	4b28      	ldr	r3, [pc, #160]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	00db      	lsls	r3, r3, #3
 80079da:	4925      	ldr	r1, [pc, #148]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	600b      	str	r3, [r1, #0]
 80079e0:	e015      	b.n	8007a0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079e2:	4b24      	ldr	r3, [pc, #144]	@ (8007a74 <HAL_RCC_OscConfig+0x244>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e8:	f7fe fc9e 	bl	8006328 <HAL_GetTick>
 80079ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079ee:	e008      	b.n	8007a02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079f0:	f7fe fc9a 	bl	8006328 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d901      	bls.n	8007a02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e187      	b.n	8007d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a02:	4b1b      	ldr	r3, [pc, #108]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0302 	and.w	r3, r3, #2
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1f0      	bne.n	80079f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0308 	and.w	r3, r3, #8
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d036      	beq.n	8007a88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d016      	beq.n	8007a50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a22:	4b15      	ldr	r3, [pc, #84]	@ (8007a78 <HAL_RCC_OscConfig+0x248>)
 8007a24:	2201      	movs	r2, #1
 8007a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a28:	f7fe fc7e 	bl	8006328 <HAL_GetTick>
 8007a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a2e:	e008      	b.n	8007a42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a30:	f7fe fc7a 	bl	8006328 <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d901      	bls.n	8007a42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e167      	b.n	8007d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a42:	4b0b      	ldr	r3, [pc, #44]	@ (8007a70 <HAL_RCC_OscConfig+0x240>)
 8007a44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d0f0      	beq.n	8007a30 <HAL_RCC_OscConfig+0x200>
 8007a4e:	e01b      	b.n	8007a88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a50:	4b09      	ldr	r3, [pc, #36]	@ (8007a78 <HAL_RCC_OscConfig+0x248>)
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a56:	f7fe fc67 	bl	8006328 <HAL_GetTick>
 8007a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a5c:	e00e      	b.n	8007a7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a5e:	f7fe fc63 	bl	8006328 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d907      	bls.n	8007a7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e150      	b.n	8007d12 <HAL_RCC_OscConfig+0x4e2>
 8007a70:	40023800 	.word	0x40023800
 8007a74:	42470000 	.word	0x42470000
 8007a78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a7c:	4b88      	ldr	r3, [pc, #544]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007a7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a80:	f003 0302 	and.w	r3, r3, #2
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1ea      	bne.n	8007a5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0304 	and.w	r3, r3, #4
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 8097 	beq.w	8007bc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a96:	2300      	movs	r3, #0
 8007a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a9a:	4b81      	ldr	r3, [pc, #516]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10f      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	60bb      	str	r3, [r7, #8]
 8007aaa:	4b7d      	ldr	r3, [pc, #500]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aae:	4a7c      	ldr	r2, [pc, #496]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ab4:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ab6:	4b7a      	ldr	r3, [pc, #488]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007abe:	60bb      	str	r3, [r7, #8]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ac6:	4b77      	ldr	r3, [pc, #476]	@ (8007ca4 <HAL_RCC_OscConfig+0x474>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d118      	bne.n	8007b04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ad2:	4b74      	ldr	r3, [pc, #464]	@ (8007ca4 <HAL_RCC_OscConfig+0x474>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a73      	ldr	r2, [pc, #460]	@ (8007ca4 <HAL_RCC_OscConfig+0x474>)
 8007ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ade:	f7fe fc23 	bl	8006328 <HAL_GetTick>
 8007ae2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ae4:	e008      	b.n	8007af8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ae6:	f7fe fc1f 	bl	8006328 <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d901      	bls.n	8007af8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e10c      	b.n	8007d12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007af8:	4b6a      	ldr	r3, [pc, #424]	@ (8007ca4 <HAL_RCC_OscConfig+0x474>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d0f0      	beq.n	8007ae6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d106      	bne.n	8007b1a <HAL_RCC_OscConfig+0x2ea>
 8007b0c:	4b64      	ldr	r3, [pc, #400]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b10:	4a63      	ldr	r2, [pc, #396]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007b12:	f043 0301 	orr.w	r3, r3, #1
 8007b16:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b18:	e01c      	b.n	8007b54 <HAL_RCC_OscConfig+0x324>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	2b05      	cmp	r3, #5
 8007b20:	d10c      	bne.n	8007b3c <HAL_RCC_OscConfig+0x30c>
 8007b22:	4b5f      	ldr	r3, [pc, #380]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b26:	4a5e      	ldr	r2, [pc, #376]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007b28:	f043 0304 	orr.w	r3, r3, #4
 8007b2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b2e:	4b5c      	ldr	r3, [pc, #368]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b32:	4a5b      	ldr	r2, [pc, #364]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007b34:	f043 0301 	orr.w	r3, r3, #1
 8007b38:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b3a:	e00b      	b.n	8007b54 <HAL_RCC_OscConfig+0x324>
 8007b3c:	4b58      	ldr	r3, [pc, #352]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007b3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b40:	4a57      	ldr	r2, [pc, #348]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007b42:	f023 0301 	bic.w	r3, r3, #1
 8007b46:	6713      	str	r3, [r2, #112]	@ 0x70
 8007b48:	4b55      	ldr	r3, [pc, #340]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b4c:	4a54      	ldr	r2, [pc, #336]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007b4e:	f023 0304 	bic.w	r3, r3, #4
 8007b52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d015      	beq.n	8007b88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b5c:	f7fe fbe4 	bl	8006328 <HAL_GetTick>
 8007b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b62:	e00a      	b.n	8007b7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b64:	f7fe fbe0 	bl	8006328 <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d901      	bls.n	8007b7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007b76:	2303      	movs	r3, #3
 8007b78:	e0cb      	b.n	8007d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b7a:	4b49      	ldr	r3, [pc, #292]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d0ee      	beq.n	8007b64 <HAL_RCC_OscConfig+0x334>
 8007b86:	e014      	b.n	8007bb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b88:	f7fe fbce 	bl	8006328 <HAL_GetTick>
 8007b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b8e:	e00a      	b.n	8007ba6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b90:	f7fe fbca 	bl	8006328 <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d901      	bls.n	8007ba6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e0b5      	b.n	8007d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007baa:	f003 0302 	and.w	r3, r3, #2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1ee      	bne.n	8007b90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007bb2:	7dfb      	ldrb	r3, [r7, #23]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d105      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bb8:	4b39      	ldr	r3, [pc, #228]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bbc:	4a38      	ldr	r2, [pc, #224]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007bbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bc2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	699b      	ldr	r3, [r3, #24]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 80a1 	beq.w	8007d10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007bce:	4b34      	ldr	r3, [pc, #208]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f003 030c 	and.w	r3, r3, #12
 8007bd6:	2b08      	cmp	r3, #8
 8007bd8:	d05c      	beq.n	8007c94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d141      	bne.n	8007c66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007be2:	4b31      	ldr	r3, [pc, #196]	@ (8007ca8 <HAL_RCC_OscConfig+0x478>)
 8007be4:	2200      	movs	r2, #0
 8007be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007be8:	f7fe fb9e 	bl	8006328 <HAL_GetTick>
 8007bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bee:	e008      	b.n	8007c02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bf0:	f7fe fb9a 	bl	8006328 <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d901      	bls.n	8007c02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e087      	b.n	8007d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c02:	4b27      	ldr	r3, [pc, #156]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1f0      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	69da      	ldr	r2, [r3, #28]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	431a      	orrs	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c1c:	019b      	lsls	r3, r3, #6
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c24:	085b      	lsrs	r3, r3, #1
 8007c26:	3b01      	subs	r3, #1
 8007c28:	041b      	lsls	r3, r3, #16
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c30:	061b      	lsls	r3, r3, #24
 8007c32:	491b      	ldr	r1, [pc, #108]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007c34:	4313      	orrs	r3, r2
 8007c36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c38:	4b1b      	ldr	r3, [pc, #108]	@ (8007ca8 <HAL_RCC_OscConfig+0x478>)
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c3e:	f7fe fb73 	bl	8006328 <HAL_GetTick>
 8007c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c44:	e008      	b.n	8007c58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c46:	f7fe fb6f 	bl	8006328 <HAL_GetTick>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d901      	bls.n	8007c58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e05c      	b.n	8007d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c58:	4b11      	ldr	r3, [pc, #68]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d0f0      	beq.n	8007c46 <HAL_RCC_OscConfig+0x416>
 8007c64:	e054      	b.n	8007d10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c66:	4b10      	ldr	r3, [pc, #64]	@ (8007ca8 <HAL_RCC_OscConfig+0x478>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c6c:	f7fe fb5c 	bl	8006328 <HAL_GetTick>
 8007c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c72:	e008      	b.n	8007c86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c74:	f7fe fb58 	bl	8006328 <HAL_GetTick>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d901      	bls.n	8007c86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e045      	b.n	8007d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c86:	4b06      	ldr	r3, [pc, #24]	@ (8007ca0 <HAL_RCC_OscConfig+0x470>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1f0      	bne.n	8007c74 <HAL_RCC_OscConfig+0x444>
 8007c92:	e03d      	b.n	8007d10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d107      	bne.n	8007cac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e038      	b.n	8007d12 <HAL_RCC_OscConfig+0x4e2>
 8007ca0:	40023800 	.word	0x40023800
 8007ca4:	40007000 	.word	0x40007000
 8007ca8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007cac:	4b1b      	ldr	r3, [pc, #108]	@ (8007d1c <HAL_RCC_OscConfig+0x4ec>)
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d028      	beq.n	8007d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d121      	bne.n	8007d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d11a      	bne.n	8007d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007cdc:	4013      	ands	r3, r2
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007ce2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d111      	bne.n	8007d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cf2:	085b      	lsrs	r3, r3, #1
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d107      	bne.n	8007d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d001      	beq.n	8007d10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e000      	b.n	8007d12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3718      	adds	r7, #24
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	40023800 	.word	0x40023800

08007d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d101      	bne.n	8007d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e0cc      	b.n	8007ece <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d34:	4b68      	ldr	r3, [pc, #416]	@ (8007ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0307 	and.w	r3, r3, #7
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d90c      	bls.n	8007d5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d42:	4b65      	ldr	r3, [pc, #404]	@ (8007ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	b2d2      	uxtb	r2, r2
 8007d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d4a:	4b63      	ldr	r3, [pc, #396]	@ (8007ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 0307 	and.w	r3, r3, #7
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d001      	beq.n	8007d5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	e0b8      	b.n	8007ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f003 0302 	and.w	r3, r3, #2
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d020      	beq.n	8007daa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0304 	and.w	r3, r3, #4
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d005      	beq.n	8007d80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d74:	4b59      	ldr	r3, [pc, #356]	@ (8007edc <HAL_RCC_ClockConfig+0x1bc>)
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	4a58      	ldr	r2, [pc, #352]	@ (8007edc <HAL_RCC_ClockConfig+0x1bc>)
 8007d7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007d7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0308 	and.w	r3, r3, #8
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d005      	beq.n	8007d98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d8c:	4b53      	ldr	r3, [pc, #332]	@ (8007edc <HAL_RCC_ClockConfig+0x1bc>)
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	4a52      	ldr	r2, [pc, #328]	@ (8007edc <HAL_RCC_ClockConfig+0x1bc>)
 8007d92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007d96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d98:	4b50      	ldr	r3, [pc, #320]	@ (8007edc <HAL_RCC_ClockConfig+0x1bc>)
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	494d      	ldr	r1, [pc, #308]	@ (8007edc <HAL_RCC_ClockConfig+0x1bc>)
 8007da6:	4313      	orrs	r3, r2
 8007da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d044      	beq.n	8007e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d107      	bne.n	8007dce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007dbe:	4b47      	ldr	r3, [pc, #284]	@ (8007edc <HAL_RCC_ClockConfig+0x1bc>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d119      	bne.n	8007dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e07f      	b.n	8007ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d003      	beq.n	8007dde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	d107      	bne.n	8007dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dde:	4b3f      	ldr	r3, [pc, #252]	@ (8007edc <HAL_RCC_ClockConfig+0x1bc>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d109      	bne.n	8007dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e06f      	b.n	8007ece <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007dee:	4b3b      	ldr	r3, [pc, #236]	@ (8007edc <HAL_RCC_ClockConfig+0x1bc>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e067      	b.n	8007ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007dfe:	4b37      	ldr	r3, [pc, #220]	@ (8007edc <HAL_RCC_ClockConfig+0x1bc>)
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f023 0203 	bic.w	r2, r3, #3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	4934      	ldr	r1, [pc, #208]	@ (8007edc <HAL_RCC_ClockConfig+0x1bc>)
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e10:	f7fe fa8a 	bl	8006328 <HAL_GetTick>
 8007e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e16:	e00a      	b.n	8007e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e18:	f7fe fa86 	bl	8006328 <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d901      	bls.n	8007e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e04f      	b.n	8007ece <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8007edc <HAL_RCC_ClockConfig+0x1bc>)
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f003 020c 	and.w	r2, r3, #12
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d1eb      	bne.n	8007e18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007e40:	4b25      	ldr	r3, [pc, #148]	@ (8007ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0307 	and.w	r3, r3, #7
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d20c      	bcs.n	8007e68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e4e:	4b22      	ldr	r3, [pc, #136]	@ (8007ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	b2d2      	uxtb	r2, r2
 8007e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e56:	4b20      	ldr	r3, [pc, #128]	@ (8007ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0307 	and.w	r3, r3, #7
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d001      	beq.n	8007e68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e032      	b.n	8007ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0304 	and.w	r3, r3, #4
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d008      	beq.n	8007e86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e74:	4b19      	ldr	r3, [pc, #100]	@ (8007edc <HAL_RCC_ClockConfig+0x1bc>)
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	4916      	ldr	r1, [pc, #88]	@ (8007edc <HAL_RCC_ClockConfig+0x1bc>)
 8007e82:	4313      	orrs	r3, r2
 8007e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f003 0308 	and.w	r3, r3, #8
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d009      	beq.n	8007ea6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e92:	4b12      	ldr	r3, [pc, #72]	@ (8007edc <HAL_RCC_ClockConfig+0x1bc>)
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	00db      	lsls	r3, r3, #3
 8007ea0:	490e      	ldr	r1, [pc, #56]	@ (8007edc <HAL_RCC_ClockConfig+0x1bc>)
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007ea6:	f000 f821 	bl	8007eec <HAL_RCC_GetSysClockFreq>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	4b0b      	ldr	r3, [pc, #44]	@ (8007edc <HAL_RCC_ClockConfig+0x1bc>)
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	091b      	lsrs	r3, r3, #4
 8007eb2:	f003 030f 	and.w	r3, r3, #15
 8007eb6:	490a      	ldr	r1, [pc, #40]	@ (8007ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8007eb8:	5ccb      	ldrb	r3, [r1, r3]
 8007eba:	fa22 f303 	lsr.w	r3, r2, r3
 8007ebe:	4a09      	ldr	r2, [pc, #36]	@ (8007ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8007ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007ec2:	4b09      	ldr	r3, [pc, #36]	@ (8007ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fe f9ea 	bl	80062a0 <HAL_InitTick>

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3710      	adds	r7, #16
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	40023c00 	.word	0x40023c00
 8007edc:	40023800 	.word	0x40023800
 8007ee0:	08008d00 	.word	0x08008d00
 8007ee4:	20000004 	.word	0x20000004
 8007ee8:	2000045c 	.word	0x2000045c

08007eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ef0:	b090      	sub	sp, #64	@ 0x40
 8007ef2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ef8:	2300      	movs	r3, #0
 8007efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007efc:	2300      	movs	r3, #0
 8007efe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007f00:	2300      	movs	r3, #0
 8007f02:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f04:	4b59      	ldr	r3, [pc, #356]	@ (800806c <HAL_RCC_GetSysClockFreq+0x180>)
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f003 030c 	and.w	r3, r3, #12
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d00d      	beq.n	8007f2c <HAL_RCC_GetSysClockFreq+0x40>
 8007f10:	2b08      	cmp	r3, #8
 8007f12:	f200 80a1 	bhi.w	8008058 <HAL_RCC_GetSysClockFreq+0x16c>
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d002      	beq.n	8007f20 <HAL_RCC_GetSysClockFreq+0x34>
 8007f1a:	2b04      	cmp	r3, #4
 8007f1c:	d003      	beq.n	8007f26 <HAL_RCC_GetSysClockFreq+0x3a>
 8007f1e:	e09b      	b.n	8008058 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f20:	4b53      	ldr	r3, [pc, #332]	@ (8008070 <HAL_RCC_GetSysClockFreq+0x184>)
 8007f22:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8007f24:	e09b      	b.n	800805e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f26:	4b53      	ldr	r3, [pc, #332]	@ (8008074 <HAL_RCC_GetSysClockFreq+0x188>)
 8007f28:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007f2a:	e098      	b.n	800805e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f2c:	4b4f      	ldr	r3, [pc, #316]	@ (800806c <HAL_RCC_GetSysClockFreq+0x180>)
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f34:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f36:	4b4d      	ldr	r3, [pc, #308]	@ (800806c <HAL_RCC_GetSysClockFreq+0x180>)
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d028      	beq.n	8007f94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f42:	4b4a      	ldr	r3, [pc, #296]	@ (800806c <HAL_RCC_GetSysClockFreq+0x180>)
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	099b      	lsrs	r3, r3, #6
 8007f48:	2200      	movs	r2, #0
 8007f4a:	623b      	str	r3, [r7, #32]
 8007f4c:	627a      	str	r2, [r7, #36]	@ 0x24
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007f54:	2100      	movs	r1, #0
 8007f56:	4b47      	ldr	r3, [pc, #284]	@ (8008074 <HAL_RCC_GetSysClockFreq+0x188>)
 8007f58:	fb03 f201 	mul.w	r2, r3, r1
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	fb00 f303 	mul.w	r3, r0, r3
 8007f62:	4413      	add	r3, r2
 8007f64:	4a43      	ldr	r2, [pc, #268]	@ (8008074 <HAL_RCC_GetSysClockFreq+0x188>)
 8007f66:	fba0 1202 	umull	r1, r2, r0, r2
 8007f6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f6c:	460a      	mov	r2, r1
 8007f6e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007f70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f72:	4413      	add	r3, r2
 8007f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f78:	2200      	movs	r2, #0
 8007f7a:	61bb      	str	r3, [r7, #24]
 8007f7c:	61fa      	str	r2, [r7, #28]
 8007f7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007f86:	f7f8 f91f 	bl	80001c8 <__aeabi_uldivmod>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	4613      	mov	r3, r2
 8007f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f92:	e053      	b.n	800803c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f94:	4b35      	ldr	r3, [pc, #212]	@ (800806c <HAL_RCC_GetSysClockFreq+0x180>)
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	099b      	lsrs	r3, r3, #6
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	613b      	str	r3, [r7, #16]
 8007f9e:	617a      	str	r2, [r7, #20]
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007fa6:	f04f 0b00 	mov.w	fp, #0
 8007faa:	4652      	mov	r2, sl
 8007fac:	465b      	mov	r3, fp
 8007fae:	f04f 0000 	mov.w	r0, #0
 8007fb2:	f04f 0100 	mov.w	r1, #0
 8007fb6:	0159      	lsls	r1, r3, #5
 8007fb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fbc:	0150      	lsls	r0, r2, #5
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	ebb2 080a 	subs.w	r8, r2, sl
 8007fc6:	eb63 090b 	sbc.w	r9, r3, fp
 8007fca:	f04f 0200 	mov.w	r2, #0
 8007fce:	f04f 0300 	mov.w	r3, #0
 8007fd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007fd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007fda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007fde:	ebb2 0408 	subs.w	r4, r2, r8
 8007fe2:	eb63 0509 	sbc.w	r5, r3, r9
 8007fe6:	f04f 0200 	mov.w	r2, #0
 8007fea:	f04f 0300 	mov.w	r3, #0
 8007fee:	00eb      	lsls	r3, r5, #3
 8007ff0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ff4:	00e2      	lsls	r2, r4, #3
 8007ff6:	4614      	mov	r4, r2
 8007ff8:	461d      	mov	r5, r3
 8007ffa:	eb14 030a 	adds.w	r3, r4, sl
 8007ffe:	603b      	str	r3, [r7, #0]
 8008000:	eb45 030b 	adc.w	r3, r5, fp
 8008004:	607b      	str	r3, [r7, #4]
 8008006:	f04f 0200 	mov.w	r2, #0
 800800a:	f04f 0300 	mov.w	r3, #0
 800800e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008012:	4629      	mov	r1, r5
 8008014:	028b      	lsls	r3, r1, #10
 8008016:	4621      	mov	r1, r4
 8008018:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800801c:	4621      	mov	r1, r4
 800801e:	028a      	lsls	r2, r1, #10
 8008020:	4610      	mov	r0, r2
 8008022:	4619      	mov	r1, r3
 8008024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008026:	2200      	movs	r2, #0
 8008028:	60bb      	str	r3, [r7, #8]
 800802a:	60fa      	str	r2, [r7, #12]
 800802c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008030:	f7f8 f8ca 	bl	80001c8 <__aeabi_uldivmod>
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	4613      	mov	r3, r2
 800803a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800803c:	4b0b      	ldr	r3, [pc, #44]	@ (800806c <HAL_RCC_GetSysClockFreq+0x180>)
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	0c1b      	lsrs	r3, r3, #16
 8008042:	f003 0303 	and.w	r3, r3, #3
 8008046:	3301      	adds	r3, #1
 8008048:	005b      	lsls	r3, r3, #1
 800804a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800804c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800804e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008050:	fbb2 f3f3 	udiv	r3, r2, r3
 8008054:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008056:	e002      	b.n	800805e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008058:	4b05      	ldr	r3, [pc, #20]	@ (8008070 <HAL_RCC_GetSysClockFreq+0x184>)
 800805a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800805c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800805e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008060:	4618      	mov	r0, r3
 8008062:	3740      	adds	r7, #64	@ 0x40
 8008064:	46bd      	mov	sp, r7
 8008066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800806a:	bf00      	nop
 800806c:	40023800 	.word	0x40023800
 8008070:	00f42400 	.word	0x00f42400
 8008074:	017d7840 	.word	0x017d7840

08008078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008078:	b480      	push	{r7}
 800807a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800807c:	4b03      	ldr	r3, [pc, #12]	@ (800808c <HAL_RCC_GetHCLKFreq+0x14>)
 800807e:	681b      	ldr	r3, [r3, #0]
}
 8008080:	4618      	mov	r0, r3
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	20000004 	.word	0x20000004

08008090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008094:	f7ff fff0 	bl	8008078 <HAL_RCC_GetHCLKFreq>
 8008098:	4602      	mov	r2, r0
 800809a:	4b05      	ldr	r3, [pc, #20]	@ (80080b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	0a9b      	lsrs	r3, r3, #10
 80080a0:	f003 0307 	and.w	r3, r3, #7
 80080a4:	4903      	ldr	r1, [pc, #12]	@ (80080b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080a6:	5ccb      	ldrb	r3, [r1, r3]
 80080a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	bd80      	pop	{r7, pc}
 80080b0:	40023800 	.word	0x40023800
 80080b4:	08008d10 	.word	0x08008d10

080080b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d101      	bne.n	80080ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e041      	b.n	800814e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d106      	bne.n	80080e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7f8 fdf8 	bl	8000cd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2202      	movs	r2, #2
 80080e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3304      	adds	r3, #4
 80080f4:	4619      	mov	r1, r3
 80080f6:	4610      	mov	r0, r2
 80080f8:	f000 face 	bl	8008698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b01      	cmp	r3, #1
 800816a:	d001      	beq.n	8008170 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e04e      	b.n	800820e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2202      	movs	r2, #2
 8008174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68da      	ldr	r2, [r3, #12]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f042 0201 	orr.w	r2, r2, #1
 8008186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a23      	ldr	r2, [pc, #140]	@ (800821c <HAL_TIM_Base_Start_IT+0xc4>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d022      	beq.n	80081d8 <HAL_TIM_Base_Start_IT+0x80>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800819a:	d01d      	beq.n	80081d8 <HAL_TIM_Base_Start_IT+0x80>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a1f      	ldr	r2, [pc, #124]	@ (8008220 <HAL_TIM_Base_Start_IT+0xc8>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d018      	beq.n	80081d8 <HAL_TIM_Base_Start_IT+0x80>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a1e      	ldr	r2, [pc, #120]	@ (8008224 <HAL_TIM_Base_Start_IT+0xcc>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d013      	beq.n	80081d8 <HAL_TIM_Base_Start_IT+0x80>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a1c      	ldr	r2, [pc, #112]	@ (8008228 <HAL_TIM_Base_Start_IT+0xd0>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d00e      	beq.n	80081d8 <HAL_TIM_Base_Start_IT+0x80>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a1b      	ldr	r2, [pc, #108]	@ (800822c <HAL_TIM_Base_Start_IT+0xd4>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d009      	beq.n	80081d8 <HAL_TIM_Base_Start_IT+0x80>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a19      	ldr	r2, [pc, #100]	@ (8008230 <HAL_TIM_Base_Start_IT+0xd8>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d004      	beq.n	80081d8 <HAL_TIM_Base_Start_IT+0x80>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a18      	ldr	r2, [pc, #96]	@ (8008234 <HAL_TIM_Base_Start_IT+0xdc>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d111      	bne.n	80081fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	f003 0307 	and.w	r3, r3, #7
 80081e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2b06      	cmp	r3, #6
 80081e8:	d010      	beq.n	800820c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f042 0201 	orr.w	r2, r2, #1
 80081f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081fa:	e007      	b.n	800820c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f042 0201 	orr.w	r2, r2, #1
 800820a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	40010000 	.word	0x40010000
 8008220:	40000400 	.word	0x40000400
 8008224:	40000800 	.word	0x40000800
 8008228:	40000c00 	.word	0x40000c00
 800822c:	40010400 	.word	0x40010400
 8008230:	40014000 	.word	0x40014000
 8008234:	40001800 	.word	0x40001800

08008238 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68da      	ldr	r2, [r3, #12]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f022 0201 	bic.w	r2, r2, #1
 800824e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6a1a      	ldr	r2, [r3, #32]
 8008256:	f241 1311 	movw	r3, #4369	@ 0x1111
 800825a:	4013      	ands	r3, r2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10f      	bne.n	8008280 <HAL_TIM_Base_Stop_IT+0x48>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6a1a      	ldr	r2, [r3, #32]
 8008266:	f240 4344 	movw	r3, #1092	@ 0x444
 800826a:	4013      	ands	r3, r2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d107      	bne.n	8008280 <HAL_TIM_Base_Stop_IT+0x48>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f022 0201 	bic.w	r2, r2, #1
 800827e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b082      	sub	sp, #8
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	691b      	ldr	r3, [r3, #16]
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d122      	bne.n	80082f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	f003 0302 	and.w	r3, r3, #2
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	d11b      	bne.n	80082f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f06f 0202 	mvn.w	r2, #2
 80082c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	f003 0303 	and.w	r3, r3, #3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d003      	beq.n	80082e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f9bf 	bl	800865c <HAL_TIM_IC_CaptureCallback>
 80082de:	e005      	b.n	80082ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f9b1 	bl	8008648 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f9c2 	bl	8008670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b04      	cmp	r3, #4
 80082fe:	d122      	bne.n	8008346 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	f003 0304 	and.w	r3, r3, #4
 800830a:	2b04      	cmp	r3, #4
 800830c:	d11b      	bne.n	8008346 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f06f 0204 	mvn.w	r2, #4
 8008316:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2202      	movs	r2, #2
 800831c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008328:	2b00      	cmp	r3, #0
 800832a:	d003      	beq.n	8008334 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f995 	bl	800865c <HAL_TIM_IC_CaptureCallback>
 8008332:	e005      	b.n	8008340 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 f987 	bl	8008648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 f998 	bl	8008670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	f003 0308 	and.w	r3, r3, #8
 8008350:	2b08      	cmp	r3, #8
 8008352:	d122      	bne.n	800839a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	f003 0308 	and.w	r3, r3, #8
 800835e:	2b08      	cmp	r3, #8
 8008360:	d11b      	bne.n	800839a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f06f 0208 	mvn.w	r2, #8
 800836a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2204      	movs	r2, #4
 8008370:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	f003 0303 	and.w	r3, r3, #3
 800837c:	2b00      	cmp	r3, #0
 800837e:	d003      	beq.n	8008388 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f96b 	bl	800865c <HAL_TIM_IC_CaptureCallback>
 8008386:	e005      	b.n	8008394 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f95d 	bl	8008648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f96e 	bl	8008670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	f003 0310 	and.w	r3, r3, #16
 80083a4:	2b10      	cmp	r3, #16
 80083a6:	d122      	bne.n	80083ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	f003 0310 	and.w	r3, r3, #16
 80083b2:	2b10      	cmp	r3, #16
 80083b4:	d11b      	bne.n	80083ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f06f 0210 	mvn.w	r2, #16
 80083be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2208      	movs	r2, #8
 80083c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d003      	beq.n	80083dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f941 	bl	800865c <HAL_TIM_IC_CaptureCallback>
 80083da:	e005      	b.n	80083e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f933 	bl	8008648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f944 	bl	8008670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d10e      	bne.n	800841a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	2b01      	cmp	r3, #1
 8008408:	d107      	bne.n	800841a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f06f 0201 	mvn.w	r2, #1
 8008412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f90d 	bl	8008634 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008424:	2b80      	cmp	r3, #128	@ 0x80
 8008426:	d10e      	bne.n	8008446 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008432:	2b80      	cmp	r3, #128	@ 0x80
 8008434:	d107      	bne.n	8008446 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800843e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fae9 	bl	8008a18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008450:	2b40      	cmp	r3, #64	@ 0x40
 8008452:	d10e      	bne.n	8008472 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800845e:	2b40      	cmp	r3, #64	@ 0x40
 8008460:	d107      	bne.n	8008472 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800846a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f909 	bl	8008684 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	f003 0320 	and.w	r3, r3, #32
 800847c:	2b20      	cmp	r3, #32
 800847e:	d10e      	bne.n	800849e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	f003 0320 	and.w	r3, r3, #32
 800848a:	2b20      	cmp	r3, #32
 800848c:	d107      	bne.n	800849e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f06f 0220 	mvn.w	r2, #32
 8008496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 fab3 	bl	8008a04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800849e:	bf00      	nop
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b084      	sub	sp, #16
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
 80084ae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084b0:	2300      	movs	r3, #0
 80084b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d101      	bne.n	80084c2 <HAL_TIM_ConfigClockSource+0x1c>
 80084be:	2302      	movs	r3, #2
 80084c0:	e0b4      	b.n	800862c <HAL_TIM_ConfigClockSource+0x186>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2202      	movs	r2, #2
 80084ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80084e0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80084e8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084fa:	d03e      	beq.n	800857a <HAL_TIM_ConfigClockSource+0xd4>
 80084fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008500:	f200 8087 	bhi.w	8008612 <HAL_TIM_ConfigClockSource+0x16c>
 8008504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008508:	f000 8086 	beq.w	8008618 <HAL_TIM_ConfigClockSource+0x172>
 800850c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008510:	d87f      	bhi.n	8008612 <HAL_TIM_ConfigClockSource+0x16c>
 8008512:	2b70      	cmp	r3, #112	@ 0x70
 8008514:	d01a      	beq.n	800854c <HAL_TIM_ConfigClockSource+0xa6>
 8008516:	2b70      	cmp	r3, #112	@ 0x70
 8008518:	d87b      	bhi.n	8008612 <HAL_TIM_ConfigClockSource+0x16c>
 800851a:	2b60      	cmp	r3, #96	@ 0x60
 800851c:	d050      	beq.n	80085c0 <HAL_TIM_ConfigClockSource+0x11a>
 800851e:	2b60      	cmp	r3, #96	@ 0x60
 8008520:	d877      	bhi.n	8008612 <HAL_TIM_ConfigClockSource+0x16c>
 8008522:	2b50      	cmp	r3, #80	@ 0x50
 8008524:	d03c      	beq.n	80085a0 <HAL_TIM_ConfigClockSource+0xfa>
 8008526:	2b50      	cmp	r3, #80	@ 0x50
 8008528:	d873      	bhi.n	8008612 <HAL_TIM_ConfigClockSource+0x16c>
 800852a:	2b40      	cmp	r3, #64	@ 0x40
 800852c:	d058      	beq.n	80085e0 <HAL_TIM_ConfigClockSource+0x13a>
 800852e:	2b40      	cmp	r3, #64	@ 0x40
 8008530:	d86f      	bhi.n	8008612 <HAL_TIM_ConfigClockSource+0x16c>
 8008532:	2b30      	cmp	r3, #48	@ 0x30
 8008534:	d064      	beq.n	8008600 <HAL_TIM_ConfigClockSource+0x15a>
 8008536:	2b30      	cmp	r3, #48	@ 0x30
 8008538:	d86b      	bhi.n	8008612 <HAL_TIM_ConfigClockSource+0x16c>
 800853a:	2b20      	cmp	r3, #32
 800853c:	d060      	beq.n	8008600 <HAL_TIM_ConfigClockSource+0x15a>
 800853e:	2b20      	cmp	r3, #32
 8008540:	d867      	bhi.n	8008612 <HAL_TIM_ConfigClockSource+0x16c>
 8008542:	2b00      	cmp	r3, #0
 8008544:	d05c      	beq.n	8008600 <HAL_TIM_ConfigClockSource+0x15a>
 8008546:	2b10      	cmp	r3, #16
 8008548:	d05a      	beq.n	8008600 <HAL_TIM_ConfigClockSource+0x15a>
 800854a:	e062      	b.n	8008612 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6818      	ldr	r0, [r3, #0]
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	6899      	ldr	r1, [r3, #8]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	f000 f9b6 	bl	80088cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	689b      	ldr	r3, [r3, #8]
 8008566:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800856e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	609a      	str	r2, [r3, #8]
      break;
 8008578:	e04f      	b.n	800861a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6818      	ldr	r0, [r3, #0]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	6899      	ldr	r1, [r3, #8]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	f000 f99f 	bl	80088cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	689a      	ldr	r2, [r3, #8]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800859c:	609a      	str	r2, [r3, #8]
      break;
 800859e:	e03c      	b.n	800861a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6818      	ldr	r0, [r3, #0]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	6859      	ldr	r1, [r3, #4]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	461a      	mov	r2, r3
 80085ae:	f000 f913 	bl	80087d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2150      	movs	r1, #80	@ 0x50
 80085b8:	4618      	mov	r0, r3
 80085ba:	f000 f96c 	bl	8008896 <TIM_ITRx_SetConfig>
      break;
 80085be:	e02c      	b.n	800861a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6818      	ldr	r0, [r3, #0]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	6859      	ldr	r1, [r3, #4]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	461a      	mov	r2, r3
 80085ce:	f000 f932 	bl	8008836 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2160      	movs	r1, #96	@ 0x60
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 f95c 	bl	8008896 <TIM_ITRx_SetConfig>
      break;
 80085de:	e01c      	b.n	800861a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6818      	ldr	r0, [r3, #0]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	6859      	ldr	r1, [r3, #4]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	461a      	mov	r2, r3
 80085ee:	f000 f8f3 	bl	80087d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2140      	movs	r1, #64	@ 0x40
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 f94c 	bl	8008896 <TIM_ITRx_SetConfig>
      break;
 80085fe:	e00c      	b.n	800861a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4619      	mov	r1, r3
 800860a:	4610      	mov	r0, r2
 800860c:	f000 f943 	bl	8008896 <TIM_ITRx_SetConfig>
      break;
 8008610:	e003      	b.n	800861a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	73fb      	strb	r3, [r7, #15]
      break;
 8008616:	e000      	b.n	800861a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008618:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800862a:	7bfb      	ldrb	r3, [r7, #15]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008650:	bf00      	nop
 8008652:	370c      	adds	r7, #12
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a40      	ldr	r2, [pc, #256]	@ (80087ac <TIM_Base_SetConfig+0x114>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d013      	beq.n	80086d8 <TIM_Base_SetConfig+0x40>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086b6:	d00f      	beq.n	80086d8 <TIM_Base_SetConfig+0x40>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	4a3d      	ldr	r2, [pc, #244]	@ (80087b0 <TIM_Base_SetConfig+0x118>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d00b      	beq.n	80086d8 <TIM_Base_SetConfig+0x40>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a3c      	ldr	r2, [pc, #240]	@ (80087b4 <TIM_Base_SetConfig+0x11c>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d007      	beq.n	80086d8 <TIM_Base_SetConfig+0x40>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a3b      	ldr	r2, [pc, #236]	@ (80087b8 <TIM_Base_SetConfig+0x120>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d003      	beq.n	80086d8 <TIM_Base_SetConfig+0x40>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a3a      	ldr	r2, [pc, #232]	@ (80087bc <TIM_Base_SetConfig+0x124>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d108      	bne.n	80086ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4a2f      	ldr	r2, [pc, #188]	@ (80087ac <TIM_Base_SetConfig+0x114>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d02b      	beq.n	800874a <TIM_Base_SetConfig+0xb2>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086f8:	d027      	beq.n	800874a <TIM_Base_SetConfig+0xb2>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4a2c      	ldr	r2, [pc, #176]	@ (80087b0 <TIM_Base_SetConfig+0x118>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d023      	beq.n	800874a <TIM_Base_SetConfig+0xb2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a2b      	ldr	r2, [pc, #172]	@ (80087b4 <TIM_Base_SetConfig+0x11c>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d01f      	beq.n	800874a <TIM_Base_SetConfig+0xb2>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a2a      	ldr	r2, [pc, #168]	@ (80087b8 <TIM_Base_SetConfig+0x120>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d01b      	beq.n	800874a <TIM_Base_SetConfig+0xb2>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a29      	ldr	r2, [pc, #164]	@ (80087bc <TIM_Base_SetConfig+0x124>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d017      	beq.n	800874a <TIM_Base_SetConfig+0xb2>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a28      	ldr	r2, [pc, #160]	@ (80087c0 <TIM_Base_SetConfig+0x128>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d013      	beq.n	800874a <TIM_Base_SetConfig+0xb2>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a27      	ldr	r2, [pc, #156]	@ (80087c4 <TIM_Base_SetConfig+0x12c>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d00f      	beq.n	800874a <TIM_Base_SetConfig+0xb2>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a26      	ldr	r2, [pc, #152]	@ (80087c8 <TIM_Base_SetConfig+0x130>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d00b      	beq.n	800874a <TIM_Base_SetConfig+0xb2>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a25      	ldr	r2, [pc, #148]	@ (80087cc <TIM_Base_SetConfig+0x134>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d007      	beq.n	800874a <TIM_Base_SetConfig+0xb2>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a24      	ldr	r2, [pc, #144]	@ (80087d0 <TIM_Base_SetConfig+0x138>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d003      	beq.n	800874a <TIM_Base_SetConfig+0xb2>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a23      	ldr	r2, [pc, #140]	@ (80087d4 <TIM_Base_SetConfig+0x13c>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d108      	bne.n	800875c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008750:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	4313      	orrs	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	4313      	orrs	r3, r2
 8008768:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	689a      	ldr	r2, [r3, #8]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	4a0a      	ldr	r2, [pc, #40]	@ (80087ac <TIM_Base_SetConfig+0x114>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d003      	beq.n	8008790 <TIM_Base_SetConfig+0xf8>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a0c      	ldr	r2, [pc, #48]	@ (80087bc <TIM_Base_SetConfig+0x124>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d103      	bne.n	8008798 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	691a      	ldr	r2, [r3, #16]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	615a      	str	r2, [r3, #20]
}
 800879e:	bf00      	nop
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	40010000 	.word	0x40010000
 80087b0:	40000400 	.word	0x40000400
 80087b4:	40000800 	.word	0x40000800
 80087b8:	40000c00 	.word	0x40000c00
 80087bc:	40010400 	.word	0x40010400
 80087c0:	40014000 	.word	0x40014000
 80087c4:	40014400 	.word	0x40014400
 80087c8:	40014800 	.word	0x40014800
 80087cc:	40001800 	.word	0x40001800
 80087d0:	40001c00 	.word	0x40001c00
 80087d4:	40002000 	.word	0x40002000

080087d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087d8:	b480      	push	{r7}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6a1b      	ldr	r3, [r3, #32]
 80087e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	f023 0201 	bic.w	r2, r3, #1
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	011b      	lsls	r3, r3, #4
 8008808:	693a      	ldr	r2, [r7, #16]
 800880a:	4313      	orrs	r3, r2
 800880c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	f023 030a 	bic.w	r3, r3, #10
 8008814:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	4313      	orrs	r3, r2
 800881c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	693a      	ldr	r2, [r7, #16]
 8008822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	621a      	str	r2, [r3, #32]
}
 800882a:	bf00      	nop
 800882c:	371c      	adds	r7, #28
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008836:	b480      	push	{r7}
 8008838:	b087      	sub	sp, #28
 800883a:	af00      	add	r7, sp, #0
 800883c:	60f8      	str	r0, [r7, #12]
 800883e:	60b9      	str	r1, [r7, #8]
 8008840:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	f023 0210 	bic.w	r2, r3, #16
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6a1b      	ldr	r3, [r3, #32]
 8008858:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008860:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	031b      	lsls	r3, r3, #12
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	4313      	orrs	r3, r2
 800886a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008872:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	011b      	lsls	r3, r3, #4
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	4313      	orrs	r3, r2
 800887c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	621a      	str	r2, [r3, #32]
}
 800888a:	bf00      	nop
 800888c:	371c      	adds	r7, #28
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008896:	b480      	push	{r7}
 8008898:	b085      	sub	sp, #20
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	f043 0307 	orr.w	r3, r3, #7
 80088b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	609a      	str	r2, [r3, #8]
}
 80088c0:	bf00      	nop
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b087      	sub	sp, #28
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	607a      	str	r2, [r7, #4]
 80088d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80088e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	021a      	lsls	r2, r3, #8
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	431a      	orrs	r2, r3
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	609a      	str	r2, [r3, #8]
}
 8008900:	bf00      	nop
 8008902:	371c      	adds	r7, #28
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800891c:	2b01      	cmp	r3, #1
 800891e:	d101      	bne.n	8008924 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008920:	2302      	movs	r3, #2
 8008922:	e05a      	b.n	80089da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2202      	movs	r2, #2
 8008930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800894a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	4313      	orrs	r3, r2
 8008954:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a21      	ldr	r2, [pc, #132]	@ (80089e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d022      	beq.n	80089ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008970:	d01d      	beq.n	80089ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a1d      	ldr	r2, [pc, #116]	@ (80089ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d018      	beq.n	80089ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a1b      	ldr	r2, [pc, #108]	@ (80089f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d013      	beq.n	80089ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a1a      	ldr	r2, [pc, #104]	@ (80089f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d00e      	beq.n	80089ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a18      	ldr	r2, [pc, #96]	@ (80089f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d009      	beq.n	80089ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a17      	ldr	r2, [pc, #92]	@ (80089fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d004      	beq.n	80089ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a15      	ldr	r2, [pc, #84]	@ (8008a00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d10c      	bne.n	80089c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	4313      	orrs	r3, r2
 80089be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	40010000 	.word	0x40010000
 80089ec:	40000400 	.word	0x40000400
 80089f0:	40000800 	.word	0x40000800
 80089f4:	40000c00 	.word	0x40000c00
 80089f8:	40010400 	.word	0x40010400
 80089fc:	40014000 	.word	0x40014000
 8008a00:	40001800 	.word	0x40001800

08008a04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a0c:	bf00      	nop
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008a20:	bf00      	nop
 8008a22:	370c      	adds	r7, #12
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <malloc>:
 8008a2c:	4b02      	ldr	r3, [pc, #8]	@ (8008a38 <malloc+0xc>)
 8008a2e:	4601      	mov	r1, r0
 8008a30:	6818      	ldr	r0, [r3, #0]
 8008a32:	f000 b82d 	b.w	8008a90 <_malloc_r>
 8008a36:	bf00      	nop
 8008a38:	20000464 	.word	0x20000464

08008a3c <free>:
 8008a3c:	4b02      	ldr	r3, [pc, #8]	@ (8008a48 <free+0xc>)
 8008a3e:	4601      	mov	r1, r0
 8008a40:	6818      	ldr	r0, [r3, #0]
 8008a42:	f000 b903 	b.w	8008c4c <_free_r>
 8008a46:	bf00      	nop
 8008a48:	20000464 	.word	0x20000464

08008a4c <sbrk_aligned>:
 8008a4c:	b570      	push	{r4, r5, r6, lr}
 8008a4e:	4e0f      	ldr	r6, [pc, #60]	@ (8008a8c <sbrk_aligned+0x40>)
 8008a50:	460c      	mov	r4, r1
 8008a52:	6831      	ldr	r1, [r6, #0]
 8008a54:	4605      	mov	r5, r0
 8008a56:	b911      	cbnz	r1, 8008a5e <sbrk_aligned+0x12>
 8008a58:	f000 f8ae 	bl	8008bb8 <_sbrk_r>
 8008a5c:	6030      	str	r0, [r6, #0]
 8008a5e:	4621      	mov	r1, r4
 8008a60:	4628      	mov	r0, r5
 8008a62:	f000 f8a9 	bl	8008bb8 <_sbrk_r>
 8008a66:	1c43      	adds	r3, r0, #1
 8008a68:	d103      	bne.n	8008a72 <sbrk_aligned+0x26>
 8008a6a:	f04f 34ff 	mov.w	r4, #4294967295
 8008a6e:	4620      	mov	r0, r4
 8008a70:	bd70      	pop	{r4, r5, r6, pc}
 8008a72:	1cc4      	adds	r4, r0, #3
 8008a74:	f024 0403 	bic.w	r4, r4, #3
 8008a78:	42a0      	cmp	r0, r4
 8008a7a:	d0f8      	beq.n	8008a6e <sbrk_aligned+0x22>
 8008a7c:	1a21      	subs	r1, r4, r0
 8008a7e:	4628      	mov	r0, r5
 8008a80:	f000 f89a 	bl	8008bb8 <_sbrk_r>
 8008a84:	3001      	adds	r0, #1
 8008a86:	d1f2      	bne.n	8008a6e <sbrk_aligned+0x22>
 8008a88:	e7ef      	b.n	8008a6a <sbrk_aligned+0x1e>
 8008a8a:	bf00      	nop
 8008a8c:	200021c0 	.word	0x200021c0

08008a90 <_malloc_r>:
 8008a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a94:	1ccd      	adds	r5, r1, #3
 8008a96:	f025 0503 	bic.w	r5, r5, #3
 8008a9a:	3508      	adds	r5, #8
 8008a9c:	2d0c      	cmp	r5, #12
 8008a9e:	bf38      	it	cc
 8008aa0:	250c      	movcc	r5, #12
 8008aa2:	2d00      	cmp	r5, #0
 8008aa4:	4606      	mov	r6, r0
 8008aa6:	db01      	blt.n	8008aac <_malloc_r+0x1c>
 8008aa8:	42a9      	cmp	r1, r5
 8008aaa:	d904      	bls.n	8008ab6 <_malloc_r+0x26>
 8008aac:	230c      	movs	r3, #12
 8008aae:	6033      	str	r3, [r6, #0]
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ab6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b8c <_malloc_r+0xfc>
 8008aba:	f000 f869 	bl	8008b90 <__malloc_lock>
 8008abe:	f8d8 3000 	ldr.w	r3, [r8]
 8008ac2:	461c      	mov	r4, r3
 8008ac4:	bb44      	cbnz	r4, 8008b18 <_malloc_r+0x88>
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f7ff ffbf 	bl	8008a4c <sbrk_aligned>
 8008ace:	1c43      	adds	r3, r0, #1
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	d158      	bne.n	8008b86 <_malloc_r+0xf6>
 8008ad4:	f8d8 4000 	ldr.w	r4, [r8]
 8008ad8:	4627      	mov	r7, r4
 8008ada:	2f00      	cmp	r7, #0
 8008adc:	d143      	bne.n	8008b66 <_malloc_r+0xd6>
 8008ade:	2c00      	cmp	r4, #0
 8008ae0:	d04b      	beq.n	8008b7a <_malloc_r+0xea>
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	4639      	mov	r1, r7
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	eb04 0903 	add.w	r9, r4, r3
 8008aec:	f000 f864 	bl	8008bb8 <_sbrk_r>
 8008af0:	4581      	cmp	r9, r0
 8008af2:	d142      	bne.n	8008b7a <_malloc_r+0xea>
 8008af4:	6821      	ldr	r1, [r4, #0]
 8008af6:	1a6d      	subs	r5, r5, r1
 8008af8:	4629      	mov	r1, r5
 8008afa:	4630      	mov	r0, r6
 8008afc:	f7ff ffa6 	bl	8008a4c <sbrk_aligned>
 8008b00:	3001      	adds	r0, #1
 8008b02:	d03a      	beq.n	8008b7a <_malloc_r+0xea>
 8008b04:	6823      	ldr	r3, [r4, #0]
 8008b06:	442b      	add	r3, r5
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	bb62      	cbnz	r2, 8008b6c <_malloc_r+0xdc>
 8008b12:	f8c8 7000 	str.w	r7, [r8]
 8008b16:	e00f      	b.n	8008b38 <_malloc_r+0xa8>
 8008b18:	6822      	ldr	r2, [r4, #0]
 8008b1a:	1b52      	subs	r2, r2, r5
 8008b1c:	d420      	bmi.n	8008b60 <_malloc_r+0xd0>
 8008b1e:	2a0b      	cmp	r2, #11
 8008b20:	d917      	bls.n	8008b52 <_malloc_r+0xc2>
 8008b22:	1961      	adds	r1, r4, r5
 8008b24:	42a3      	cmp	r3, r4
 8008b26:	6025      	str	r5, [r4, #0]
 8008b28:	bf18      	it	ne
 8008b2a:	6059      	strne	r1, [r3, #4]
 8008b2c:	6863      	ldr	r3, [r4, #4]
 8008b2e:	bf08      	it	eq
 8008b30:	f8c8 1000 	streq.w	r1, [r8]
 8008b34:	5162      	str	r2, [r4, r5]
 8008b36:	604b      	str	r3, [r1, #4]
 8008b38:	4630      	mov	r0, r6
 8008b3a:	f000 f82f 	bl	8008b9c <__malloc_unlock>
 8008b3e:	f104 000b 	add.w	r0, r4, #11
 8008b42:	1d23      	adds	r3, r4, #4
 8008b44:	f020 0007 	bic.w	r0, r0, #7
 8008b48:	1ac2      	subs	r2, r0, r3
 8008b4a:	bf1c      	itt	ne
 8008b4c:	1a1b      	subne	r3, r3, r0
 8008b4e:	50a3      	strne	r3, [r4, r2]
 8008b50:	e7af      	b.n	8008ab2 <_malloc_r+0x22>
 8008b52:	6862      	ldr	r2, [r4, #4]
 8008b54:	42a3      	cmp	r3, r4
 8008b56:	bf0c      	ite	eq
 8008b58:	f8c8 2000 	streq.w	r2, [r8]
 8008b5c:	605a      	strne	r2, [r3, #4]
 8008b5e:	e7eb      	b.n	8008b38 <_malloc_r+0xa8>
 8008b60:	4623      	mov	r3, r4
 8008b62:	6864      	ldr	r4, [r4, #4]
 8008b64:	e7ae      	b.n	8008ac4 <_malloc_r+0x34>
 8008b66:	463c      	mov	r4, r7
 8008b68:	687f      	ldr	r7, [r7, #4]
 8008b6a:	e7b6      	b.n	8008ada <_malloc_r+0x4a>
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	42a3      	cmp	r3, r4
 8008b72:	d1fb      	bne.n	8008b6c <_malloc_r+0xdc>
 8008b74:	2300      	movs	r3, #0
 8008b76:	6053      	str	r3, [r2, #4]
 8008b78:	e7de      	b.n	8008b38 <_malloc_r+0xa8>
 8008b7a:	230c      	movs	r3, #12
 8008b7c:	6033      	str	r3, [r6, #0]
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f000 f80c 	bl	8008b9c <__malloc_unlock>
 8008b84:	e794      	b.n	8008ab0 <_malloc_r+0x20>
 8008b86:	6005      	str	r5, [r0, #0]
 8008b88:	e7d6      	b.n	8008b38 <_malloc_r+0xa8>
 8008b8a:	bf00      	nop
 8008b8c:	200021c4 	.word	0x200021c4

08008b90 <__malloc_lock>:
 8008b90:	4801      	ldr	r0, [pc, #4]	@ (8008b98 <__malloc_lock+0x8>)
 8008b92:	f000 b84b 	b.w	8008c2c <__retarget_lock_acquire_recursive>
 8008b96:	bf00      	nop
 8008b98:	20002304 	.word	0x20002304

08008b9c <__malloc_unlock>:
 8008b9c:	4801      	ldr	r0, [pc, #4]	@ (8008ba4 <__malloc_unlock+0x8>)
 8008b9e:	f000 b846 	b.w	8008c2e <__retarget_lock_release_recursive>
 8008ba2:	bf00      	nop
 8008ba4:	20002304 	.word	0x20002304

08008ba8 <memset>:
 8008ba8:	4402      	add	r2, r0
 8008baa:	4603      	mov	r3, r0
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d100      	bne.n	8008bb2 <memset+0xa>
 8008bb0:	4770      	bx	lr
 8008bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8008bb6:	e7f9      	b.n	8008bac <memset+0x4>

08008bb8 <_sbrk_r>:
 8008bb8:	b538      	push	{r3, r4, r5, lr}
 8008bba:	4d06      	ldr	r5, [pc, #24]	@ (8008bd4 <_sbrk_r+0x1c>)
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	4608      	mov	r0, r1
 8008bc2:	602b      	str	r3, [r5, #0]
 8008bc4:	f7f8 f904 	bl	8000dd0 <_sbrk>
 8008bc8:	1c43      	adds	r3, r0, #1
 8008bca:	d102      	bne.n	8008bd2 <_sbrk_r+0x1a>
 8008bcc:	682b      	ldr	r3, [r5, #0]
 8008bce:	b103      	cbz	r3, 8008bd2 <_sbrk_r+0x1a>
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	bd38      	pop	{r3, r4, r5, pc}
 8008bd4:	20002300 	.word	0x20002300

08008bd8 <__errno>:
 8008bd8:	4b01      	ldr	r3, [pc, #4]	@ (8008be0 <__errno+0x8>)
 8008bda:	6818      	ldr	r0, [r3, #0]
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	20000464 	.word	0x20000464

08008be4 <__libc_init_array>:
 8008be4:	b570      	push	{r4, r5, r6, lr}
 8008be6:	4d0d      	ldr	r5, [pc, #52]	@ (8008c1c <__libc_init_array+0x38>)
 8008be8:	4c0d      	ldr	r4, [pc, #52]	@ (8008c20 <__libc_init_array+0x3c>)
 8008bea:	1b64      	subs	r4, r4, r5
 8008bec:	10a4      	asrs	r4, r4, #2
 8008bee:	2600      	movs	r6, #0
 8008bf0:	42a6      	cmp	r6, r4
 8008bf2:	d109      	bne.n	8008c08 <__libc_init_array+0x24>
 8008bf4:	4d0b      	ldr	r5, [pc, #44]	@ (8008c24 <__libc_init_array+0x40>)
 8008bf6:	4c0c      	ldr	r4, [pc, #48]	@ (8008c28 <__libc_init_array+0x44>)
 8008bf8:	f000 f872 	bl	8008ce0 <_init>
 8008bfc:	1b64      	subs	r4, r4, r5
 8008bfe:	10a4      	asrs	r4, r4, #2
 8008c00:	2600      	movs	r6, #0
 8008c02:	42a6      	cmp	r6, r4
 8008c04:	d105      	bne.n	8008c12 <__libc_init_array+0x2e>
 8008c06:	bd70      	pop	{r4, r5, r6, pc}
 8008c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c0c:	4798      	blx	r3
 8008c0e:	3601      	adds	r6, #1
 8008c10:	e7ee      	b.n	8008bf0 <__libc_init_array+0xc>
 8008c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c16:	4798      	blx	r3
 8008c18:	3601      	adds	r6, #1
 8008c1a:	e7f2      	b.n	8008c02 <__libc_init_array+0x1e>
 8008c1c:	08008d40 	.word	0x08008d40
 8008c20:	08008d40 	.word	0x08008d40
 8008c24:	08008d40 	.word	0x08008d40
 8008c28:	08008d44 	.word	0x08008d44

08008c2c <__retarget_lock_acquire_recursive>:
 8008c2c:	4770      	bx	lr

08008c2e <__retarget_lock_release_recursive>:
 8008c2e:	4770      	bx	lr

08008c30 <memcpy>:
 8008c30:	440a      	add	r2, r1
 8008c32:	4291      	cmp	r1, r2
 8008c34:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c38:	d100      	bne.n	8008c3c <memcpy+0xc>
 8008c3a:	4770      	bx	lr
 8008c3c:	b510      	push	{r4, lr}
 8008c3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c46:	4291      	cmp	r1, r2
 8008c48:	d1f9      	bne.n	8008c3e <memcpy+0xe>
 8008c4a:	bd10      	pop	{r4, pc}

08008c4c <_free_r>:
 8008c4c:	b538      	push	{r3, r4, r5, lr}
 8008c4e:	4605      	mov	r5, r0
 8008c50:	2900      	cmp	r1, #0
 8008c52:	d041      	beq.n	8008cd8 <_free_r+0x8c>
 8008c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c58:	1f0c      	subs	r4, r1, #4
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	bfb8      	it	lt
 8008c5e:	18e4      	addlt	r4, r4, r3
 8008c60:	f7ff ff96 	bl	8008b90 <__malloc_lock>
 8008c64:	4a1d      	ldr	r2, [pc, #116]	@ (8008cdc <_free_r+0x90>)
 8008c66:	6813      	ldr	r3, [r2, #0]
 8008c68:	b933      	cbnz	r3, 8008c78 <_free_r+0x2c>
 8008c6a:	6063      	str	r3, [r4, #4]
 8008c6c:	6014      	str	r4, [r2, #0]
 8008c6e:	4628      	mov	r0, r5
 8008c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c74:	f7ff bf92 	b.w	8008b9c <__malloc_unlock>
 8008c78:	42a3      	cmp	r3, r4
 8008c7a:	d908      	bls.n	8008c8e <_free_r+0x42>
 8008c7c:	6820      	ldr	r0, [r4, #0]
 8008c7e:	1821      	adds	r1, r4, r0
 8008c80:	428b      	cmp	r3, r1
 8008c82:	bf01      	itttt	eq
 8008c84:	6819      	ldreq	r1, [r3, #0]
 8008c86:	685b      	ldreq	r3, [r3, #4]
 8008c88:	1809      	addeq	r1, r1, r0
 8008c8a:	6021      	streq	r1, [r4, #0]
 8008c8c:	e7ed      	b.n	8008c6a <_free_r+0x1e>
 8008c8e:	461a      	mov	r2, r3
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	b10b      	cbz	r3, 8008c98 <_free_r+0x4c>
 8008c94:	42a3      	cmp	r3, r4
 8008c96:	d9fa      	bls.n	8008c8e <_free_r+0x42>
 8008c98:	6811      	ldr	r1, [r2, #0]
 8008c9a:	1850      	adds	r0, r2, r1
 8008c9c:	42a0      	cmp	r0, r4
 8008c9e:	d10b      	bne.n	8008cb8 <_free_r+0x6c>
 8008ca0:	6820      	ldr	r0, [r4, #0]
 8008ca2:	4401      	add	r1, r0
 8008ca4:	1850      	adds	r0, r2, r1
 8008ca6:	4283      	cmp	r3, r0
 8008ca8:	6011      	str	r1, [r2, #0]
 8008caa:	d1e0      	bne.n	8008c6e <_free_r+0x22>
 8008cac:	6818      	ldr	r0, [r3, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	6053      	str	r3, [r2, #4]
 8008cb2:	4408      	add	r0, r1
 8008cb4:	6010      	str	r0, [r2, #0]
 8008cb6:	e7da      	b.n	8008c6e <_free_r+0x22>
 8008cb8:	d902      	bls.n	8008cc0 <_free_r+0x74>
 8008cba:	230c      	movs	r3, #12
 8008cbc:	602b      	str	r3, [r5, #0]
 8008cbe:	e7d6      	b.n	8008c6e <_free_r+0x22>
 8008cc0:	6820      	ldr	r0, [r4, #0]
 8008cc2:	1821      	adds	r1, r4, r0
 8008cc4:	428b      	cmp	r3, r1
 8008cc6:	bf04      	itt	eq
 8008cc8:	6819      	ldreq	r1, [r3, #0]
 8008cca:	685b      	ldreq	r3, [r3, #4]
 8008ccc:	6063      	str	r3, [r4, #4]
 8008cce:	bf04      	itt	eq
 8008cd0:	1809      	addeq	r1, r1, r0
 8008cd2:	6021      	streq	r1, [r4, #0]
 8008cd4:	6054      	str	r4, [r2, #4]
 8008cd6:	e7ca      	b.n	8008c6e <_free_r+0x22>
 8008cd8:	bd38      	pop	{r3, r4, r5, pc}
 8008cda:	bf00      	nop
 8008cdc:	200021c4 	.word	0x200021c4

08008ce0 <_init>:
 8008ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce2:	bf00      	nop
 8008ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ce6:	bc08      	pop	{r3}
 8008ce8:	469e      	mov	lr, r3
 8008cea:	4770      	bx	lr

08008cec <_fini>:
 8008cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cee:	bf00      	nop
 8008cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cf2:	bc08      	pop	{r3}
 8008cf4:	469e      	mov	lr, r3
 8008cf6:	4770      	bx	lr
